{"version":3,"file":"circle-ds.min.cjs","sources":["../../src/types/boundedEvent.ts","../../__vite-browser-external","../../src/circle/circularBase.ts","../../src/utils/constants.ts","../../src/utils/is.ts","../../src/circle/circularLinkedDeque.ts","../../src/circle/circularLinkedQueue.ts","../../src/circle/circularLinkedStack.ts","../../src/circle/circularMap.ts","../../src/circle/circularQueue.ts","../../src/circle/circularSet.ts","../../src/circle/circularStack.ts"],"sourcesContent":["export const BoundedEvent = {\n  Overflow: \"overflow\",\n} as const;\n","export default {}","import EventEmitter from \"events\";\nimport { BoundedEvent } from \"../types/boundedEvent\";\nimport { ValueOf } from \"../types/valueOf\";\n\nexport interface BoundedConstructor<T> {\n  new (capacity?: number | null): CircularBase<T>;\n}\n\nexport class CircularBase<T> {\n  /**\n   * The event emitter.\n   * @internal\n   */\n  protected emitter: EventEmitter;\n\n  constructor() {\n    this.emitter = new EventEmitter();\n  }\n\n  /**\n   * Appends the listener function to the listeners array for the\n   * {@link BoundedEvent.Overflow} event.\n   *\n   * * No checks are made to see if the listener has already been added.\n   * Multiple calls with the same of event + listener combination will\n   * result in the listener being added and called multiple times.\n   *\n   * * By default, event listeners are invoked in the order they are added.\n   * The `prependListener()` method can be used as an alternative to add\n   * the event listener to the beginning of the listeners array.\n   *\n   * @param event - The name of the event.\n   * @param listener - The callback function. It will\n   * receive an array of elements that have been removed due to overflow.\n   * This can happen when elements are added while the collection is at\n   * capacity, or when capacity is reduced below the current size.\n   *\n   * @returns the collection.\n   */\n  addListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this;\n  addListener(\n    event: ValueOf<typeof BoundedEvent>,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    listener: (...args: any[]) => void\n  ): this {\n    this.emitter.addListener(event, listener);\n    return this;\n  }\n\n  /**\n   * Appends the listener function to the listeners array for the\n   * {@link BoundedEvent.Overflow} event.\n   *\n   * * No checks are made to see if the listener has already been added.\n   * Multiple calls with the same of event + listener combination will\n   * result in the listener being added and called multiple times.\n   *\n   * * By default, event listeners are invoked in the order they are added.\n   * The `prependListener()` method can be used as an alternative to add\n   * the event listener to the beginning of the listeners array.\n   *\n   * @param event - The name of the event.\n   * @param listener - The callback function. It will\n   * receive an array of elements that have been removed due to overflow.\n   * This can happen when elements are added while the collection is at\n   * capacity, or when capacity is reduced below the current size.\n   *\n   * @returns the collection.\n   */\n  on(event: typeof BoundedEvent.Overflow, listener: (elems: T[]) => void): this;\n  on(\n    event: ValueOf<typeof BoundedEvent>,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    listener: (...args: any[]) => void\n  ): this {\n    this.emitter.on(event, listener);\n    return this;\n  }\n\n  /**\n   * Adds the listener function to the beginning of the listeners array for\n   * the {@link BoundedEvent.Overflow} event.\n   *\n   * * No checks are made to see if the listener has already been added.\n   * Multiple calls with the same of event + listener combination will\n   * result in the listener being added and called multiple times.\n   *\n   * * Alternatively, the `addListener()` method can be used to add\n   * the event listener to the end of the listeners array.\n   *\n   * @param event - The name of the event.\n   * @param listener - The callback function. It will\n   * receive an array of elements that have been removed due to overflow.\n   * This can happen when elements are added while the collection is at\n   * capacity, or when capacity is reduced below the current size.\n   *\n   * @returns the collection.\n   */\n  prependListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this;\n  prependListener(\n    event: ValueOf<typeof BoundedEvent>,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    listener: (...args: any[]) => void\n  ): this {\n    this.emitter.prependListener(event, listener);\n    return this;\n  }\n\n  /**\n   * Removes the specified listener from the listener array for the event.\n   *\n   * At most once instance of a listener will be removed. If a listener\n   * has been added multiple times for the same event, this method should\n   * be called once per instance.\n   *\n   * @param event - The name of the event.\n   * @param listener - The callback function.\n   *\n   * @returns the collection.\n   */\n  removeListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this;\n  removeListener(\n    event: ValueOf<typeof BoundedEvent>,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    listener: (...args: any[]) => void\n  ): this {\n    this.emitter.removeListener(event, listener);\n    return this;\n  }\n}\n","/**\n * \"The length data property of an Array instance represents the number of\n * elements in that array. The value is an unsigned, 32-bit integer...\"\n *\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length}\n */\nexport const ARRAY_MAX_LENGTH = 4294967295; // 2**32 - 1;\n","import { ARRAY_MAX_LENGTH } from \"./constants\";\n\nexport function isArrayLength(value: unknown): value is number {\n  return (\n    Number.isInteger(value) &&\n    (value as number) >= 0 &&\n    (value as number) <= ARRAY_MAX_LENGTH\n  );\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isFunction(value: unknown): value is Function {\n  return typeof value === \"function\";\n}\n\nexport function isInfinity(value: unknown): boolean {\n  return value === Number.POSITIVE_INFINITY;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function isIterable(value: any): value is Iterable<unknown> {\n  return typeof value?.[Symbol.iterator] === \"function\";\n}\n\nexport function isNull(value: unknown): value is null {\n  return value === null;\n}\n\nexport function isNumber(value: unknown): value is number {\n  return typeof value === \"number\";\n}\n\nexport function isSafeCount(value: unknown): value is number {\n  return Number.isSafeInteger(value) && (value as number) >= 0;\n}\n\nexport function isSymbol(value: unknown): value is symbol {\n  return typeof value === \"symbol\";\n}\n\nexport function isUndefined(value: unknown): value is undefined {\n  return typeof value === \"undefined\";\n}\n","import { CircularBase } from \"./circularBase\";\nimport { BoundedEvent } from \"../types/boundedEvent\";\nimport { Deque } from \"../types/deque\";\nimport {\n  isInfinity,\n  isNull,\n  isNumber,\n  isSafeCount,\n  isUndefined,\n} from \"../utils/is\";\nimport { Bounded } from \"../types/bounded\";\n\ninterface Node<T> {\n  next: Node<T>;\n  prev: Node<T>;\n  value: T;\n}\n\n/**\n * A circular stack is similar to a traditional stack, but uses a fixed-size,\n * circular buffer. When the stack reaches its maximum capacity and a new\n * element is added, the oldest is discarded, thus maintaining its size.\n *\n * This structure efficiently utilizes memory for applications where only the\n * most recent additions are of interest and older data can be discarded.\n *\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularLinkedDeque<T>\n  extends CircularBase<T>\n  implements Bounded<T>, Deque<T>\n{\n  /**\n   * The maximum number of elements that can be stored in the collection.\n   */\n  protected _capacity: number;\n\n  /**\n   * The root of the collection.\n   * @internal\n   */\n  protected root: Node<T>;\n\n  /**\n   * The number of elements in the collection.\n   * @internal\n   */\n  protected _size: number;\n\n  /**\n   * Creates a new stack with `capacity` defaulted to `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new stack with the given capacity.\n   *\n   * @param capacity - the stack's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new stack. Initial capacity is the number of items given.\n   *\n   * @param items - the values to store in the stack.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    super();\n\n    // Initialize class variables\n    this._capacity = Infinity;\n    this.root = { value: undefined } as Node<T>;\n    this.root.next = this.root;\n    this.root.prev = this.root;\n    this._size = 0;\n\n    // Case 1: capacity is null, undefined or Infinity\n    if (isUndefined(capacity) || isNull(capacity) || isInfinity(capacity)) {\n      return;\n    }\n\n    // Case 2: capacity is zero or a positive safe integer\n    if (isNumber(capacity)) {\n      if (!isSafeCount(capacity)) {\n        throw new RangeError(\"Invalid capacity\");\n      }\n      this._capacity = capacity;\n      return;\n    }\n\n    // Case 3: capacity is iterable\n    let tail = this.root.prev;\n    for (const value of capacity as Iterable<T>) {\n      tail.next = { next: this.root, prev: tail, value };\n      tail = tail.next;\n      this.root.prev = tail;\n      ++this._size;\n    }\n    this._capacity = this._size;\n  }\n\n  /**\n   * @returns the maximum number of elements that can be stored.\n   */\n  get capacity(): number {\n    return this._capacity;\n  }\n\n  /**\n   *  @returns the number of elements in the collection.\n   */\n  get size(): number {\n    return this._size;\n  }\n\n  /**\n   * Return the type of the object.\n   */\n  get [Symbol.toStringTag]() {\n    return CircularLinkedDeque.name;\n  }\n\n  /**\n   * Sets the maximum number of elements that can be stored.\n   */\n  set capacity(capacity: number) {\n    // Convert input to a number\n    capacity = +capacity;\n\n    // If input is NaN, below zero, or a non-integer\n    if (!isInfinity(capacity) && !isSafeCount(capacity)) {\n      throw new RangeError(\"Invalid capacity\");\n    }\n\n    // If current size fits within new capacity\n    if (this._size <= capacity) {\n      this._capacity = capacity;\n      return;\n    }\n\n    // Shrink stack\n    const items: T[] = [];\n    let head = this.root.next;\n    do {\n      items.push(head.value);\n      head = head.next;\n    } while (--this._size > capacity);\n    this.root.next = head;\n    head.prev = this.root;\n\n    // Update capacity\n    this._capacity = capacity;\n\n    // Emit discarded items\n    this.emitter.emit(BoundedEvent.Overflow, items);\n  }\n\n  /**\n   * Remove all elements and resets the collection.\n   */\n  clear(): void {\n    this._size = 0;\n    this.root = { value: undefined } as Node<T>;\n    this.root.next = this.root;\n    this.root.prev = this.root;\n  }\n\n  /**\n   * Iterate through the collection's entries.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @returns an iterable of [key, value] pairs for every entry.\n   */\n  *entries(): IterableIterator<[number, T]> {\n    let node = this.root;\n    for (let i = 0; i < this._size; ++i) {\n      node = node.next;\n      yield [i, node.value];\n    }\n  }\n\n  /**\n   * Get the first element in the queue.\n   *\n   * Alias for {@link top | top()}.\n   *\n   * @returns the first element, or `undefined` if empty.\n   */\n  first(): T | undefined {\n    return this.root.next.value;\n  }\n\n  /**\n   * Performs the specified action for each element in the collection.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @param callbackfn - A function that accepts up to three arguments. It is called once per element.\n   * @param thisArg - An object to which the `this` keyword refers to in the `callbackfn` function. If omitted, `undefined` is used.\n   */\n  forEach(\n    callbackfn: (value: T, index: number, collection: this) => void,\n    thisArg?: unknown\n  ): void {\n    let node = this.root;\n    for (let i = 0; i < this._size; ++i) {\n      node = node.next;\n      callbackfn.call(thisArg, node.value, i, this);\n    }\n  }\n\n  /**\n   * Get the element at the front of the queue.\n   *\n   * Alias for {@link top | top()}.\n   *\n   * @returns the first element, or `undefined` if empty.\n   */\n  front(): T | undefined {\n    return this.root.next.value;\n  }\n\n  /**\n   * Determines whether a given element is in the collection.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @param value - The element to search for\n   *\n   * @returns a boolean indicating if `value` was found or not\n   */\n  has(value: T): boolean {\n    let node = this.root;\n    for (let i = 0; i < this._size; ++i) {\n      node = node.next;\n      if (node.value === value) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Iterate through the collection's keys.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @returns an iterable of keys.\n   */\n  *keys(): IterableIterator<number> {\n    for (let i = 0; i < this._size; ++i) {\n      yield i;\n    }\n  }\n\n  /**\n   * Get the last element pushed onto the stack.\n   *\n   * Alias for {@link top | top()}.\n   *\n   * @returns the last element, or `undefined` if empty.\n   */\n  last(): T | undefined {\n    return this.root.prev.value;\n  }\n\n  /**\n   * Removes the top element from the stack and returns it.\n   *\n   * @returns the top element, or `undefined` if empty.\n   */\n  pop(): T | undefined {\n    if (this._size < 1) {\n      return undefined;\n    }\n    const node = this.root.prev;\n    this.root.prev = node.prev;\n    node.prev.next = this.root;\n    --this._size;\n    return node.value;\n  }\n\n  /**\n   * Inserts new elements at the end of the stack.\n   *\n   * @param elems - Elements to insert.\n   *\n   * @returns The overwritten elements, if any.\n   */\n  push(...elems: T[]): number {\n    const capacity = this._capacity;\n    if (capacity < 1) {\n      this.emitter.emit(BoundedEvent.Overflow, elems);\n      return this._size;\n    }\n\n    const N = elems.length;\n    const root = this.root;\n    const evicted: T[] = [];\n\n    let tail = root.prev;\n    for (let i = 0; i < N; ++i) {\n      tail.next = { next: root, prev: tail, value: elems[i] };\n      tail = tail.next;\n      if (this._size < capacity) {\n        ++this._size;\n      } else {\n        evicted.push(root.next.value);\n        root.next = root.next.next;\n      }\n    }\n    root.prev = tail;\n    root.next.prev = root;\n\n    // Emit evicted items\n    if (evicted.length > 0) {\n      this.emitter.emit(BoundedEvent.Overflow, evicted);\n    }\n\n    return this._size;\n  }\n\n  /**\n   * Removes the element at the front of the queue.\n   *\n   * @returns the front element, or `undefined` if empty.\n   */\n  shift(): T | undefined {\n    if (this._size < 1) {\n      return undefined;\n    }\n    const head = this.root.next.next;\n    const value = head.prev.value;\n    this.root.next = head;\n    head.prev = this.root;\n    --this._size;\n    return value;\n  }\n\n  /**\n   * Iterate through the collection's values.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @returns an iterable of values.\n   */\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.values();\n  }\n\n  /**\n   * Get the last element pushed onto the stack.\n   *\n   * Alias for {@link top | top()}.\n   *\n   * @returns the last element, or `undefined` if empty.\n   */\n  top(): T | undefined {\n    return this.root.prev.value;\n  }\n\n  /**\n   * Inserts new elements at the front of the queue.\n   *\n   * @param elems - Elements to insert.\n   *\n   * @returns The overwritten elements, if any.\n   */\n  unshift(...elems: T[]): number {\n    const capacity = this._capacity;\n    if (capacity < 1) {\n      this.emitter.emit(BoundedEvent.Overflow, elems);\n      return this._size;\n    }\n\n    const root = this.root;\n    const evicted: T[] = [];\n\n    let head = root.next;\n    for (let i = elems.length - 1; i >= 0; --i) {\n      head = { next: head, prev: root, value: elems[i] };\n      head.next.prev = head;\n      if (this._size < capacity) {\n        ++this._size;\n      } else {\n        evicted.push(root.prev.value);\n        root.prev = root.prev.prev;\n      }\n    }\n    root.next = head;\n    root.prev.next = root;\n\n    // Emit evicted items\n    if (evicted.length > 0) {\n      this.emitter.emit(BoundedEvent.Overflow, evicted.reverse());\n    }\n\n    return this._size;\n  }\n\n  /**\n   * Iterate through the collection's values.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @returns an iterable of values.\n   */\n  *values(): IterableIterator<T> {\n    let node = this.root;\n    for (let i = 0; i < this._size; ++i) {\n      node = node.next;\n      yield node.value;\n    }\n  }\n}\n","import { CircularBase } from \"./circularBase\";\nimport { BoundedEvent } from \"../types/boundedEvent\";\nimport { Queue } from \"../types/queue\";\nimport {\n  isInfinity,\n  isNull,\n  isNumber,\n  isSafeCount,\n  isUndefined,\n} from \"../utils/is\";\nimport { Bounded } from \"../types/bounded\";\n\ninterface Node<T> {\n  next: Node<T>;\n  value: T;\n}\n\n/**\n * A circular queue is similar to a traditional queue, but uses a fixed-size,\n * circular buffer. When the queue reaches its maximum capacity and a new\n * element is added, the oldest is discarded, thus maintaining its size.\n *\n * This structure efficiently utilizes memory for applications where only the\n * most recent additions are of interest and older data can be discarded.\n *\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularLinkedQueue<T>\n  extends CircularBase<T>\n  implements Bounded<T>, Queue<T>\n{\n  /**\n   * The maximum number of elements that can be stored in the collection.\n   */\n  protected _capacity: number;\n\n  /**\n   * The root of the collection.\n   * @internal\n   */\n  protected root: Node<T>;\n\n  /**\n   * The number of elements in the collection.\n   * @internal\n   */\n  protected _size: number;\n\n  /**\n   * The tail of the collection.\n   * @internal\n   */\n  protected tail: Node<T>;\n\n  /**\n   * Creates a new stack with `capacity` defaulted to `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new stack with the given capacity.\n   *\n   * @param capacity - the stack's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new stack. Initial capacity is the number of items given.\n   *\n   * @param items - the values to store in the stack.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    super();\n\n    // Initialize class variables\n    this._capacity = Infinity;\n    this.root = { value: undefined } as Node<T>;\n    this.root.next = this.root;\n    this._size = 0;\n    this.tail = this.root;\n\n    // Case 1: capacity is null, undefined or Infinity\n    if (isUndefined(capacity) || isNull(capacity) || isInfinity(capacity)) {\n      return;\n    }\n\n    // Case 2: capacity is zero or a positive safe integer\n    if (isNumber(capacity)) {\n      if (!isSafeCount(capacity)) {\n        throw new RangeError(\"Invalid capacity\");\n      }\n      this._capacity = capacity;\n      return;\n    }\n\n    // Case 3: capacity is iterable\n    let tail = this.root;\n    for (const value of capacity as Iterable<T>) {\n      tail.next = { next: this.root, value } as Node<T>;\n      tail = tail.next;\n      ++this._size;\n    }\n    this.tail = tail;\n    tail.next = this.root;\n    this._capacity = this._size;\n  }\n\n  /**\n   * @returns the maximum number of elements that can be stored.\n   */\n  get capacity(): number {\n    return this._capacity;\n  }\n\n  /**\n   *  @returns the number of elements in the collection.\n   */\n  get size(): number {\n    return this._size;\n  }\n\n  /**\n   * Return the type of the object.\n   */\n  get [Symbol.toStringTag]() {\n    return CircularLinkedQueue.name;\n  }\n\n  /**\n   * Sets the maximum number of elements that can be stored.\n   */\n  set capacity(capacity: number) {\n    // Convert input to a number\n    capacity = +capacity;\n\n    // If input is NaN, below zero, or a non-integer\n    if (!isInfinity(capacity) && !isSafeCount(capacity)) {\n      throw new RangeError(\"Invalid capacity\");\n    }\n\n    // If current size fits within new capacity\n    if (this._size <= capacity) {\n      this._capacity = capacity;\n      return;\n    }\n\n    // Shrink queue\n    const items: T[] = [];\n    let head = this.root.next;\n    do {\n      items.push(head.value);\n      head = head.next;\n    } while (--this._size > capacity);\n    this.root.next = head;\n    this.tail = this._size > 0 ? this.tail : this.root;\n\n    // Update capacity\n    this._capacity = capacity;\n\n    // Emit discarded items\n    this.emitter.emit(BoundedEvent.Overflow, items);\n  }\n\n  /**\n   * Remove all elements and resets the collection.\n   */\n  clear(): void {\n    this._size = 0;\n    this.root = { value: undefined } as Node<T>;\n    this.root.next = this.root;\n    this.tail = this.root;\n  }\n\n  /**\n   * Iterate through the collection's entries.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @returns an iterable of [key, value] pairs for every entry.\n   */\n  *entries(): IterableIterator<[number, T]> {\n    let node = this.root;\n    for (let i = 0; i < this._size; ++i) {\n      node = node.next;\n      yield [i, node.value];\n    }\n  }\n\n  /**\n   * Get the first element in the queue.\n   *\n   * Alias for {@link top | top()}.\n   *\n   * @returns the first element, or `undefined` if empty.\n   */\n  first(): T | undefined {\n    return this.root.next.value;\n  }\n\n  /**\n   * Performs the specified action for each element in the collection.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @param callbackfn - A function that accepts up to three arguments. It is called once per element.\n   * @param thisArg - An object to which the `this` keyword refers to in the `callbackfn` function. If omitted, `undefined` is used.\n   */\n  forEach(\n    callbackfn: (value: T, index: number, collection: this) => void,\n    thisArg?: unknown\n  ): void {\n    let node = this.root;\n    for (let i = 0; i < this._size; ++i) {\n      node = node.next;\n      callbackfn.call(thisArg, node.value, i, this);\n    }\n  }\n\n  /**\n   * Get the element at the front of the queue.\n   *\n   * Alias for {@link top | top()}.\n   *\n   * @returns the first element, or `undefined` if empty.\n   */\n  front(): T | undefined {\n    return this.root.next.value;\n  }\n\n  /**\n   * Determines whether a given element is in the collection.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @param value - The element to search for\n   *\n   * @returns a boolean indicating if `value` was found or not\n   */\n  has(value: T): boolean {\n    let node = this.root;\n    for (let i = 0; i < this._size; ++i) {\n      node = node.next;\n      if (node.value === value) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Iterate through the collection's keys.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @returns an iterable of keys.\n   */\n  *keys(): IterableIterator<number> {\n    for (let i = 0; i < this._size; ++i) {\n      yield i;\n    }\n  }\n\n  /**\n   * Inserts new elements at the end of the stack.\n   *\n   * @param elems - Elements to insert.\n   *\n   * @returns The overwritten elements, if any.\n   */\n  push(...elems: T[]): number {\n    const capacity = this._capacity;\n    if (capacity < 1) {\n      return this._size;\n    }\n\n    const N = elems.length;\n    const root = this.root;\n    const evicted: T[] = [];\n\n    for (let i = 0; i < N; ++i) {\n      this.tail.next = { next: root, value: elems[i] };\n      this.tail = this.tail.next;\n      if (this._size < capacity) {\n        ++this._size;\n      } else {\n        evicted.push(root.next.value);\n        root.next = root.next.next;\n      }\n    }\n\n    // Emit evicted items\n    if (evicted.length > 0) {\n      this.emitter.emit(BoundedEvent.Overflow, evicted);\n    }\n\n    return this._size;\n  }\n\n  /**\n   * Removes the element at the front of the queue.\n   *\n   * @returns the front element, or `undefined` if empty.\n   */\n  shift(): T | undefined {\n    if (this._size < 1) {\n      return undefined;\n    }\n    const head = this.root.next;\n    this.root.next = head.next;\n    if (--this._size < 1) {\n      this.tail = this.root;\n    }\n    return head.value;\n  }\n\n  /**\n   * Iterate through the collection's values.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @returns an iterable of values.\n   */\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.values();\n  }\n\n  /**\n   * Iterate through the collection's values.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @returns an iterable of values.\n   */\n  *values(): IterableIterator<T> {\n    let node = this.root;\n    for (let i = 0; i < this._size; ++i) {\n      node = node.next;\n      yield node.value;\n    }\n  }\n}\n","import { CircularBase } from \"./circularBase\";\nimport { Stack } from \"../types/stack\";\nimport {\n  isInfinity,\n  isNull,\n  isNumber,\n  isSafeCount,\n  isUndefined,\n} from \"../utils/is\";\nimport { BoundedEvent } from \"..\";\nimport { Bounded } from \"../types/bounded\";\n\ninterface Node<T> {\n  next: Node<T>;\n  prev: Node<T>;\n  value: T;\n}\n\n/**\n * A circular stack is similar to a traditional stack, but uses a fixed-size,\n * circular buffer. When the stack reaches its maximum capacity and a new\n * element is added, the oldest is discarded, thus maintaining its size.\n *\n * This structure efficiently utilizes memory for applications where only the\n * most recent additions are of interest and older data can be discarded.\n *\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularLinkedStack<T>\n  extends CircularBase<T>\n  implements Bounded<T>, Stack<T>\n{\n  /**\n   * The maximum number of elements that can be stored in the collection.\n   */\n  protected _capacity: number;\n\n  /**\n   * The root of the collection.\n   * @internal\n   */\n  protected root: Node<T>;\n\n  /**\n   * The number of elements in the collection.\n   * @internal\n   */\n  protected _size: number;\n\n  /**\n   * Creates a new stack with `capacity` defaulted to `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new stack with the given capacity.\n   *\n   * @param capacity - the stack's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new stack. Initial capacity is the number of items given.\n   *\n   * @param items - the values to store in the stack.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    super();\n\n    // Initialize class variables\n    this._capacity = Infinity;\n    this.root = { value: undefined } as Node<T>;\n    this.root.next = this.root;\n    this.root.prev = this.root;\n    this._size = 0;\n\n    // Case 1: capacity is null, undefined or Infinity\n    if (isUndefined(capacity) || isNull(capacity) || isInfinity(capacity)) {\n      return;\n    }\n\n    // Case 2: capacity is zero or a positive safe integer\n    if (isNumber(capacity)) {\n      if (!isSafeCount(capacity)) {\n        throw new RangeError(\"Invalid capacity\");\n      }\n      this._capacity = capacity;\n      return;\n    }\n\n    // Case 3: capacity is iterable\n    let tail = this.root;\n    for (const value of capacity as Iterable<T>) {\n      tail.next = { prev: tail, value } as Node<T>;\n      tail = tail.next;\n      ++this._size;\n    }\n    tail.next = this.root;\n    this.root.prev = tail;\n    this._capacity = this._size;\n  }\n\n  /**\n   * @returns the maximum number of elements that can be stored.\n   */\n  get capacity(): number {\n    return this._capacity;\n  }\n\n  /**\n   *  @returns the number of elements in the collection.\n   */\n  get size(): number {\n    return this._size;\n  }\n\n  /**\n   * Return the type of the object.\n   */\n  get [Symbol.toStringTag]() {\n    return CircularLinkedStack.name;\n  }\n\n  /**\n   * Sets the maximum number of elements that can be stored.\n   */\n  set capacity(capacity: number) {\n    // Convert input to a number\n    capacity = +capacity;\n\n    // If input is NaN, below zero, or a non-integer\n    if (!isInfinity(capacity) && !isSafeCount(capacity)) {\n      throw new RangeError(\"Invalid capacity\");\n    }\n\n    // If current size fits within new capacity\n    if (this._size <= capacity) {\n      this._capacity = capacity;\n      return;\n    }\n\n    // Shrink stack\n    const items: T[] = [];\n    let head = this.root.next;\n    do {\n      items.push(head.value);\n      head = head.next;\n    } while (--this._size > capacity);\n    this.root.next = head;\n    head.prev = this.root;\n\n    // Update capacity\n    this._capacity = capacity;\n\n    // Emit discarded items\n    this.emitter.emit(BoundedEvent.Overflow, items);\n  }\n\n  /**\n   * Remove all elements and resets the collection.\n   */\n  clear(): void {\n    this._size = 0;\n    this.root = { value: undefined } as Node<T>;\n    this.root.next = this.root;\n    this.root.prev = this.root;\n  }\n\n  /**\n   * Iterate through the collection's entries.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @returns an iterable of [key, value] pairs for every entry.\n   */\n  *entries(): IterableIterator<[number, T]> {\n    let node = this.root;\n    for (let i = 0; i < this._size; ++i) {\n      node = node.next;\n      yield [i, node.value];\n    }\n  }\n\n  /**\n   * Performs the specified action for each element in the collection.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @param callbackfn - A function that accepts up to three arguments. It is called once per element.\n   * @param thisArg - An object to which the `this` keyword refers to in the `callbackfn` function. If omitted, `undefined` is used.\n   */\n  forEach(\n    callbackfn: (value: T, index: number, collection: this) => void,\n    thisArg?: unknown\n  ): void {\n    let node = this.root;\n    for (let i = 0; i < this._size; ++i) {\n      node = node.next;\n      callbackfn.call(thisArg, node.value, i, this);\n    }\n  }\n\n  /**\n   * Determines whether a given element is in the collection.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @param value - The element to search for\n   *\n   * @returns a boolean indicating if `value` was found or not\n   */\n  has(value: T): boolean {\n    let node = this.root;\n    for (let i = 0; i < this._size; ++i) {\n      node = node.next;\n      if (node.value === value) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Iterate through the collection's keys.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @returns an iterable of keys.\n   */\n  *keys(): IterableIterator<number> {\n    for (let i = 0; i < this._size; ++i) {\n      yield i;\n    }\n  }\n\n  /**\n   * Get the last element pushed onto the stack.\n   *\n   * Alias for {@link top | top()}.\n   *\n   * @returns the last element, or `undefined` if empty.\n   */\n  last(): T | undefined {\n    return this.root.prev.value;\n  }\n\n  /**\n   * Removes the top element from the stack and returns it.\n   *\n   * @returns the top element, or `undefined` if empty.\n   */\n  pop(): T | undefined {\n    if (this._size < 1) {\n      return undefined;\n    }\n    const node = this.root.prev;\n    this.root.prev = node.prev;\n    node.prev.next = this.root;\n    --this._size;\n    return node.value;\n  }\n\n  /**\n   * Inserts new elements at the end of the stack.\n   *\n   * @param elems - Elements to insert.\n   *\n   * @returns The overwritten elements, if any.\n   */\n  push(...elems: T[]): number {\n    const capacity = this._capacity;\n    if (capacity < 1) {\n      return this._size;\n    }\n\n    const N = elems.length;\n    const root = this.root;\n    const evicted: T[] = [];\n\n    let tail = root.prev;\n    for (let i = 0; i < N; ++i) {\n      tail.next = { next: root, prev: tail, value: elems[i] };\n      tail = tail.next;\n      if (this._size < capacity) {\n        ++this._size;\n      } else {\n        evicted.push(root.next.value);\n        root.next = root.next.next;\n      }\n    }\n    root.prev = tail;\n    root.next.prev = root;\n\n    // Emit evicted items\n    if (evicted.length > 0) {\n      this.emitter.emit(BoundedEvent.Overflow, evicted);\n    }\n\n    return this._size;\n  }\n\n  /**\n   * Iterate through the collection's values.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @returns an iterable of values.\n   */\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.values();\n  }\n\n  /**\n   * Get the last element pushed onto the stack.\n   *\n   * Alias for {@link top | top()}.\n   *\n   * @returns the last element, or `undefined` if empty.\n   */\n  top(): T | undefined {\n    return this.root.prev.value;\n  }\n\n  /**\n   * Iterate through the collection's values.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @returns an iterable of values.\n   */\n  *values(): IterableIterator<T> {\n    let node = this.root;\n    for (let i = 0; i < this._size; ++i) {\n      node = node.next;\n      yield node.value;\n    }\n  }\n}\n","import { Bounded } from \"../types/bounded\";\nimport { BoundedEvent } from \"../types/boundedEvent\";\nimport { Collection } from \"../types/collection\";\nimport {\n  isInfinity,\n  isNull,\n  isNumber,\n  isSafeCount,\n  isUndefined,\n} from \"../utils/is\";\n\nimport { CircularBase } from \"./circularBase\";\n\n/**\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularMap<K, V>\n  extends CircularBase<[K, V]>\n  implements Bounded<[K, V]>, Map<K, V>, Collection<K, V>\n{\n  /**\n   * The maximum number of elements that can be stored in the collection.\n   */\n  protected _capacity: number;\n\n  /**\n   * The internal map.\n   * @internal\n   */\n  protected map: Map<K, V>;\n\n  /**\n   * Creates a new map with `capacity` defaulted to `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new map with the given capacity.\n   *\n   * @param capacity - the map's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new map. Initial capacity is the number of unique items given.\n   *\n   * @param items - the values to store in the map.\n   */\n  constructor(items: Iterable<[K, V]>);\n  constructor(capacity?: number | null | Iterable<[K, V]>) {\n    super();\n\n    // Initialize class variables\n    this._capacity = Infinity;\n    this.map = new Map();\n\n    // Case 1: capacity is null, undefined or Infinity\n    if (isUndefined(capacity) || isNull(capacity) || isInfinity(capacity)) {\n      return;\n    }\n\n    // Case 2: capacity is zero or a safe positive integer\n    if (isNumber(capacity)) {\n      if (!isSafeCount(capacity)) {\n        throw new RangeError(\"Invalid capacity\");\n      }\n      this._capacity = capacity;\n      return;\n    }\n\n    // Case 3: capacity is iterable\n    for (const [key, value] of capacity as Iterable<[K, V]>) {\n      this.map.set(key, value);\n    }\n    this._capacity = this.map.size;\n  }\n\n  /**\n   * @returns the maximum number of elements that can be stored.\n   */\n  get capacity(): number {\n    return this._capacity;\n  }\n\n  /**\n   *  @returns the number of values in the map.\n   */\n  get size(): number {\n    return this.map.size;\n  }\n\n  /**\n   * Return the type of the object.\n   */\n  get [Symbol.toStringTag]() {\n    return CircularMap.name;\n  }\n\n  /**\n   * The maximum number of elements that can be stored in the map.\n   */\n  set capacity(capacity: number) {\n    // Convert input to a number\n    capacity = +capacity;\n\n    // Check if input is valid\n    if (!isInfinity(capacity) && !isSafeCount(capacity)) {\n      throw new RangeError(\"Invalid capacity\");\n    }\n\n    // Check if capacity is changing\n    if (capacity === this._capacity) {\n      return;\n    }\n\n    // Update capacity\n    this._capacity = capacity;\n\n    // Check if size is within capacity\n    if (this.size <= capacity) {\n      return;\n    }\n\n    // Check if new capacity is zero\n    if (capacity === 0) {\n      const evicted = Array.from(this.map);\n      this.clear();\n      this.emitter.emit(BoundedEvent.Overflow, evicted);\n      return;\n    }\n\n    // Shrink down map.\n    const evicted: [K, V][] = [];\n    const iter = this.map.entries();\n    for (let n = this.size - capacity; n > 0; --n) {\n      const entry = iter.next().value;\n      this.map.delete(entry[0]);\n      evicted.push(entry);\n    }\n    this.emitter.emit(BoundedEvent.Overflow, evicted);\n  }\n\n  /**\n   * Removes all elements from the map.\n   */\n  clear(): void {\n    this.map.clear();\n  }\n\n  /**\n   * Deletes a specified value from the map.\n   *\n   * @returns `true` if the value existed in the map and has been removed, or `false` otherwise.\n   */\n  delete(key: K): boolean {\n    return this.map.delete(key);\n  }\n\n  /**\n   * Iterate through the map's entries.\n   *\n   * **Note:** Modifying the map during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of [key, value] pairs for every entry.\n   */\n  entries(): IterableIterator<[K, V]> {\n    return this.map.entries();\n  }\n\n  /**\n   * Performs the specified action for each value in the map.\n   *\n   * **Note:** Modifying the map during iteration may cause unexpected behavior.\n   *\n   * @param callbackfn - A function that accepts up to three arguments. It is called once per value.\n   * @param thisArg - An object to which the `this` keyword refers to in the `callbackfn` function. Defaults to `undefined`.\n   */\n  forEach(\n    callbackfn: (value: V, key: K, map: this) => void,\n    thisArg?: unknown\n  ): void {\n    for (const [key, value] of this.map.entries()) {\n      callbackfn.call(thisArg, value, key, this);\n    }\n  }\n\n  /**\n   * Returns the associated value of the given key from the map.\n   *\n   * If the associated value is an object, then you will get a reference to that object; any change made to the object will effectively modify it inside the map.\n   *\n   * @returns the value associated with the specified key, or `undefined` if no value is associated.\n   */\n  get(key: K): V | undefined {\n    return this.map.get(key);\n  }\n\n  /**\n   * Determines whether a given value is in the map.\n   *\n   * @param key - The key to search for.\n   *\n   * @returns `true` if the value was found, `false` otherwise.\n   */\n  has(key: K): boolean {\n    return this.map.has(key);\n  }\n\n  /**\n   * Iterate through the map's keys.\n   *\n   * **Note:** Modifying the map during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of the map's keys.\n   */\n  keys(): IterableIterator<K> {\n    return this.map.keys();\n  }\n\n  /**\n   * Sets the specified key-value pair in the map.\n   *\n   * @param key - the key to add\n   * @param value - the key's value.\n   */\n  set(key: K, value: V): this {\n    // Base case: map has no capacity.\n    if (this.capacity < 1) {\n      this.emitter.emit(BoundedEvent.Overflow, [[key, value]]);\n      return this;\n    }\n\n    // Evict excess items\n    const evicted: [K, V][] = [];\n    if (!this.map.delete(key) && this.size >= this.capacity) {\n      const entry = this.map.entries().next().value;\n      this.map.delete(entry[0]);\n      evicted.push(entry);\n    }\n\n    // Add value\n    this.map.set(key, value);\n\n    // Emit evicted\n    if (evicted.length > 0) {\n      this.emitter.emit(BoundedEvent.Overflow, evicted);\n    }\n\n    return this;\n  }\n\n  /**\n   * Iterate through the map's values.\n   *\n   * **Note:** Modifying the map during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of values.\n   */\n  [Symbol.iterator](): IterableIterator<[K, V]> {\n    return this.map.entries();\n  }\n\n  /**\n   * Iterate through the map's values.\n   *\n   * **Note:** Modifying the map during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of the map's values.\n   */\n  values(): IterableIterator<V> {\n    return this.map.values();\n  }\n}\n","import { CircularBase } from \"./circularBase\";\nimport { BoundedEvent } from \"../types/boundedEvent\";\nimport { Queue } from \"../types/queue\";\nimport {\n  isArrayLength,\n  isInfinity,\n  isNull,\n  isNumber,\n  isUndefined,\n} from \"../utils/is\";\nimport { Bounded } from \"../types/bounded\";\n\n/**\n * A circular queue is similar to a traditional queue, but uses a fixed-size,\n * circular buffer. When the queue reaches its maximum capacity and a new\n * element is added, the oldest is discarded, thus maintaining its size.\n *\n * This structure efficiently utilizes memory for applications where only the\n * most recent additions are of interest and older data can be discarded.\n *\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularQueue<T>\n  extends CircularBase<T>\n  implements Bounded<T>, Queue<T>\n{\n  /**\n   * The maximum number of elements that can be stored in the collection.\n   */\n  protected _capacity: number;\n\n  /**\n   * The index representing the first element.\n   * @internal\n   */\n  protected head: number;\n\n  /**\n   * The index one more than the last element.\n   * @internal\n   */\n  protected next: number;\n\n  /**\n   * The number of elements.\n   * @internal\n   */\n  protected _size: number;\n\n  /**\n   * The stored values.\n   * @internal\n   */\n  protected vals: T[];\n\n  /**\n   * Creates a new queue. Default `capacity` is `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new queue with the given capacity.\n   *\n   * @param capacity - the queue's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new queue from the given items. `capacity` will equal the number of items.\n   *\n   * @param items - the initial values in the queue.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    super();\n\n    // Initialize class variables\n    this._capacity = Infinity;\n    this.head = 0;\n    this._size = 0;\n    this.next = 0;\n    this.vals = [];\n\n    // Case 1: capacity is null, undefined or Infinity\n    if (isUndefined(capacity) || isNull(capacity) || isInfinity(capacity)) {\n      return;\n    }\n\n    // Case 2: capacity is zero or a safe positive integer\n    if (isNumber(capacity)) {\n      if (!isArrayLength(capacity)) {\n        throw new RangeError(\"Invalid capacity\");\n      }\n      this._capacity = capacity;\n      return;\n    }\n\n    // Case 3: capacity is iterable\n    for (const value of capacity as Iterable<T>) {\n      this.vals.push(value);\n    }\n    this._capacity = this.vals.length;\n    this._size = this._capacity;\n  }\n\n  /**\n   * @returns the maximum number of elements that can be stored.\n   */\n  get capacity(): number {\n    return this._capacity;\n  }\n\n  /**\n   * Sets the maximum number of elements that can be stored.\n   */\n  set capacity(capacity: number) {\n    // Convert input to a number\n    capacity = +capacity;\n\n    // Check if input is valid\n    if (!isInfinity(capacity) && !isArrayLength(capacity)) {\n      throw new RangeError(\"Invalid capacity\");\n    }\n\n    // Check if capacity is changing\n    if (capacity === this._capacity) {\n      return;\n    }\n\n    // Check if queue is empty\n    if (this._size < 1) {\n      this._capacity = capacity;\n      this.clear();\n      return;\n    }\n\n    // Check if queue is shrinking or growing\n    capacity < this._capacity\n      ? this.emit(this.shrink(capacity)) // shrinking\n      : this.grow(capacity); // growing\n  }\n\n  /**\n   *  @returns the number of elements in the collection.\n   */\n  get size(): number {\n    return this._size;\n  }\n\n  /**\n   * Return the type of the object.\n   */\n  get [Symbol.toStringTag]() {\n    return CircularQueue.name;\n  }\n\n  /**\n   * Remove all elements and resets the collection.\n   */\n  clear(): void {\n    this.head = 0;\n    this._size = 0;\n    this.next = 0;\n    this.vals.length = 0;\n  }\n\n  /**\n   * Iterate through the collection's entries.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @returns an iterable of [key, value] pairs for every entry.\n   */\n  *entries(): IterableIterator<[number, T]> {\n    for (let ext = 0; ext < this._size; ++ext) {\n      yield [ext, this.vals[(this.head + ext) % this._capacity]];\n    }\n  }\n\n  /**\n   * Get the first element in the queue.\n   *\n   * Alias for {@link front | front()}.\n   *\n   * @returns the first element, or `undefined` if empty.\n   */\n  first(): T | undefined {\n    return this.vals[this.head];\n  }\n\n  /**\n   * Performs the specified action for each element in the collection.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @param callbackfn - A function that accepts up to three arguments. It is called once per element.\n   * @param thisArg - An object to which the `this` keyword refers to in the `callbackfn` function. If omitted, `undefined` is used.\n   */\n  forEach(\n    callbackfn: (value: T, index: number, collection: this) => void,\n    thisArg?: unknown\n  ): void {\n    const N = this._size;\n    for (let ext = 0; ext < N && ext < this._size; ++ext) {\n      const value = this.vals[(this.head + ext) % this._capacity];\n      callbackfn.call(thisArg, value, ext, this);\n    }\n  }\n\n  /**\n   * Get the element at the front of the queue.\n   *\n   * Alias for {@link first | first()}.\n   *\n   * @returns the front element, or `undefined` if empty.\n   */\n  front(): T | undefined {\n    return this.vals[this.head];\n  }\n\n  /**\n   * Determines whether a given element is in the collection.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @param value - The element to search for\n   *\n   * @returns a boolean indicating if `value` was found or not\n   */\n  has(value: T): boolean {\n    const N = this._size;\n    for (let ext = 0; ext < N; ++ext) {\n      if (value === this.vals[(this.head + ext) % this._capacity]) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Iterate through the collection's keys.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @returns an iterable of keys.\n   */\n  *keys(): IterableIterator<number> {\n    for (let ext = 0; ext < this._size; ++ext) {\n      yield ext;\n    }\n  }\n\n  /**\n   * Inserts new elements at the end of the stack.\n   *\n   * @param elems - Elements to insert.\n   *\n   * @returns The overwritten elements, if any.\n   */\n  push(...elems: T[]): number {\n    // Base 1: No input\n    const N = elems.length;\n    if (N < 1) {\n      return this._size;\n    }\n\n    // Base 2: No capacity\n    const capacity = this._capacity;\n    if (capacity < 1) {\n      this.emit([elems]);\n      return this._size;\n    }\n\n    // Get evicted items\n    const diff = N - capacity;\n    const evicted = this.evict(this.size + diff);\n    if (diff > 0) {\n      evicted.push(elems.splice(0, diff));\n    }\n\n    // Base 3: Too many inputs\n    if (diff >= 0) {\n      this.vals = elems;\n      this._size = capacity;\n      this.emit(evicted);\n      return this._size;\n    }\n\n    // Add each element to the queue\n    let tail = this.next;\n    const vals = this.vals;\n    for (let i = 0; i < N; ++i) {\n      vals[tail] = elems[i];\n      if (++tail >= capacity) {\n        tail = 0;\n      }\n    }\n\n    // Update meta and emit evicted items\n    this._size += N;\n    this.next = tail;\n    this.emit(evicted);\n    return this._size;\n  }\n\n  /**\n   * Removes the element at the front of the queue.\n   *\n   * @returns the front element, or `undefined` if empty.\n   */\n  shift(): T | undefined {\n    if (this._size <= 0) {\n      return undefined;\n    }\n\n    --this._size;\n    const value = this.vals[this.head];\n    this.vals[this.head] = undefined as T;\n    if (++this.head >= this._capacity) {\n      this.head = 0;\n      this.vals.length = this.next;\n    }\n    return value;\n  }\n\n  /**\n   * Iterate through the collection's values.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @returns an iterable of values.\n   */\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.values();\n  }\n\n  /**\n   * Iterate through the collection's values.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @returns an iterable of values.\n   */\n  *values(): IterableIterator<T> {\n    for (let ext = 0; ext < this._size; ++ext) {\n      yield this.vals[(this.head + ext) % this._capacity];\n    }\n  }\n\n  /**\n   * Grow capacity.\n   * @internal\n   *\n   * @param capacity - the new capacity\n   */\n  protected grow(capacity: number): void {\n    // Check if queue is sequential: [    H123456T    ]\n    if (this.isSequential()) {\n      this.sequentialReset(capacity);\n      return;\n    }\n\n    // Queue is not sequential: [456T    H123]\n\n    if (this._size <= this.head) {\n      // [H123456T] = A + B = N\n      const temp = this._size - this.next;\n      this.vals.copyWithin(temp, 0, this.next);\n      this.vals.copyWithin(0, this.head, this.head + temp);\n      this.vals.length = this._size;\n      this.head = 0;\n      this.next = this._size;\n    } else if (this.head + this._size <= capacity) {\n      // [        H123456T] = 2B < 2N\n      this.vals.length = this.head + this._size;\n      this.vals.copyWithin(this._capacity, 0, this.next);\n      this.vals.fill(undefined as T, 0, this.next);\n      this.next = (this.head + this._size) % capacity;\n    } /* else if (this.next + this._size <= capacity) {\n      // [    H123456T] = A + 2B = N + B < 2N\n      const temp = this._capacity - this.head;\n      this.vals.length = capacity;\n      this.vals.copyWithin(this.next, this.head, this._capacity);\n      this.vals.copyWithin(this.next + temp, 0, this.next);\n      this.vals.fill(undefined as T, 0, this.next);\n      this.vals.length = this.next + this._size;\n      this.head = this.next;\n      this.next = (this.head + this._size) % capacity;\n    } */ else {\n      // [6T      H12345] = B + D < 2B < 2N\n      const diff = capacity - this._capacity;\n      this.vals.length = capacity;\n      this.vals.copyWithin(this._capacity, 0, diff);\n      this.vals.copyWithin(0, diff, this.next);\n      const temp = Math.max(diff, this.next - diff);\n      this.vals.fill(undefined as T, temp, this.next);\n      this.next -= diff;\n    }\n\n    // Update capacity\n    this._capacity = capacity;\n  }\n\n  /**\n   * Returns whether the queue is stored sequentially in memory.\n   *\n   * @returns `true` if the queue is sequential in memory, `false` otherwise.\n   */\n  protected isSequential(): boolean {\n    return this.head < this.next || this.next < 1;\n  }\n\n  protected emit(evicted: T[][]): void {\n    const N = evicted.length;\n    for (let i = 0; i < N; ++i) {\n      this.emitter.emit(BoundedEvent.Overflow, evicted[i]);\n    }\n  }\n\n  /**\n   * Removes a given number of elements from the queue.\n   * If elements are removed, the {@link BoundedEvent.Overflow} event\n   * is emitted one or more times.\n   *\n   * @param count - The number of elements to evict\n   */\n  protected evict(count: number): T[][] {\n    if (count <= 0) {\n      return [];\n    }\n\n    const evicted: T[][] = [];\n    const len = this._capacity - this.head;\n    const isNonsequential = !this.isSequential();\n\n    if (isNonsequential && len > count) {\n      evicted.push(this.vals.slice(this.head, this.head + count));\n      this.vals.fill(undefined as T, this.head, this.head + count);\n      this.head += count;\n      this._size -= count;\n      return evicted;\n    }\n\n    if (isNonsequential) {\n      evicted.push(this.vals.slice(this.head, this.head + len));\n      this.vals.length = this.next;\n      this.head = 0;\n      this._size -= len;\n      if (count <= len) {\n        return evicted;\n      }\n      count -= len;\n    }\n\n    if (count >= this._size) {\n      evicted.push(this.vals.slice(this.head, this.head + this._size));\n      this.clear();\n      return evicted;\n    }\n\n    evicted.push(this.vals.slice(this.head, this.head + count));\n    this.vals.fill(undefined as T, this.head, this.head + count);\n    this.head += count;\n    this._size -= count;\n    return evicted;\n  }\n\n  /**\n   * Adjusts the queue to fit within the given capacity.\n   *\n   * Assumes the queue is A) sequential in memory and B) size \\<= capacity.\n   *\n   * @param capacity - The new capacity.\n   *\n   * @returns `true` if the queue was reset, `false` otherwise.\n   */\n  protected sequentialReset(capacity: number): boolean {\n    const tail = this.head + this._size;\n\n    // If queue fits in current location: [    H------T    ]\n    if (tail <= capacity) {\n      this.vals.length = tail;\n      this.next = this.vals.length % capacity;\n\n      // If queue must be fully moved: [H------T    ]\n    } else if (this.head >= capacity) {\n      this.vals.copyWithin(0, this.head, tail);\n      this.vals.length = this._size;\n      this.head = 0;\n      this.next = this._size % capacity;\n\n      // If queue must be partially moved: [--T  H----]\n    } else {\n      this.vals.copyWithin(0, capacity, tail);\n      this.vals.length = capacity;\n      this.next = tail - capacity;\n    }\n\n    this._capacity = capacity;\n    return true;\n  }\n\n  /**\n   * Shrink capacity.\n   * @internal\n   *\n   * @param capacity - the new capacity\n   */\n  protected shrink(capacity: number): T[][] {\n    // Handle overflow\n    const evicted = this.evict(this._size - capacity);\n\n    // Check if queue is sequential: [    H123456T    ]\n    if (this.isSequential()) {\n      this.sequentialReset(capacity);\n      return evicted;\n    }\n\n    // Shift 1st half of queue: [456T....H123] -> [456T..H123]\n    const diff = this._capacity - capacity;\n    this.vals.copyWithin(this.head - diff, this.head, this._capacity);\n    this.vals.length = capacity;\n    this.head -= diff;\n    this._capacity = capacity;\n    return evicted;\n  }\n}\n","import { Bounded } from \"../types/bounded\";\nimport { BoundedEvent } from \"../types/boundedEvent\";\nimport { Collection } from \"../types/collection\";\nimport {\n  isInfinity,\n  isNull,\n  isNumber,\n  isSafeCount,\n  isUndefined,\n} from \"../utils/is\";\n\nimport { CircularBase } from \"./circularBase\";\n\n/**\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularSet<T>\n  extends CircularBase<T>\n  implements Bounded<T>, Set<T>, Collection<T, T>\n{\n  /**\n   * The maximum number of elements that can be stored in the collection.\n   */\n  protected _capacity: number;\n\n  /**\n   * The internal set.\n   * @internal\n   */\n  protected set: Set<T>;\n\n  /**\n   * Creates a new set with `capacity` defaulted to `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new set with the given capacity.\n   *\n   * @param capacity - the set's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new set. Initial capacity is the number of unique items given.\n   *\n   * @param items - the values to store in the set.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    super();\n\n    // Initialize class variables\n    this._capacity = Infinity;\n    this.set = new Set();\n\n    // Case 1: capacity is null, undefined or Infinity\n    if (isUndefined(capacity) || isNull(capacity) || isInfinity(capacity)) {\n      return;\n    }\n\n    // Case 2: capacity is zero or a safe positive integer\n    if (isNumber(capacity)) {\n      if (!isSafeCount(capacity)) {\n        throw new RangeError(\"Invalid capacity\");\n      }\n      this._capacity = capacity;\n      return;\n    }\n\n    // Case 3: capacity is iterable\n    for (const value of capacity as Iterable<T>) {\n      this.set.add(value);\n    }\n    this._capacity = this.set.size;\n  }\n\n  /**\n   * @returns the maximum number of elements that can be stored.\n   */\n  get capacity(): number {\n    return this._capacity;\n  }\n\n  /**\n   *  @returns the number of values in the set.\n   */\n  get size(): number {\n    return this.set.size;\n  }\n\n  /**\n   * Return the type of the object.\n   */\n  get [Symbol.toStringTag]() {\n    return CircularSet.name;\n  }\n\n  /**\n   * The maximum number of elements that can be stored in the set.\n   */\n  set capacity(capacity: number) {\n    // Convert input to a number\n    capacity = +capacity;\n\n    // Check if input is valid\n    if (!isInfinity(capacity) && !isSafeCount(capacity)) {\n      throw new RangeError(\"Invalid capacity\");\n    }\n\n    // Check if capacity is changing\n    if (capacity === this._capacity) {\n      return;\n    }\n\n    // Update capacity\n    this._capacity = capacity;\n\n    // Check if set is within capacity\n    if (this.size <= capacity) {\n      return;\n    }\n\n    // Check if new capacity is zero\n    if (capacity === 0) {\n      const evicted = Array.from(this.set);\n      this.clear();\n      this.emitter.emit(BoundedEvent.Overflow, evicted);\n      return;\n    }\n\n    // Shrink down map.\n    const evicted: T[] = [];\n    const iter = this.set.values();\n    for (let n = this.size - capacity; n > 0; --n) {\n      const value = iter.next().value;\n      this.set.delete(value);\n      evicted.push(value);\n    }\n    this.emitter.emit(BoundedEvent.Overflow, evicted);\n  }\n\n  /**\n   * Adds the specified value to the set.\n   *\n   * @param value - the value to add.\n   */\n  add(value: T): this {\n    // Base case: set has no capacity.\n    if (this.capacity < 1) {\n      this.emitter.emit(BoundedEvent.Overflow, [value]);\n      return this;\n    }\n\n    // Evict excess items\n    const evicted: T[] = [];\n    if (!this.set.delete(value) && this.size >= this.capacity) {\n      const out = this.set.values().next().value;\n      this.set.delete(out);\n      evicted.push(out);\n    }\n\n    // Add value\n    this.set.add(value);\n\n    // Emit evicted\n    if (evicted.length > 0) {\n      this.emitter.emit(BoundedEvent.Overflow, evicted);\n    }\n\n    return this;\n  }\n\n  /**\n   * Removes all elements from the set.\n   */\n  clear(): void {\n    this.set.clear();\n  }\n\n  /**\n   * Deletes a specified value from the set.\n   *\n   * @returns `true` if the value existed in the set and has been removed, or `false` otherwise.\n   */\n  delete(value: T): boolean {\n    return this.set.delete(value);\n  }\n\n  /**\n   * Iterate through the set's entries.\n   *\n   * **Note:** Modifying the set during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of [key, value] pairs for every entry.\n   */\n  entries(): IterableIterator<[T, T]> {\n    return this.set.entries();\n  }\n\n  /**\n   * Performs the specified action for each value in the set.\n   *\n   * **Note:** Modifying the set during iteration may cause unexpected behavior.\n   *\n   * @param callbackfn - A function that accepts up to three arguments. It is called once per value.\n   * @param thisArg - An object to which the `this` keyword refers to in the `callbackfn` function. Defaults to `undefined`.\n   */\n  forEach(\n    callbackfn: (value: T, key: T, set: this) => void,\n    thisArg?: unknown\n  ): void {\n    for (const key of this.set.keys()) {\n      callbackfn.call(thisArg, key, key, this);\n    }\n  }\n\n  /**\n   * Determines whether a given value is in the set.\n   *\n   * @param value - The value to search for.\n   *\n   * @returns `true` if the value was found, `false` otherwise.\n   */\n  has(value: T): boolean {\n    return this.set.has(value);\n  }\n\n  /**\n   * Iterate through the set's keys.\n   *\n   * **Note:** Modifying the set during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of the set's keys.\n   */\n  keys(): IterableIterator<T> {\n    return this.set.keys();\n  }\n\n  /**\n   * Iterate through the set's values.\n   *\n   * **Note:** Modifying the set during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of the set's values.\n   */\n  values(): IterableIterator<T> {\n    return this.set.keys();\n  }\n\n  /**\n   * Iterate through the set's values.\n   *\n   * **Note:** Modifying the set during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of values.\n   */\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.set.values();\n  }\n}\n","import { CircularBase } from \"./circularBase\";\nimport { BoundedEvent } from \"../types/boundedEvent\";\nimport { Stack } from \"../types/stack\";\nimport {\n  isArrayLength,\n  isInfinity,\n  isNull,\n  isNumber,\n  isUndefined,\n} from \"../utils/is\";\nimport { Bounded } from \"../types/bounded\";\n\n/**\n * A circular stack is similar to a traditional stack, but uses a fixed-size,\n * circular buffer. When the stack reaches its maximum capacity and a new\n * element is added, the oldest is discarded, thus maintaining its size.\n *\n * This structure efficiently utilizes memory for applications where only the\n * most recent additions are of interest and older data can be discarded.\n *\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularStack<T>\n  extends CircularBase<T>\n  implements Bounded<T>, Stack<T>\n{\n  /**\n   * The maximum number of elements that can be stored in the collection.\n   */\n  protected _capacity: number;\n\n  /**\n   * The index representing the first element.\n   * @internal\n   */\n  protected head: number;\n\n  /**\n   * The index one more than the last element.\n   * @internal\n   */\n  protected next: number;\n\n  /**\n   * The number of elements.\n   * @internal\n   */\n  protected _size: number;\n\n  /**\n   * The stored values.\n   * @internal\n   */\n  protected vals: T[];\n\n  /**\n   * Creates a new stack. Default `capacity` is `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new stack with the given capacity.\n   *\n   * @param capacity - the stack's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new stack from the given items. `capacity` will equal the number of items.\n   *\n   * @param items - the initial values in the stack.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    super();\n\n    // Initialize class variables\n    this._capacity = Infinity;\n    this.head = 0;\n    this._size = 0;\n    this.next = 0;\n    this.vals = [];\n\n    // Case 1: capacity is null, undefined or Infinity\n    if (isUndefined(capacity) || isNull(capacity) || isInfinity(capacity)) {\n      return;\n    }\n\n    // Case 2: capacity is zero or a safe positive integer\n    if (isNumber(capacity)) {\n      if (!isArrayLength(capacity)) {\n        throw new RangeError(\"Invalid capacity\");\n      }\n      this._capacity = capacity;\n      return;\n    }\n\n    // Case 3: capacity is iterable\n    for (const value of capacity as Iterable<T>) {\n      this.vals.push(value);\n    }\n    this._capacity = this.vals.length;\n    this._size = this._capacity;\n  }\n\n  /**\n   * @returns the maximum number of elements that can be stored.\n   */\n  get capacity(): number {\n    return this._capacity;\n  }\n\n  /**\n   * Sets the maximum number of elements that can be stored.\n   */\n  set capacity(capacity: number) {\n    // Convert input to a number\n    capacity = +capacity;\n\n    // Check if input is valid\n    if (!isInfinity(capacity) && !isArrayLength(capacity)) {\n      throw new RangeError(\"Invalid capacity\");\n    }\n\n    // Check if capacity is changing\n    if (capacity === this._capacity) {\n      return;\n    }\n\n    // Check if stack is empty\n    if (this._size < 1) {\n      this._capacity = capacity;\n      this.clear();\n      return;\n    }\n\n    // Check if stack is shrinking or growing\n    capacity < this._capacity\n      ? this.emit(this.shrink(capacity)) // shrinking\n      : this.grow(capacity); // growing\n  }\n\n  /**\n   *  @returns the number of elements in the collection.\n   */\n  get size(): number {\n    return this._size;\n  }\n\n  /**\n   * Return the type of the object.\n   */\n  get [Symbol.toStringTag]() {\n    return CircularStack.name;\n  }\n\n  /**\n   * Remove all elements and resets the collection.\n   */\n  clear(): void {\n    this.head = 0;\n    this._size = 0;\n    this.next = 0;\n    this.vals.length = 0;\n  }\n\n  /**\n   * Iterate through the collection's entries.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @returns an iterable of [key, value] pairs for every entry.\n   */\n  *entries(): IterableIterator<[number, T]> {\n    for (let ext = 0; ext < this._size; ++ext) {\n      yield [ext, this.vals[(this.head + ext) % this._capacity]];\n    }\n  }\n\n  /**\n   * Performs the specified action for each element in the collection.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @param callbackfn - A function that accepts up to three arguments. It is called once per element.\n   * @param thisArg - An object to which the `this` keyword refers to in the `callbackfn` function. If omitted, `undefined` is used.\n   */\n  forEach(\n    callbackfn: (value: T, index: number, collection: this) => void,\n    thisArg?: unknown\n  ): void {\n    const N = this._size;\n    for (let ext = 0; ext < N && ext < this._size; ++ext) {\n      const value = this.vals[(this.head + ext) % this._capacity];\n      callbackfn.call(thisArg, value, ext, this);\n    }\n  }\n\n  /**\n   * Determines whether a given element is in the collection.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @param value - The element to search for\n   *\n   * @returns a boolean indicating if `value` was found or not\n   */\n  has(value: T): boolean {\n    const N = this._size;\n    for (let ext = 0; ext < N; ++ext) {\n      if (value === this.vals[(this.head + ext) % this._capacity]) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Iterate through the collection's keys.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @returns an iterable of keys.\n   */\n  *keys(): IterableIterator<number> {\n    for (let ext = 0; ext < this._size; ++ext) {\n      yield ext;\n    }\n  }\n\n  /**\n   * Get the last element in the stack.\n   *\n   * Alias for {@link top | top()}.\n   *\n   * @returns the last element, or `undefined` if empty.\n   */\n  last(): T | undefined {\n    if (this._size < 1) {\n      return undefined;\n    }\n    return this.vals[(this.head + this._size - 1) % this._capacity];\n  }\n\n  /**\n   * Removes the element at the front of the queue.\n   *\n   * @returns the front element, or `undefined` if empty.\n   */\n  pop(): T | undefined {\n    if (this._size <= 0) {\n      return undefined;\n    }\n\n    let tail = this.next - 1;\n    if (tail < 0) {\n      tail += this.head + this._size;\n    }\n\n    --this._size;\n    this.next = tail;\n    const value = this.vals[tail];\n    this.vals[tail] = undefined as T;\n    return value;\n  }\n\n  /**\n   * Inserts new elements at the end of the stack.\n   *\n   * @param elems - Elements to insert.\n   *\n   * @returns The overwritten elements, if any.\n   */\n  push(...elems: T[]): number {\n    // Base 1: No input\n    const N = elems.length;\n    if (N < 1) {\n      return this._size;\n    }\n\n    // Base 2: No capacity\n    const capacity = this._capacity;\n    if (capacity < 1) {\n      this.emit([elems]);\n      return this._size;\n    }\n\n    // Get evicted items\n    const diff = N - capacity;\n    const evicted = this.evict(this.size + diff);\n    if (diff > 0) {\n      evicted.push(elems.splice(0, diff));\n    }\n\n    // Base 3: Too many inputs\n    if (diff >= 0) {\n      this.vals = elems;\n      this._size = capacity;\n      this.emit(evicted);\n      return this._size;\n    }\n\n    // Add each element to the stack\n    let tail = this.next;\n    const vals = this.vals;\n    for (let i = 0; i < N; ++i) {\n      vals[tail] = elems[i];\n      if (++tail >= capacity) {\n        tail = 0;\n      }\n    }\n\n    // Update meta and emit evicted items\n    this._size += N;\n    this.next = tail;\n    this.emit(evicted);\n    return this._size;\n  }\n\n  /**\n   * Iterate through the collection's values.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @returns an iterable of values.\n   */\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.values();\n  }\n\n  /**\n   * Get the last element in the stack.\n   *\n   * Alias for {@link last | last()}.\n   *\n   * @returns the last element, or `undefined` if empty.\n   */\n  top(): T | undefined {\n    if (this._size < 1) {\n      return undefined;\n    }\n    return this.vals[(this.head + this._size - 1) % this._capacity];\n  }\n\n  /**\n   * Iterate through the collection's values.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @returns an iterable of values.\n   */\n  *values(): IterableIterator<T> {\n    for (let ext = 0; ext < this._size; ++ext) {\n      yield this.vals[(this.head + ext) % this._capacity];\n    }\n  }\n\n  /**\n   * Grow capacity.\n   * @internal\n   *\n   * @param capacity - the new capacity\n   */\n  protected grow(capacity: number): void {\n    // Check if stack is sequential: [    H123456T    ]\n    if (this.isSequential()) {\n      this.sequentialReset(capacity);\n      return;\n    }\n\n    // stack is not sequential: [456T    H123]\n\n    if (this._size <= this.head) {\n      // [H123456T] = A + B = N\n      const temp = this._size - this.next;\n      this.vals.copyWithin(temp, 0, this.next);\n      this.vals.copyWithin(0, this.head, this.head + temp);\n      this.vals.length = this._size;\n      this.head = 0;\n      this.next = this._size;\n    } else if (this.head + this._size <= capacity) {\n      // [        H123456T] = 2B < 2N\n      this.vals.length = this.head + this._size;\n      this.vals.copyWithin(this._capacity, 0, this.next);\n      this.vals.fill(undefined as T, 0, this.next);\n      this.next = (this.head + this._size) % capacity;\n    } /* else if (this.next + this._size <= capacity) {\n      // [    H123456T] = A + 2B = N + B < 2N\n      const temp = this._capacity - this.head;\n      this.vals.length = capacity;\n      this.vals.copyWithin(this.next, this.head, this._capacity);\n      this.vals.copyWithin(this.next + temp, 0, this.next);\n      this.vals.fill(undefined as T, 0, this.next);\n      this.vals.length = this.next + this._size;\n      this.head = this.next;\n      this.next = (this.head + this._size) % capacity;\n    } */ else {\n      // [6T      H12345] = B + D < 2B < 2N\n      const diff = capacity - this._capacity;\n      this.vals.length = capacity;\n      this.vals.copyWithin(this._capacity, 0, diff);\n      this.vals.copyWithin(0, diff, this.next);\n      const temp = Math.max(diff, this.next - diff);\n      this.vals.fill(undefined as T, temp, this.next);\n      this.next -= diff;\n    }\n\n    // Update capacity\n    this._capacity = capacity;\n  }\n\n  /**\n   * Returns whether the stack is stored sequentially in memory.\n   *\n   * @returns `true` if the stack is sequential in memory, `false` otherwise.\n   */\n  protected isSequential(): boolean {\n    return this.head < this.next || this.next < 1;\n  }\n\n  protected emit(evicted: T[][]): void {\n    const N = evicted.length;\n    for (let i = 0; i < N; ++i) {\n      this.emitter.emit(BoundedEvent.Overflow, evicted[i]);\n    }\n  }\n\n  /**\n   * Removes a given number of elements from the stack.\n   * If elements are removed, the {@link BoundedEvent.Overflow} event\n   * is emitted one or more times.\n   *\n   * @param count - The number of elements to evict\n   */\n  protected evict(count: number): T[][] {\n    if (count <= 0) {\n      return [];\n    }\n\n    const evicted: T[][] = [];\n    const len = this._capacity - this.head;\n    const isNonsequential = !this.isSequential();\n\n    if (isNonsequential && len > count) {\n      evicted.push(this.vals.slice(this.head, this.head + count));\n      this.vals.fill(undefined as T, this.head, this.head + count);\n      this.head += count;\n      this._size -= count;\n      return evicted;\n    }\n\n    if (isNonsequential) {\n      evicted.push(this.vals.slice(this.head, this.head + len));\n      this.vals.length = this.next;\n      this.head = 0;\n      this._size -= len;\n      if (count <= len) {\n        return evicted;\n      }\n      count -= len;\n    }\n\n    if (count >= this._size) {\n      evicted.push(this.vals.slice(this.head, this.head + this._size));\n      this.clear();\n      return evicted;\n    }\n\n    evicted.push(this.vals.slice(this.head, this.head + count));\n    this.vals.fill(undefined as T, this.head, this.head + count);\n    this.head += count;\n    this._size -= count;\n    return evicted;\n  }\n\n  /**\n   * Adjusts the stack to fit within the given capacity.\n   *\n   * Assumes the stack is A) sequential in memory and B) size \\<= capacity.\n   *\n   * @param capacity - the new capacity.\n   *\n   * @returns `true` if the stack was reset, `false` otherwise.\n   */\n  protected sequentialReset(capacity: number): boolean {\n    const tail = this.head + this._size;\n\n    // If stack fits in current location: [    H------T    ]\n    if (tail <= capacity) {\n      this.vals.length = tail;\n      this.next = this.vals.length % capacity;\n\n      // If stack must be fully moved: [H------T    ]\n    } else if (this.head >= capacity) {\n      this.vals.copyWithin(0, this.head, tail);\n      this.vals.length = this._size;\n      this.head = 0;\n      this.next = this._size % capacity;\n\n      // If stack must be partially moved: [--T  H----]\n    } else {\n      this.vals.copyWithin(0, capacity, tail);\n      this.vals.length = capacity;\n      this.next = tail - capacity;\n    }\n\n    this._capacity = capacity;\n    return true;\n  }\n\n  /**\n   * Shrink capacity.\n   * @internal\n   *\n   * @param capacity - the new capacity\n   */\n  protected shrink(capacity: number): T[][] {\n    // Handle overflow\n    const evicted = this.evict(this._size - capacity);\n\n    // Check if stack is sequential: [    H123456T    ]\n    if (this.isSequential()) {\n      this.sequentialReset(capacity);\n      return evicted;\n    }\n\n    // Shift 1st half of stack: [456T....H123] -> [456T..H123]\n    const diff = this._capacity - capacity;\n    this.vals.copyWithin(this.head - diff, this.head, this._capacity);\n    this.vals.length = capacity;\n    this.head -= diff;\n    this._capacity = capacity;\n    return evicted;\n  }\n}\n"],"names":["BoundedEvent","EventEmitter","CircularBase","__publicField","event","listener","ARRAY_MAX_LENGTH","isArrayLength","value","isInfinity","isNull","isNumber","isSafeCount","isUndefined","CircularLinkedDeque","capacity","tail","items","head","node","callbackfn","thisArg","i","elems","N","root","evicted","CircularLinkedQueue","CircularLinkedStack","CircularMap","key","iter","n","entry","CircularQueue","ext","diff","vals","temp","count","len","isNonsequential","CircularSet","out","CircularStack"],"mappings":"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"}