{"version":3,"file":"circle-ds.min.cjs","sources":["../../src/types/boundedEvent.ts","../../node_modules/eventemitter3/index.js","../../src/collections/circularBase.ts","../../src/utils/constants.ts","../../src/utils/is.ts","../../src/utils/math.ts","../../src/utils/iterable.ts","../../src/collections/list/circularArrayList.ts","../../src/collections/deque/circularDeque.ts","../../src/utils/linkedNode.ts","../../src/utils/doublyLinkedNode.ts","../../src/collections/list/circularDoublyLinkedList.ts","../../src/collections/deque/circularLinkedDeque.ts","../../src/collections/list/circularLinkedList.ts","../../src/utils/skipList.ts","../../src/collections/list/circularSkipList.ts","../../src/collections/map/circularMap.ts","../../src/collections/queue/circularLinkedQueue.ts","../../src/collections/queue/circularQueue.ts","../../src/collections/set/circularSet.ts","../../src/collections/stack/circularLinkedStack.ts","../../src/collections/stack/circularStack.ts"],"sourcesContent":["/**\n * An enumeration of event types supported by {@link Bounded} collections.\n *\n * This object defines a set of constants representing event names that can\n * be emitted by instances of collections implementing the {@link Bounded} interface.\n * These events signify specific actions or changes in the state of the collection.\n *\n * Defined events include:\n * - `Overflow`: Indicates that the collection has reached its capacity, and\n *   as a result, one or more elements have been removed to accommodate new elements.\n *   This event is triggered during operations that add elements to the collection when\n *   it exceeds its capacity, or when capacity is updated below the collection's current\n *   size. Listeners attached to this event will receive an array of elements that were\n *   removed due to the overflow. Removed elements may be sent across 1 or more event\n *   instances.\n *\n * This object is marked as `const` to ensure that its properties are read-only,\n * preventing modification of event names which could lead to inconsistencies in\n * event handling across the application.\n */\nexport const BoundedEvent = {\n  Overflow: \"overflow\",\n} as const;\n","'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n","import { EventEmitter } from \"eventemitter3\";\n\nimport { BoundedEvent } from \"../types/boundedEvent\";\nimport { ValueOf } from \"../types/valueOf\";\n\nexport class CircularBase<T> {\n  /**\n   * @internal\n   * The event emitter.\n   *\n   */\n  protected _emitter: EventEmitter;\n\n  constructor(emitter = new EventEmitter()) {\n    this._emitter = emitter;\n  }\n\n  /**\n   * Appends the listener function to the listeners array for the\n   * {@link BoundedEvent.Overflow} event.\n   *\n   * * No checks are made to see if the listener has already been added.\n   * Multiple calls with the same of event + listener combination will\n   * result in the listener being added and called multiple times.\n   *\n   * @param event - The name of the event.\n   * @param listener - The callback function. It will\n   * receive an array of elements that have been removed due to overflow.\n   * This can happen when elements are added while the collection is at\n   * capacity, or when capacity is reduced below the current size.\n   *\n   * @returns the collection.\n   */\n  addListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this;\n  addListener(\n    event: ValueOf<typeof BoundedEvent>,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    listener: (...args: any[]) => void\n  ): this {\n    this._emitter.addListener(event, listener);\n    return this;\n  }\n\n  /**\n   * Appends the listener function to the listeners array for the\n   * {@link BoundedEvent.Overflow} event.\n   *\n   * * No checks are made to see if the listener has already been added.\n   * Multiple calls with the same of event + listener combination will\n   * result in the listener being added and called multiple times.\n   *\n   * @param event - The name of the event.\n   * @param listener - The callback function. It will\n   * receive an array of elements that have been removed due to overflow.\n   * This can happen when elements are added while the collection is at\n   * capacity, or when capacity is reduced below the current size.\n   *\n   * @returns the collection.\n   */\n  on(event: typeof BoundedEvent.Overflow, listener: (elems: T[]) => void): this;\n  on(\n    event: ValueOf<typeof BoundedEvent>,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    listener: (...args: any[]) => void\n  ): this {\n    this._emitter.on(event, listener);\n    return this;\n  }\n\n  /**\n   * Removes the specified listener from the listener array for the event.\n   *\n   * At most once instance of a listener will be removed. If a listener\n   * has been added multiple times for the same event, this method should\n   * be called once per instance.\n   *\n   * @param event - The name of the event.\n   * @param listener - The callback function.\n   *\n   * @returns the collection.\n   */\n  removeListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this;\n  removeListener(\n    event: ValueOf<typeof BoundedEvent>,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    listener: (...args: any[]) => void\n  ): this {\n    this._emitter.removeListener(event, listener);\n    return this;\n  }\n}\n","/**\n * The maximum number of arguments that can be passed to a function.\n *\n * While ECMAScript specifications do not explicitly limit the number of\n * function arguments, practical limits are imposed by JavaScript engine\n * implementations. Different engines can have different maximums, so a\n * conservative value is used to prevent runtime errors.\n *\n * For more details, see the\n * {@link https://262.ecma-international.org/14.0/#sec-list-and-record-specification-type | ECMAScript Specification},\n * section \"6.2.2 The List and Record Specification Types\".\n */\nexport const ARGS_MAX_LENGTH = 16383; // 2**14 - 1\n\n/**\n * The maximum length of an array.\n *\n * According to the ECMAScript specification, the length property of an array\n * is an unsigned 32-bit integer, so its range is 0 to 2**32 - 1, inclusive.\n * Beyond this, operations that modify the array length (e.g., `push`, `pop`,\n * `unshift`, `shift`) may fail or behave unexpectedly.\n *\n * For more details, see the\n * {@link https://262.ecma-international.org/14.0/#sec-arraycreate | ECMAScript Specification},\n * section \"10.4.2.2 ArrayCreate\".\n */\nexport const ARRAY_MAX_LENGTH = 4294967295; // 2**32 - 1\n\n/**\n * The maximum safe length for a linked structure.\n *\n * This constant is defined as the largest integer value that can be safely\n * represented in JavaScript (`Number.MAX_SAFE_INTEGER`), preventing integer\n * precision loss in length-related operations. Operations with values beyond\n * this number may not behave as expected due to limitations in JavaScript's\n * number representation.\n *\n * For more details, see the\n * {@link https://262.ecma-international.org/14.0/#sec-number.max_safe_integer | ECMAScript Specification},\n * section \"21.1.2.6 Number.MAX_SAFE_INTEGER\".\n */\nexport const LINKED_MAX_LENGTH = Number.MAX_SAFE_INTEGER; // 2**53 - 1\n","import { ARRAY_MAX_LENGTH, LINKED_MAX_LENGTH } from \"./constants\";\n\n/**\n * Checks if a given value is an integer within a valid array length range.\n *\n * This function is useful for validating array lengths before attempting operations\n * that could result in a `RangeError` due to invalid array size.\n *\n * @param value - The value to check.\n *\n * @returns `true` if the value is an integer within the `[0, ARRAY_MAX_LENGTH]` range, `false` otherwise.\n */\nexport function isArrayLength(value: unknown): value is number {\n  return (\n    Number.isInteger(value) &&\n    (value as number) >= 0 &&\n    (value as number) <= ARRAY_MAX_LENGTH\n  );\n}\n\n/**\n * Determines whether the provided value is a function.\n *\n * @param value - The value to check.\n *\n * @returns `true` if the value is a function, `false` otherwise.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isFunction(value: unknown): value is Function {\n  return typeof value === \"function\";\n}\n\n/**\n * Checks if a given value is positive infinity.\n *\n * @param value - The value to check.\n *\n * @returns `true` if the value is positive infinity, `false` otherwise.\n */\nexport function isInfinity(value: unknown): boolean {\n  return value === Number.POSITIVE_INFINITY;\n}\n\n/**\n * Determines whether the provided value is iterable.\n *\n * This is useful for determining if a value can be used\n * in a `for...of` loop or with spread syntax.\n *\n * @param value - The value to check.\n *\n * @returns `true` if the value implements the iterable protocol, `false` otherwise.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function isIterable(value: any): value is Iterable<unknown> {\n  return typeof value?.[Symbol.iterator] === \"function\";\n}\n\n/**\n * Checks if a given value is an integer within a valid linked length range.\n *\n * This function is useful for validating linked lengths before attempting operations\n * that could result in a `RangeError` due to invalid linked list size.\n *\n * @param value - The value to check.\n *\n * @returns `true` if the value is an integer within the `[0, LINKED_MAX_LENGTH]` range, `false` otherwise.\n */\nexport function isLinkedLength(value: unknown): value is number {\n  return (\n    Number.isInteger(value) &&\n    (value as number) >= 0 &&\n    (value as number) <= LINKED_MAX_LENGTH\n  );\n}\n\n/**\n * Determines whether the provided value is a number.\n *\n * This includes `NaN` and `Infinity`, so consider additional\n * checks if those values are not desirable.\n *\n * @param value - The value to check.\n *\n * @returns `true` if the value is of type number, `false` otherwise.\n */\nexport function isNumber(value: unknown): value is number {\n  return typeof value === \"number\";\n}\n\n/**\n * Checks if a given value is a safe integer greater than or equal to 0.\n *\n * This is useful for validating counts or sizes that must be within the safe\n * integer range to prevent precision loss.\n *\n * @param value - The value to check.\n *\n * @returns `true` if the value is a safe integer and non-negative, `false` otherwise.\n */\nexport function isSafeCount(value: unknown): value is number {\n  return Number.isSafeInteger(value) && (value as number) >= 0;\n}\n\n/**\n * Determines whether the provided value is a symbol.\n *\n * @param value - The value to check.\n *\n * @returns `true` if the value is a symbol, `false` otherwise.\n */\nexport function isSymbol(value: unknown): value is symbol {\n  return typeof value === \"symbol\";\n}\n","/**\n * Adds a specified addend to a value if the value is below a given target.\n *\n * @param value - The initial number.\n * @param addend - The number added if the value is below the target.\n * @param target - The target number for comparison. If the value is below this\n * number, the addend will be added. Defaults to 0 if not specified.\n */\nexport function addIfBelow(value: number, addend: number, target = 0): number {\n  return value >= target ? value : value + addend;\n}\n\n/**\n * Restricts a given numerical value within a specified range [min, max].\n *\n * If the provided value is less than the minimum, the minimum is returned.\n * If it is greater than the maximum, the maximum is returned. If the value\n * is within the range, the value itself is returned. An error is thrown if\n * the minimum range value is greater than the maximum range value, as this\n * represents an invalid range.\n *\n * @param value - The numerical value to clamp.\n * @param min - The minimum allowable value of the range.\n * @param max - The maximum allowable value of the range.\n *\n * @returns The clamped value within the specified range.\n *\n * @throws `RangeError` If `min` is greater than `max`.\n */\nexport function clamp(value: number, min: number, max: number): number {\n  if (min > max) {\n    throw new RangeError(\"Invalid clamp range; min must be <= max\");\n  }\n  if (value <= min) {\n    return min;\n  }\n  return value <= max ? value : max;\n}\n\n/**\n * Checks if a given numeric value falls within a specified range.\n *\n * @param value - The numeric value to check.\n * @param min - The inclusive lower bound of the range.\n * @param max - The exclusive upper bound of the range.\n *\n * @returns - `true` if `value` is within the range `[min, max)`, `false` otherwise.\n */\nexport function isInRange(value: number, min: number, max: number): boolean {\n  return value >= min && value < max;\n}\n\n/**\n * Calculates the logarithm of a given value with the specified base.\n *\n * This function uses natural logarithms (`Math.log`) for its calculations.\n * If either the value or the base is less than or equal to 0, `NaN` is returned\n * to indicate an invalid operation, as logarithms are not defined for non-positive\n * values and bases.\n *\n * @param value - The numerical value for which to calculate the logarithm. Must be positive.\n * @param base - The base of the logarithm. Must be positive.\n *\n * @returns The calculated logarithm of the value with the given base, or `NaN` for invalid inputs.\n */\nexport function log(value: number, base: number): number {\n  return value >= 0 && base > 0 ? Math.log(value) / Math.log(base) : NaN;\n}\n\n/**\n * Generates a number representing the length of a consecutive run based on a\n * probability threshold.\n *\n * This function iteratively increments a counter as long as the randomly\n * generated numbers from `randomFn` are less than the specified probability\n * threshold, or until the counter reaches the maximum.\n *\n * The function is useful for simulations or models that require a random yet\n * probabilistically constrained sequence length, such as consecutive coin\n * flips.\n *\n * @param probability - The probability threshold.\n * @param max - The maximum value the of the run. Defaults to Infinity.\n * @param randomFn - A function that generates a random number. Defaults to `Math.random`.\n *\n * @returns The length of the run.\n */\nexport function randomRun(\n  probability: number,\n  max = Infinity,\n  randomFn = Math.random\n): number {\n  let count = 0;\n  while (count < max && randomFn() < probability) {\n    ++count;\n  }\n  return count;\n}\n\n/**\n * Attempts to convert a given value to an integer.\n *\n * The function first tries to convert the value to a number. If the result\n * is not valid (i.e. `NaN`), the given `defaultValue` is returned. Otherwise,\n * the function truncates the number to an integer using `Math.trunc`.\n *\n * This is useful for ensuring numerical operations are performed on integers,\n * with a controllable fallback for invalid inputs.\n *\n * @param value - The value to convert to an integer. This can be of any type.\n * @param defaultValue - The fallback value to return if conversion fails. Defaults to 0.\n *\n * @returns The converted integer, or `defaultValue` if conversion is not possible.\n */\nexport function toInteger(value?: unknown, defaultValue = 0): number {\n  value = +value!;\n  return isNaN(value as number) ? defaultValue : Math.trunc(value as number);\n}\n","/**\n * Generates an iterable that yields chunks (arrays) of elements from the input iterable,\n * with each chunk containing up to a specified maximum number of elements. This function\n * is useful for processing or handling large collections of items in smaller, more\n * manageable segments.\n *\n * `chunkSize` is truncated to an integer to ensure expected behavior.\n * If `chunkSize` is less than 1, an empty iterable is generated.\n *\n * Example usage:\n * ```typescript\n * const nums = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n * for (const chunk of chunk(nums, 3)) {\n *   console.log(chunk); // Outputs: [1, 2, 3], [4, 5, 6], [7, 8, 9]\n * }\n * ```\n *\n * @param source - The original iterable to be chunked. Can be any iterable object (e.g., Array, Set, or a custom iterable).\n * @param chunkSize - The maximum size of each chunk. Must be a positive integer; non-integer values are truncated.\n *\n * @returns An iterable iterator that yields each chunk as an array of elements.\n */\nexport function* chunk<T>(\n  source: Iterable<T>,\n  chunkSize: number\n): IterableIterator<T[]> {\n  if (chunkSize < 1) {\n    return;\n  }\n  let chunk: T[] = [];\n  chunkSize = Math.trunc(chunkSize);\n  for (const value of source) {\n    if (chunk.push(value) >= chunkSize) {\n      yield chunk;\n      chunk = [];\n    }\n  }\n  if (chunk.length > 0) {\n    yield chunk;\n  }\n}\n","import { CircularBase } from \"../circularBase\";\nimport { BoundedEvent } from \"../../types/boundedEvent\";\nimport { isArrayLength, isInfinity, isNumber } from \"../../utils/is\";\nimport { Bounded } from \"../../types/bounded\";\nimport { ARGS_MAX_LENGTH, ARRAY_MAX_LENGTH } from \"../../utils/constants\";\nimport { List } from \"../../types/list\";\nimport { addIfBelow, clamp, isInRange, toInteger } from \"../../utils/math\";\nimport { chunk } from \"../../utils/iterable\";\n\nexport class CircularArrayList<T>\n  extends CircularBase<T>\n  implements Bounded<T>, List<T>\n{\n  /**\n   * @internal\n   * The maximum number of elements that can be stored in the collection.\n   */\n  protected _capacity: number;\n\n  /**\n   * @internal\n   * The index representing the first element.\n   */\n  protected _head: number;\n\n  /**\n   * @internal\n   * Whether capacity is finite (true) or infinite (false).\n   */\n  protected _isFinite: boolean;\n\n  /**\n   * @internal\n   * The index one more than the last element.\n   */\n  protected _next: number;\n\n  /**\n   * @internal\n   * The number of elements.\n   */\n  protected _size: number;\n\n  /**\n   * @internal\n   * The stored values.\n   */\n  protected _vals: T[];\n\n  /**\n   * Creates a new list. Default `capacity` is `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new list with the given capacity.\n   *\n   * @param capacity - the list's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new list from the given items. `capacity` will equal the number of items.\n   *\n   * @param items - the initial values in the list.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    super();\n\n    // Initialize class variables\n    this._capacity = ARRAY_MAX_LENGTH;\n    this._head = 0;\n    this._isFinite = false;\n    this._size = 0;\n    this._next = 0;\n    this._vals = [];\n\n    // Case 1: input is null or undefined\n    if (capacity == null) {\n      return;\n    }\n\n    // Case 2: input is capacity\n    if (isNumber(capacity)) {\n      this.capacity = capacity;\n      return;\n    }\n\n    // Case 3: input is an iterable\n    for (const vals of chunk(capacity, ARGS_MAX_LENGTH)) {\n      this._insert(this._size, vals);\n    }\n    this._capacity = this._size;\n    this._isFinite = true;\n  }\n\n  get capacity(): number {\n    return this._isFinite ? this._capacity : Infinity;\n  }\n\n  get size(): number {\n    return this._size;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return CircularArrayList.name;\n  }\n\n  set capacity(capacity: number) {\n    // Convert capacity to a number\n    capacity = +capacity;\n\n    // Check capacity\n    if (isInfinity(capacity)) {\n      // If capacity is Infinity\n      capacity = ARRAY_MAX_LENGTH;\n      this._isFinite = false;\n    } else if (isArrayLength(capacity)) {\n      // If capacity is valid\n      this._isFinite = true;\n    } else {\n      // If capacity is invalid\n      throw new RangeError(\"Invalid capacity\");\n    }\n\n    // Update collection\n    if (this._size <= 0) {\n      // If collection is empty\n      this._capacity = capacity;\n      this.clear();\n    } else if (capacity < this._capacity) {\n      // If capacity is decreasing\n      this._shrink(capacity);\n    } else if (capacity > this._capacity) {\n      // If capacity is increasing\n      this._grow(capacity);\n    }\n  }\n\n  at(index?: number): T | undefined {\n    // Sanitize input\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return undefined;\n    }\n\n    // Return value\n    return this._vals[this._toIndex(index)];\n  }\n\n  clear(): void {\n    this._size = 0;\n    this._head = 0;\n    this._next = 0;\n    this._vals.length = 0;\n  }\n\n  /*\n  copyWithin(target: number, start: number, end?: number): this {\n    const size = this._size;\n\n    // Sanitize inputs\n    target = clamp(addIfBelow(toInteger(target, 0), size), 0, size);\n    start = clamp(addIfBelow(toInteger(start, 0), size), 0, size);\n    const temp = target > start ? target - start : 0;\n    end = clamp(addIfBelow(toInteger(end, size), size), start, size - temp);\n\n    // Copy within\n    this._copyWithin(target, start, end);\n\n    // Return list\n    return this;\n  }\n  */\n\n  /**\n   * @internal\n   */\n  protected _copyWithin(target: number, start: number, end: number): void {\n    // If copying in-place or nothing to copy\n    if (target == start || start >= end) {\n      return;\n    }\n\n    // Get source data segments\n    const capacity = this._capacity - 1;\n    const vals = this._vals;\n    const ranges = this._toRanges(start, end);\n\n    if (target <= start || end <= target) {\n      // Copy from left to right\n      target = this._toIndex(target);\n      for (const [min, max] of ranges) {\n        for (let i = min; i < max; ++i) {\n          vals[target] = vals[i];\n          target = target < capacity ? target + 1 : 0;\n        }\n      }\n    } else {\n      // Copy from right to left\n      target = this._toIndex(target + (end - start));\n      for (const [min, max] of ranges.reverse()) {\n        for (let i = max - 1; i >= min; --i) {\n          target = target > 0 ? target - 1 : capacity;\n          vals[target] = vals[i];\n        }\n      }\n    }\n  }\n\n  delete(index: number): boolean {\n    // Sanitize input\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return false;\n    }\n\n    // Delete value\n    this._delete(index, 1);\n\n    // Return success\n    return true;\n  }\n\n  /**\n   * @internal\n   */\n  protected _delete(index: number, deleteCount: number): void {\n    this._copyWithin(index, index + deleteCount, this._size);\n    this._pop(deleteCount);\n  }\n\n  *entries(): IterableIterator<[number, T]> {\n    for (let ext = 0; ext < this._size; ++ext) {\n      yield [ext, this._vals[this._toIndex(ext)]];\n    }\n  }\n\n  fill(value: T, start?: number, end?: number): this {\n    const size = this._size;\n\n    // Sanitize inputs\n    start = clamp(addIfBelow(toInteger(start, 0), size), 0, size);\n    end = clamp(addIfBelow(toInteger(end, size), size), start, size);\n\n    // Fill values\n    this._fill(value, start, end);\n\n    // Return list\n    return this;\n  }\n\n  /**\n   * @internal\n   */\n  protected _fill(value: T, start: number, end: number): void {\n    for (const [min, max] of this._toRanges(start, end)) {\n      this._vals.fill(value, min, max);\n    }\n  }\n\n  first(): T | undefined {\n    return this._size > 0 ? this._vals[this._head] : undefined;\n  }\n\n  forEach(\n    callbackfn: (value: T, index: number, collection: this) => void,\n    thisArg?: unknown\n  ): void {\n    const N = this._size;\n    for (let ext = 0; ext < N && ext < this._size; ++ext) {\n      const value = this._vals[this._toIndex(ext)];\n      callbackfn.call(thisArg, value, ext, this);\n    }\n  }\n\n  has(value: T): boolean {\n    const vals = this._vals;\n    for (const [min, max] of this._toRanges(0, this._size)) {\n      for (let i = min; i < max; ++i) {\n        if (value === vals[i]) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  *keys(): IterableIterator<number> {\n    for (let ext = 0; ext < this._size; ++ext) {\n      yield ext;\n    }\n  }\n\n  last(): T | undefined {\n    return this._size > 0\n      ? this._vals[this._toIndex(this._size - 1)]\n      : undefined;\n  }\n\n  pop(): T | undefined {\n    // If list is empty\n    if (this._size <= 0) {\n      return undefined;\n    }\n\n    // Get and remove first value\n    const value = this._vals[this._toIndex(this._size - 1)];\n    this._pop(1);\n\n    // Return value\n    return value;\n  }\n\n  /**\n   * @internal\n   */\n  protected _pop(N: number): void {\n    // Remove values\n    const newSize = this._size - N;\n    this._fill(undefined as T, newSize, this._size);\n\n    // Update state\n    this._next = this._toIndex(newSize);\n    this._size = newSize;\n  }\n\n  push(...items: T[]): number {\n    // If no items\n    if (items.length <= 0) {\n      return this._size;\n    }\n\n    // If no capacity\n    if (this._capacity <= 0) {\n      this._overflow(items);\n      return this._size;\n    }\n\n    // Push items\n    this._insert(this._size, items);\n\n    // Return new size\n    return this._size;\n  }\n\n  set(index: number, value: T): T | undefined {\n    // Sanitize input\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return undefined;\n    }\n\n    // Update value\n    index = this._toIndex(index);\n    const prevValue = this._vals[index];\n    this._vals[index] = value;\n\n    // Return previous value\n    return prevValue;\n  }\n\n  shift(): T | undefined {\n    // If list is empty\n    if (this._size <= 0) {\n      return undefined;\n    }\n\n    // Get and remove first value\n    const value = this._vals[this._head];\n    this._shift(1);\n\n    // Return value\n    return value;\n  }\n\n  /**\n   * @internal\n   */\n  protected _shift(N: number): void {\n    // Remove items\n    this._fill(undefined as T, 0, N);\n\n    // Update state\n    this._head = this._toIndex(N);\n    this._size -= N;\n  }\n\n  slice(start?: number, end?: number): CircularArrayList<T> {\n    const size = this._size;\n\n    // Sanitize inputs\n    start = clamp(addIfBelow(toInteger(start, 0), size), 0, size);\n    end = clamp(addIfBelow(toInteger(end, size), size), start, size);\n\n    // Return slice\n    return this._toList(this._slice(start, end));\n  }\n\n  /**\n   * @internal\n   */\n  protected _slice(start: number, end: number): T[] {\n    const from = this._vals;\n    const to = new Array<T>(end - start);\n\n    let j = 0;\n    for ([start, end] of this._toRanges(start, end)) {\n      for (let i = start; i < end; ++i) {\n        to[j++] = from[i];\n      }\n    }\n\n    return to;\n  }\n\n  splice(\n    start: number,\n    deleteCount?: number,\n    ...items: T[]\n  ): CircularArrayList<T> {\n    const size = this._size;\n\n    // Sanitize inputs\n    start = clamp(addIfBelow(toInteger(start, 0), size), 0, size);\n    deleteCount = clamp(toInteger(deleteCount, 0), 0, size - start);\n\n    // Create output\n    const out = this._toList(this._slice(start, start + deleteCount));\n\n    // Update list\n    this._splice(start, deleteCount, items);\n\n    // Return output\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  protected _splice(start: number, deleteCount: number, items: T[] = []): void {\n    const addCount = items.length;\n    const replaceCount = Math.min(deleteCount, addCount);\n    const vals = this._vals;\n\n    // Replace values\n    let j = 0;\n    for (const [a, b] of this._toRanges(start, start + replaceCount)) {\n      for (let i = a; i < b; ++i) {\n        vals[i] = items[j++];\n      }\n    }\n\n    // If done\n    if (deleteCount == addCount) {\n      return;\n    }\n\n    // Insert remaining values or finish deletions\n    start += replaceCount;\n    deleteCount < addCount\n      ? this._insert(start, items, replaceCount)\n      : this._delete(start, deleteCount - addCount);\n  }\n\n  /**\n   * @internal\n   */\n  protected _insert(\n    start: number,\n    items: T[],\n    min = 0,\n    max = items.length\n  ): void {\n    const N = max - min;\n\n    // Check free space\n    let free = this._capacity - this._size;\n    if (free >= N) {\n      this._safeInsert(start, items, min, max);\n      return;\n    }\n\n    // Check if \"infinite\" capacity yet not enough space\n    if (!this._isFinite) {\n      this._safeInsert(start, items, min, min + free);\n      throw new Error(\"Out of memory\");\n    }\n\n    // Remove from head\n    if (start > 0) {\n      const shifted = Math.min(start, N - free);\n      this._overflow(this._slice(0, shifted));\n      this._shift(shifted);\n      start -= shifted;\n      free += shifted;\n    }\n\n    // Check free space\n    if (free >= N) {\n      this._safeInsert(start, items, min, max);\n      return;\n    }\n\n    // Remove from items and insert remaining\n    const mid = max - free;\n    this._overflow(items.slice(min, mid));\n    this._safePresert(0, items, mid, max);\n  }\n\n  /**\n   * @internal\n   */\n  protected _safeInsert(\n    vIndex: number,\n    items: T[],\n    min = 0,\n    max = items.length\n  ): void {\n    const N = max - min;\n    const vals = this._vals;\n\n    // Make space\n    this._copyWithin(vIndex + N, vIndex, this._size);\n\n    // Insert into space\n    for (const [start, end] of this._toRanges(vIndex, vIndex + N)) {\n      for (let i = start; i < end; ++i) {\n        vals[i] = items[min++];\n      }\n    }\n\n    // Update state\n    this._size += N;\n    this._next = this._toIndex(this._size);\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.values();\n  }\n\n  unshift(...items: T[]): number {\n    // If no items\n    if (items.length <= 0) {\n      return this._size;\n    }\n\n    // If no capacity\n    if (this._capacity <= 0) {\n      this._overflow(items);\n      return this._size;\n    }\n\n    // Presert items\n    this._presert(0, items);\n\n    // Return new size\n    return this._size;\n  }\n\n  /**\n   * @internal\n   */\n  protected _presert(\n    end: number,\n    items: T[],\n    min = 0,\n    max = items.length\n  ): void {\n    const N = max - min;\n\n    // Check free space\n    let free = this._capacity - this._size;\n    if (free >= N) {\n      this._safePresert(end, items, min, max);\n      return;\n    }\n\n    // Check if \"infinite\" capacity yet not enough space\n    if (!this._isFinite) {\n      this._safePresert(end, items, max - free, max);\n      throw new Error(\"Out of memory\");\n    }\n\n    // Remove from tail\n    if (end < this._size) {\n      const popped = Math.min(this._size - end, N - free);\n      this._overflow(this._slice(this._size - popped, this._size));\n      this._pop(popped);\n      free += popped;\n    }\n\n    // Check free space\n    if (free >= N) {\n      this._safePresert(end, items, min, max);\n      return;\n    }\n\n    // Remove from items and insert remaining\n    const mid = min + free;\n    this._overflow(items.slice(mid, max));\n    this._safeInsert(this._size, items, min, mid);\n  }\n\n  /**\n   * @internal\n   */\n  protected _safePresert(\n    vIndex: number,\n    items: T[],\n    min = 0,\n    max = items.length\n  ): void {\n    const capacity = this._capacity;\n    const N = max - min;\n    const vals = this._vals;\n\n    // Make space\n    const newHead = capacity - N;\n    this._copyWithin(newHead, 0, vIndex);\n\n    // Insert into space\n    vIndex += newHead;\n    for (const [start, end] of this._toRanges(vIndex, vIndex + N)) {\n      for (let i = start; i < end; ++i) {\n        vals[i] = items[min++];\n      }\n    }\n\n    // Update state\n    this._size += N;\n    this._head = this._toIndex(newHead);\n  }\n\n  *values(): IterableIterator<T> {\n    for (let ext = 0; ext < this._size; ++ext) {\n      yield this._vals[this._toIndex(ext)];\n    }\n  }\n\n  /**\n   * @internal\n   *\n   * Emit an overflow event containing the items evicted from the collection.\n   *\n   * @param evicted - The items evicted from the collection.\n   */\n  protected _overflow(evicted: T[]): void {\n    this._emitter.emit(BoundedEvent.Overflow, evicted);\n  }\n\n  /**\n   * @internal\n   *\n   * Grow capacity.\n   *\n   * @param capacity - the new capacity\n   */\n  protected _grow(capacity: number): void {\n    // Check if list is sequential: [    H123456T    ]\n    if (this._isSequential()) {\n      this._sequentialReset(capacity);\n      return;\n    }\n\n    // Queue is not sequential: [456T    H123]\n    if (this._size <= this._head) {\n      // [H123456T] = A + B = N\n      const temp = this._size - this._next;\n      this._vals.copyWithin(temp, 0, this._next);\n      this._vals.copyWithin(0, this._head, this._head + temp);\n      this._vals.length = this._size;\n      this._head = 0;\n      this._next = this._size;\n    } else if (this._head + this._size <= capacity) {\n      // [        H123456T] = 2B < 2N\n      this._vals.length = this._head + this._size;\n      this._vals.copyWithin(this._capacity, 0, this._next);\n      this._vals.fill(undefined as T, 0, this._next);\n      this._next = (this._head + this._size) % capacity;\n    } /* else if (this.next + this._size <= capacity) {\n      // [    H123456T] = A + 2B = N + B < 2N\n      const temp = this._capacity - this.head;\n      this.vals.length = capacity;\n      this.vals.copyWithin(this.next, this.head, this._capacity);\n      this.vals.copyWithin(this.next + temp, 0, this.next);\n      this.vals.fill(undefined as T, 0, this.next);\n      this.vals.length = this.next + this._size;\n      this.head = this.next;\n      this.next = (this.head + this._size) % capacity;\n    } */ else {\n      // [6T      H12345] = B + D < 2B < 2N\n      const diff = capacity - this._capacity;\n      this._vals.length = capacity;\n      this._vals.copyWithin(this._capacity, 0, diff);\n      this._vals.copyWithin(0, diff, this._next);\n      const temp = Math.max(diff, this._next - diff);\n      this._vals.fill(undefined as T, temp, this._next);\n      this._next -= diff;\n    }\n\n    // Update capacity\n    this._capacity = capacity;\n  }\n\n  /**\n   * @internal\n   *\n   * Returns whether the list is stored sequentially in memory.\n   *\n   * @returns `true` if the list is sequential in memory, `false` otherwise.\n   */\n  protected _isSequential(): boolean {\n    return this._head < this._next || this._next <= 0;\n  }\n\n  /**\n   * @internal\n   *\n   * Adjusts the list to fit within the given capacity.\n   *\n   * Assumes the list:\n   * - is sequential in memory.\n   * - fits in the given capacity (size \\<= capacity).\n   *\n   * @param capacity - The new capacity.\n   *\n   * @returns `true` if the list was reset, `false` otherwise.\n   */\n  protected _sequentialReset(capacity: number): boolean {\n    const tail = this._head + this._size;\n\n    // If list fits in current location: [    H------T    ]\n    if (tail <= capacity) {\n      this._vals.length = tail;\n      this._next = this._vals.length % capacity;\n\n      // If list must be fully moved: [H------T    ]\n    } else if (this._head >= capacity) {\n      this._vals.copyWithin(0, this._head, tail);\n      this._vals.length = this._size;\n      this._head = 0;\n      this._next = this._size % capacity;\n\n      // If list must be partially moved: [--T  H----]\n    } else {\n      this._vals.copyWithin(0, capacity, tail);\n      this._vals.length = capacity;\n      this._next = tail - capacity;\n    }\n\n    this._capacity = capacity;\n    return true;\n  }\n\n  /**\n   * @internal\n   *\n   * Shrink capacity.\n   *\n   * @param capacity - the new capacity\n   */\n  protected _shrink(capacity: number): void {\n    // Handle overflow\n    if (this._size > capacity) {\n      const shifted = this._size - capacity;\n      this._overflow(this._slice(0, shifted));\n      this._shift(shifted);\n    }\n\n    // Check if list is sequential: [    H123456T    ]\n    if (this._isSequential()) {\n      this._sequentialReset(capacity);\n      return;\n    }\n\n    // Shift 1st half of list: [456T....H123] -> [456T..H123]\n    const diff = this._capacity - capacity;\n    this._vals.copyWithin(this._head - diff, this._head, this._capacity);\n    this._vals.length = capacity;\n    this._head -= diff;\n    this._capacity = capacity;\n  }\n\n  /**\n   * @internal\n   */\n  protected _toIndex(externalIndex: number): number {\n    return (this._head + externalIndex) % this._capacity;\n  }\n\n  /**\n   * @internal\n   */\n  protected _toList(items: T[]): CircularArrayList<T> {\n    const out = new CircularArrayList<T>(0);\n    out._vals = items;\n    out._size = items.length;\n    out._capacity = items.length;\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  protected _toRanges(min: number, max: number): [number, number][] {\n    const head = this._head;\n    const mid = this._capacity - head;\n    if (max <= mid) {\n      return [[head + min, head + max]];\n    }\n    if (min >= mid) {\n      return [[min - mid, max - mid]];\n    }\n    return [\n      [head + min, this._capacity],\n      [0, max - mid],\n    ];\n  }\n}\n","import { BoundedEvent } from \"../../types/boundedEvent\";\nimport { Bounded } from \"../../types/bounded\";\nimport { Deque } from \"../..\";\nimport { CircularArrayList } from \"../list/circularArrayList\";\n\n/**\n * A circular deque is similar to a traditional deque, but uses a fixed-size,\n * circular buffer. When the deque reaches its maximum capacity and a new\n * element is added, the oldest is discarded, thus maintaining its size.\n *\n * This structure efficiently utilizes memory for applications where only the\n * most recent additions are of interest and older data can be discarded.\n *\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularDeque<T> implements Bounded<T>, Deque<T> {\n  /**\n   * @internal\n   */\n  protected _list: CircularArrayList<T>;\n\n  /**\n   * Creates a new deque. Default `capacity` is `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new deque with the given capacity.\n   *\n   * @param capacity - the deque's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new deque from the given items. `capacity` will equal the number of items.\n   *\n   * @param items - the initial values in the deque.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    this._list = new CircularArrayList(capacity as number);\n  }\n\n  get capacity(): number {\n    return this._list.capacity;\n  }\n\n  get size(): number {\n    return this._list.size;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return CircularDeque.name;\n  }\n\n  set capacity(capacity: number) {\n    this._list.capacity = capacity;\n  }\n\n  clear(): void {\n    this._list.clear();\n  }\n\n  entries(): IterableIterator<[number, T]> {\n    return this._list.entries();\n  }\n\n  first(): T | undefined {\n    return this._list.first();\n  }\n\n  forEach(\n    callbackfn: (value: T, index: number, collection: this) => void,\n    thisArg?: unknown\n  ): void {\n    return this._list.forEach((v, i) => callbackfn.call(thisArg, v, i, this));\n  }\n\n  front(): T | undefined {\n    return this._list.first();\n  }\n\n  has(value: T): boolean {\n    return this._list.has(value);\n  }\n\n  keys(): IterableIterator<number> {\n    return this._list.keys();\n  }\n\n  last(): T | undefined {\n    return this._list.last();\n  }\n\n  pop(): T | undefined {\n    return this._list.pop();\n  }\n\n  push(...elems: T[]): number {\n    return this._list.push(...elems);\n  }\n\n  shift(): T | undefined {\n    return this._list.shift();\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return this._list.values();\n  }\n\n  top(): T | undefined {\n    return this._list.last();\n  }\n\n  unshift(...elems: T[]): number {\n    return this._list.unshift(...elems);\n  }\n\n  values(): IterableIterator<T> {\n    return this._list.values();\n  }\n\n  addListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.addListener(event, listener);\n    return this;\n  }\n\n  on(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.on(event, listener);\n    return this;\n  }\n\n  removeListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.removeListener(event, listener);\n    return this;\n  }\n}\n","import { LinkedCore, LinkedNode } from \"../types/linkedNode\";\n\n/**\n * Creates a copy of a segment from a linked list.\n *\n * @param node - The first {@link LinkedNode} of the original list from which\n *               the copy operation begins.\n * @param count - The number of nodes to copy. If the count exceeds the number\n *                of nodes available, only the available nodes are copied.\n *\n * @returns A tuple containing:\n *          - The head {@link LinkedNode} of the new list.\n *          - The tail {@link LinkedNode} of the new list.\n *          - An integer representing the total number of nodes copied.\n */\nexport function copy<T>(\n  node: LinkedNode<T> | undefined,\n  distance: number\n): LinkedCore<T> {\n  // Create new root\n  const root: LinkedNode<T> = { value: undefined as T };\n\n  // For each node\n  let size = 0;\n  let tail = root;\n  while (node != null && size < distance) {\n    // Create a duplicate\n    const dupe: LinkedNode<T> = { value: node.value };\n\n    // Attach the duplicate\n    tail.next = dupe;\n    tail = dupe;\n\n    // Update size\n    ++size;\n\n    // Move to the next node\n    node = node.next;\n  }\n\n  // Return copy\n  tail.next = undefined;\n  return { root, size, tail };\n}\n\n/**\n * Removes and returns a segment of a linked list as a new list.\n *\n * This operation modifies the original list by removing the specified\n * range of nodes and returning the new list's head and tail as a tuple.\n * If `count` \\<= zero, the function returns [undefined, undefined].\n * If `count` \\> len(prev), a `TypeError` is thrown.\n *\n * @param prev - The node preceding the start of the section to be cut.\n * @param count - The number of nodes to include in the cut.\n *\n * @returns A tuple containing the head and tail of the removed segment,\n * or [undefined, undefined] if `count` \\<= zero.\n *\n * @throws - {@link TypeError}\n * thrown if `count` \\> `len(prev)`\n */\nexport function cut<T>(\n  prev: LinkedNode<T> | undefined,\n  count: number\n): LinkedCore<T> {\n  // Create new root\n  const root: LinkedNode<T> = { value: undefined as T };\n\n  // Check inputs\n  if (prev == null || count <= 0) {\n    return { root, size: 0, tail: root };\n  }\n\n  // Cut segment\n  const head = prev.next!;\n  const tail = get(head, count - 1)!;\n  prev.next = tail.next;\n  tail.next = undefined;\n\n  // Return cut segment\n  root.next = head;\n  return { root, size: count, tail };\n}\n\n/**\n * Iterates through a linked list, yielding each node's index\n * (position in the list) and value as a tuple.\n *\n * Iteration starts from the `node` node and continues until either the end\n * of the list, or the `end` node if provided.\n *\n * This generator function provides a convenient way to enumerate all nodes in\n * a linked list, similar to how `Array.prototype.entries()` works for arrays.\n *\n * @param node - The node at which to start iterating.\n * @param end - An optional node at which to end (exclusive).\n * If not provided, iteration continues until the end of the list.\n *\n * @throws - {@link TypeError}\n * thrown if an `end` node is provided but not encountered before the end of the list.\n */\nexport function* entries<T>(node?: LinkedNode<T>): Generator<[number, T]> {\n  for (let i = 0; node != null; ++i) {\n    yield [i, node!.value];\n    node = node!.next;\n  }\n}\n\n/**\n * Retrieves the node at the specified distance from the given node.\n *\n * This function iterates through the linked list starting from the `node`\n * node, moving `index` nodes away in the list.\n *\n * @param node - The node from which to start.\n * @param index - The forward distance of the node to retrieve.\n *\n * @returns The node at the specified index,\n * or `undefined` if `index` does not exist.\n */\nexport function get<N extends LinkedNode<unknown>>(\n  node: N | undefined,\n  index: number\n): N | undefined {\n  if (index < 0) {\n    return undefined;\n  }\n  for (let i = 0; node != null && i < index; ++i) {\n    node = node.next;\n  }\n  return node;\n}\n\n/**\n * Determines whether a linked list contains a node with a specified value.\n *\n * Iteration starts from the `node` node and continues until either the end\n * of the list, or the `end` node if provided.\n *\n * @param node - The node from which to start searching.\n * @param value - The value to search for.\n * @param end - An optional node at which to end the search (exclusive).\n * If not provided, the search continues until the end of the list.\n *\n * @returns `true` if the specified value is found, `false` otherwise.\n *\n * @throws - {@link TypeError}\n * thrown if an `end` node is provided but not encountered before the end of the list.\n *\n */\nexport function has<T>(node: LinkedNode<T> | undefined, value: T): boolean {\n  while (node != null) {\n    if (node!.value === value) {\n      return true;\n    }\n    node = node!.next;\n  }\n  return false;\n}\n\n/**\n * Inserts a new sequence of values into a linked list right after a specified node.\n *\n * @param prev - The node in the linked list after which the new values will be inserted.\n * @param values - An iterable of values to be inserted.\n * @returns The last node that was inserted into the list, or `prev` if no values were inserted.\n */\nexport function insert<T>(\n  prev: LinkedNode<T>,\n  values: Iterable<T>\n): LinkedNode<T> {\n  // Convert values to list\n  const { root, size, tail } = toList(values);\n\n  // If no values\n  if (size <= 0) {\n    return prev;\n  }\n\n  // Add values\n  tail!.next = prev.next;\n  prev.next = root.next;\n\n  return tail!;\n}\n\n/**\n * Iterates through a linked list, yielding each node's index\n * (position in the list).\n *\n * Iteration starts from the `node` node and continues until either the end\n * of the list, or the `end` node if provided.\n *\n * This generator function provides a convenient way to enumerate all nodes in\n * a linked list, similar to how `Array.prototype.entries()` works for arrays.\n *\n * @param node - The node at which to start iterating.\n * @param end - An optional node at which to end (exclusive).\n * If not provided, iteration continues until the end of the list.\n *\n * @throws - {@link TypeError}\n * thrown if an `end` node is provided but not encountered before the end of the list.\n */\nexport function* keys<T>(node?: LinkedNode<T>): Generator<number> {\n  for (let i = 0; node != null; ++i) {\n    yield i;\n    node = node!.next;\n  }\n}\n\n/**\n * Converts an iterable collection of values into a linked list and returns\n * the head, tail and size of the list.\n *\n * If the iterable is empty, the function returns a triple containing\n * `[undefined, undefined, 0]` to indicate that no list was created.\n *\n * @param values - The iterable collection of elements.\n *\n * @returns A triple containing the head, tail and size of the list.\n * Returns `[undefined, undefined, 0]` if the iterable is empty.\n */\nexport function toList<T>(values: Iterable<T>): LinkedCore<T> {\n  const root: LinkedNode<T> = { value: undefined as T };\n\n  let size = 0;\n  let tail = root;\n  for (const value of values) {\n    tail.next = { value };\n    tail = tail.next;\n    ++size;\n  }\n  tail.next = undefined;\n\n  return { root, size, tail };\n}\n\n/**\n * Iterates through a linked list, yielding each node's value.\n *\n * Iteration starts from the `node` node and continues until either the end\n * of the list, or the `end` node if provided.\n *\n * This generator function provides a convenient way to enumerate all nodes in\n * a linked list, similar to how `Array.prototype.entries()` works for arrays.\n *\n * @param node - The node at which to start iterating.\n * @param end - An optional node at which to end (exclusive).\n * If not provided, iteration continues until the end of the list.\n *\n * @throws - {@link TypeError}\n * thrown if an `end` node is provided but not encountered before the end of the list.\n */\nexport function* values<T>(node?: LinkedNode<T>): Generator<T> {\n  while (node != null) {\n    yield node!.value;\n    node = node!.next;\n  }\n}\n","import { DoublyLinkedCore, DoublyLinkedNode } from \"../types/doublyLinkedNode\";\n\nimport { get as singlyGet, cut as singlyCut } from \"./linkedNode\";\n\n/**\n * Creates a copy of a segment from a doubly linked list.\n *\n * @param node - The first {@link DoublyLinkedNode} of the original list from\n *               which the copy operation begins.\n * @param count - The number of nodes to copy. If the count exceeds the number\n *                of nodes available, only the available nodes are copied.\n *\n * @returns A tuple containing:\n *          - The head {@link DoublyLinkedNode} of the new list.\n *          - The tail {@link DoublyLinkedNode} of the new list.\n *          - An integer representing the total number of nodes copied.\n */\nexport function copy<T>(\n  node: DoublyLinkedNode<T> | undefined,\n  distance: number\n): DoublyLinkedCore<T> {\n  // Create new root\n  const root: DoublyLinkedNode<T> = { value: undefined as T };\n\n  // Check distance\n  if (node == null || distance <= 0) {\n    return { root, size: 0, tail: root };\n  }\n\n  // For each node\n  let size = 0;\n  let tail = root;\n  while (node != null && size < distance) {\n    // Create a duplicate\n    const dupe: DoublyLinkedNode<T> = { value: node.value };\n\n    // Attach the duplicate\n    tail.next = dupe;\n    dupe.prev = tail;\n    tail = dupe;\n\n    // Update size\n    ++size;\n\n    // Move to the next node\n    node = node.next;\n  }\n\n  // Return copy\n  root.prev = undefined;\n  tail.next = undefined;\n  return { root, size, tail };\n}\n\n/**\n * Removes and returns a segment of a linked list as a new list.\n *\n * This operation modifies the original list by removing the specified\n * range of nodes and returning the new list's head and tail as a tuple.\n * If `count` \\<= zero, the function returns [undefined, undefined].\n * If `count` \\> len(prev), a `TypeError` is thrown.\n *\n * @param prev - The node preceding the start of the section to be cut.\n * @param count - The number of nodes to include in the cut.\n *\n * @returns A tuple containing the head and tail of the removed segment,\n * or [undefined, undefined] if `count` \\<= zero.\n *\n * @throws - {@link TypeError}\n * thrown if `count` \\> `len(prev)`\n */\nexport function cut<T>(\n  node: DoublyLinkedNode<T>,\n  count: number\n): DoublyLinkedCore<T> {\n  const seg = singlyCut(node, count) as DoublyLinkedCore<T>;\n  if (seg.size <= 0) {\n    return seg;\n  }\n  seg.root.next!.prev = seg.root;\n  const next = node.next;\n  if (next != null) {\n    next.prev = node;\n  }\n  return seg;\n}\n\n/**\n * Retrieves the node at the specified distance from the given node.\n *\n * This function iterates through the linked list starting from the `node`\n * node, moving `index` nodes away in the list.\n *\n * @param node - The node from which to start.\n * @param index - The forward distance of the node to retrieve.\n *\n * @returns The node at the specified index,\n * or `undefined` if `index` does not exist.\n */\nexport function get<N extends DoublyLinkedNode<unknown>>(\n  node: N | undefined,\n  index: number\n): N | undefined {\n  if (index >= 0) {\n    return singlyGet(node, index);\n  }\n  for (let i = 0; node != null && i > index; --i) {\n    node = node.prev;\n  }\n  return node;\n}\n\n/**\n * Inserts a new sequence of values into a linked list right after a specified node.\n *\n * @param prev - The node in the linked list after which the new values will be inserted.\n * @param values - An iterable of values to be inserted.\n *\n * @returns The last node that was inserted into the list, or `prev` if no values were inserted.\n */\nexport function insert<T>(\n  prev: DoublyLinkedNode<T>,\n  values: T[]\n): DoublyLinkedNode<T> {\n  // Convert values to list\n  const list = toList(values);\n\n  // If no values\n  if (list.size <= 0) {\n    return prev;\n  }\n\n  // Add values\n  const head = list.root.next!;\n  const tail = list.tail;\n  const next = prev.next;\n  head.prev = prev;\n  tail.next = next;\n  prev.next = head;\n  if (next != null) {\n    next.prev = tail;\n  }\n\n  return tail!;\n}\n\n/**\n * Converts an iterable collection of values into a linked list and returns\n * the head, tail and size of the list.\n *\n * If the iterable is empty, the function returns a triple containing\n * `[undefined, undefined, 0]` to indicate that no list was created.\n *\n * @param values - The iterable collection of elements.\n *\n * @returns A {@link DoublyLinkedCore}.\n */\nexport function toList<T>(values: Iterable<T>): DoublyLinkedCore<T> {\n  const root: DoublyLinkedNode<T> = { value: undefined as T };\n\n  let size = 0;\n  let tail = root;\n  for (const value of values) {\n    tail.next = { prev: tail, value } as DoublyLinkedNode<T>;\n    tail = tail.next;\n    ++size;\n  }\n\n  root.prev = undefined;\n  tail.next = undefined;\n  return { root, size, tail };\n}\n","import { Bounded } from \"../../types/bounded\";\nimport { BoundedEvent } from \"../../types/boundedEvent\";\nimport {\n  DoublyLinkedCore,\n  DoublyLinkedNode,\n  DoublyLinkedNode as Node,\n} from \"../../types/doublyLinkedNode\";\nimport { List } from \"../../types/list\";\n\nimport { ARGS_MAX_LENGTH, LINKED_MAX_LENGTH } from \"../../utils/constants\";\nimport { copy, cut, get, toList } from \"../../utils/doublyLinkedNode\";\nimport { isInfinity, isLinkedLength, isNumber } from \"../../utils/is\";\nimport { chunk } from \"../../utils/iterable\";\nimport {\n  entries,\n  has,\n  keys,\n  values as getValues,\n} from \"../../utils/linkedNode\";\nimport { addIfBelow, clamp, isInRange, toInteger } from \"../../utils/math\";\n\nimport { CircularBase } from \"../circularBase\";\n\nexport class CircularDoublyLinkedList<T>\n  extends CircularBase<T>\n  implements Bounded<T>, List<T>\n{\n  /**\n   * @internal\n   * The maximum number of elements that can be stored in the collection.\n   */\n  protected _capacity: number;\n\n  /**\n   * @internal\n   * Whether capacity is finite (true) or infinite (false).\n   */\n  protected _isFinite: boolean;\n\n  /**\n   * @internal\n   * The root of the linked list\n   */\n  protected _root: Node<T>;\n\n  /**\n   * @internal\n   * The current size of the list (0 \\<= size \\<= capacity)\n   */\n  protected _size: number;\n\n  /**\n   * @internal\n   * The last node in the linked list.\n   */\n  protected _tail: DoublyLinkedNode<T>;\n\n  /**\n   * Creates a standard linked list (no capacity restriction).\n   */\n  constructor();\n  /**\n   * Creates a linked list with the given capacity.\n   *\n   * @param capacity - the list's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a linked list with the given items. Capacity is set to the number of items.\n   *\n   * @param items - the values to store in the list.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    super();\n\n    // Initialize class variables\n    this._capacity = LINKED_MAX_LENGTH;\n    this._isFinite = false;\n    this._root = { value: undefined } as Node<T>;\n    this._size = 0;\n    this._tail = this._root;\n\n    // Case 1: input is null or undefined\n    if (capacity == null) {\n      return;\n    }\n\n    // Case 2: input is capacity\n    if (isNumber(capacity)) {\n      this.capacity = capacity;\n      return;\n    }\n\n    // Case 3: capacity is iterable\n    for (const vals of chunk(capacity, ARGS_MAX_LENGTH)) {\n      this._insert(this._size, vals);\n    }\n    this._capacity = this._size;\n    this._isFinite = true;\n  }\n\n  get capacity(): number {\n    return this._isFinite ? this._capacity : Infinity;\n  }\n\n  get size(): number {\n    return this._size;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return CircularDoublyLinkedList.name;\n  }\n\n  set capacity(capacity: number) {\n    // Convert input to a number\n    capacity = +capacity;\n\n    // Convert input to a number\n    capacity = +capacity;\n\n    // Check capacity\n    if (isInfinity(capacity)) {\n      // If capacity is Infinity\n      capacity = LINKED_MAX_LENGTH;\n      this._isFinite = false;\n    } else if (isLinkedLength(capacity)) {\n      // If capacity is valid\n      this._isFinite = true;\n    } else {\n      // If capacity is invalid\n      throw new RangeError(\"Invalid capacity\");\n    }\n\n    // Update capacity\n    this._capacity = capacity;\n\n    // If current size fits within new capacity\n    if (this._size <= capacity) {\n      return;\n    }\n\n    // Shrink\n    const diff = this._size - capacity;\n    const { root } = cut(this._root, diff);\n    this._size -= diff;\n\n    // Update tail, if needed\n    if (this._size <= 0) {\n      this._tail = this._root;\n    }\n\n    // Emit discarded items\n    for (const array of chunk(getValues(root.next), ARGS_MAX_LENGTH)) {\n      this._overflow(array);\n    }\n  }\n\n  at(index: number): T | undefined {\n    // Check index\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return undefined;\n    }\n\n    // Return value\n    return this._get(index).value;\n  }\n\n  clear(): void {\n    this._size = 0;\n    this._tail = this._root;\n    this._root.next = undefined;\n  }\n\n  delete(index: number): boolean {\n    // Check index\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return false;\n    }\n\n    // Delete value\n    const node = this._get(index);\n    node.prev!.next = node.next;\n    if (node.next != null) {\n      node.next.prev = node.prev;\n    }\n    --this._size;\n\n    return true;\n  }\n\n  entries(): IterableIterator<[number, T]> {\n    return entries(this._root.next);\n  }\n\n  fill(value: T, start?: number, end?: number): this {\n    // Sanitize start\n    start = toInteger(start, 0);\n    start = clamp(addIfBelow(start, this._size), 0, this._size);\n\n    // Sanitize end\n    end = toInteger(end, this._size);\n    end = clamp(addIfBelow(end, this._size), 0, this._size);\n\n    // Update values\n    let node = this._get(start);\n    while (start < end) {\n      node.value = value;\n      node = node.next!;\n      ++start;\n    }\n\n    return this;\n  }\n\n  forEach(\n    callbackfn: (value: T, index: number, list: this) => void,\n    thisArg?: unknown\n  ): void {\n    let node = this._root;\n    for (let i = 0; i < this._size; ++i) {\n      node = node.next!;\n      callbackfn.call(thisArg, node.value, i, this);\n    }\n  }\n\n  has(value: T): boolean {\n    return has(this._root.next, value);\n  }\n\n  keys(): IterableIterator<number> {\n    return keys(this._root.next);\n  }\n\n  pop(): T | undefined {\n    // If list is empty\n    if (this._size <= 0) {\n      return undefined;\n    }\n\n    // Remove last value\n    const { root } = this._cut(this._size - 1, 1);\n\n    // Return value\n    return root.next!.value;\n  }\n\n  push(...values: T[]): number {\n    // Add values\n    this._insert(this._size, values);\n\n    // Return size\n    return this._size;\n  }\n\n  set(index: number, value: T): T | undefined {\n    // Check index\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return undefined;\n    }\n\n    // Update node\n    const node = this._get(index);\n    const prevValue = node.value;\n    node.value = value;\n\n    // Return previous value\n    return prevValue;\n  }\n\n  shift(): T | undefined {\n    // If list is empty\n    if (this._size <= 0) {\n      return undefined;\n    }\n\n    // Remove first value\n    const { root } = this._cut(0, 1);\n\n    // Return value\n    return root.next!.value;\n  }\n\n  slice(start?: number, end?: number): CircularDoublyLinkedList<T> {\n    const size = this._size;\n\n    // Sanitize inputs\n    start = clamp(addIfBelow(toInteger(start, 0), size), 0, size);\n    end = clamp(addIfBelow(toInteger(end, size), size), start, size);\n\n    // Check if empty\n    if (start >= end) {\n      return new CircularDoublyLinkedList<T>(0);\n    }\n\n    // Create segment copy\n    const node = this._get(start);\n    const core = copy(node, end - start);\n\n    // Return copied segment as a list\n    const list = new CircularDoublyLinkedList<T>(core.size);\n    list._root = core.root;\n    list._size = core.size;\n    list._tail = core.tail;\n\n    // Return new list\n    return list;\n  }\n\n  splice(\n    start: number,\n    deleteCount?: number,\n    ...items: T[]\n  ): CircularDoublyLinkedList<T> {\n    const size = this._size;\n\n    // Sanitize inputs\n    start = clamp(addIfBelow(toInteger(start, 0), size), 0, size);\n    deleteCount = clamp(toInteger(deleteCount, 0), 0, size - start);\n\n    // Remove deleted items, if any\n    let list: CircularDoublyLinkedList<T>;\n    if (deleteCount <= 0) {\n      list = new CircularDoublyLinkedList<T>(0);\n    } else {\n      const { root, size, tail } = this._cut(start, deleteCount);\n      list = new CircularDoublyLinkedList<T>(size);\n      list._root = root;\n      list._size = size;\n      list._tail = tail;\n    }\n\n    // Add new items\n    this._insert(start, items);\n\n    // Return deleted items as a list\n    return list;\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return getValues(this._root.next);\n  }\n\n  unshift(...values: T[]): number {\n    // Add values\n    this._presert(0, values);\n\n    // Return new size\n    return this._size;\n  }\n\n  values(): IterableIterator<T> {\n    return getValues(this._root.next);\n  }\n\n  /**\n   * @internal\n   */\n  protected _cut(start: number, count: number): DoublyLinkedCore<T> {\n    // Get previous\n    const prev = this._get(start - 1)!;\n\n    // Cut and get removed segment\n    const seg = cut(prev, count);\n\n    // Update size\n    this._size -= count;\n\n    // Update tail\n    if (start >= this._size) {\n      this._tail = prev;\n    }\n\n    // Return cut segment\n    return seg;\n  }\n\n  /**\n   * @internal\n   */\n  protected _get(index: number): Node<T> {\n    const mid = this._size / 2;\n    return ++index <= mid\n      ? get(this._root, index)!\n      : get(this._tail, index - this._size)!;\n  }\n\n  /**\n   * @internal\n   */\n  protected _insert(index: number, values: T[]): void {\n    // If no values\n    const N = values.length;\n    if (N <= 0) {\n      return;\n    }\n\n    // If no capacity\n    if (this._capacity <= 0) {\n      this._overflow(values);\n      return;\n    }\n\n    // Check free space\n    let free = this._capacity - this._size;\n    if (free >= N) {\n      this._safeInsert(index, values);\n      return;\n    }\n\n    // Check if \"infinite\" capacity yet not enough space\n    if (!this._isFinite) {\n      this._safeInsert(index, values.slice(0, free));\n      throw new Error(\"Out of memory\");\n    }\n\n    // Remove from head\n    if (index > 0) {\n      const shifted = Math.min(index, N - free);\n      const { root } = this._cut(0, shifted);\n      this._overflow(getValues(root.next));\n      index -= shifted;\n      free += shifted;\n    }\n\n    // Check free space\n    if (free >= N) {\n      this._safeInsert(index, values);\n      return;\n    }\n\n    // Remove from items and insert remaining\n    const mid = values.length - free;\n    this._overflow(values.slice(0, mid));\n    this._safeInsert(0, values.slice(mid));\n  }\n\n  /**\n   * @internal\n   *\n   * Emit an overflow event containing the items evicted from the collection.\n   *\n   * @param evicted - The items evicted from the collection.\n   */\n  protected _overflow(evicted: Iterable<T>): void {\n    if (!Array.isArray(evicted)) {\n      evicted = Array.from(evicted);\n    }\n    this._emitter.emit(BoundedEvent.Overflow, evicted);\n  }\n\n  /**\n   * @internal\n   */\n  protected _presert(index: number, values: T[]): void {\n    // If no values\n    const N = values.length;\n    if (N <= 0) {\n      return;\n    }\n\n    // If no capacity\n    if (this._capacity <= 0) {\n      this._overflow(values);\n      return;\n    }\n\n    // Check free space\n    let free = this._capacity - this._size;\n    if (free >= N) {\n      this._safeInsert(index, values);\n      return;\n    }\n\n    // Check if \"infinite\" capacity yet not enough space\n    if (!this._isFinite) {\n      this._safeInsert(0, values.slice(values.length - free));\n      throw new Error(\"Out of memory\");\n    }\n\n    // Remove from tail\n    if (index < this._size) {\n      const popped = Math.min(this._size - index, N - free);\n      const { root } = this._cut(this._size - popped, popped);\n      this._overflow(getValues(root.next));\n      free += popped;\n    }\n\n    // Check free space\n    if (free >= N) {\n      this._safeInsert(index, values);\n      return;\n    }\n\n    // Remove from items and insert remaining\n    this._overflow(values.slice(free));\n    this._safeInsert(this._size, values.slice(0, free));\n  }\n\n  /**\n   * @internal\n   */\n  protected _safeInsert(index: number, values: T[]): void {\n    // Sanitize input\n    if (values.length <= 0) {\n      return;\n    }\n\n    // Create segment\n    const { root, size, tail } = toList(values);\n    const head = root.next!;\n\n    // Insert segment\n    const prev = this._get(index - 1);\n    const next = prev.next;\n    head.prev = prev;\n    tail.next = next;\n    prev.next = head;\n    if (next != null) {\n      next.prev = tail;\n    }\n\n    // Update list state\n    this._tail = index < this._size ? this._tail : tail!;\n    this._size += size;\n  }\n}\n","import { BoundedEvent } from \"../../types/boundedEvent\";\nimport { Bounded } from \"../../types/bounded\";\nimport { Deque } from \"../../types/deque\";\n\nimport { CircularDoublyLinkedList } from \"../list/circularDoublyLinkedList\";\n\n/**\n * A circular deque is similar to a traditional deque, but uses a fixed-size,\n * circular buffer. When the deque reaches its maximum capacity and a new\n * element is added, the oldest is discarded, thus maintaining its size.\n *\n * This structure efficiently utilizes memory for applications where only the\n * most recent additions are of interest and older data can be discarded.\n *\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularLinkedDeque<T> implements Bounded<T>, Deque<T> {\n  /**\n   * @internal\n   */\n  protected _list: CircularDoublyLinkedList<T>;\n\n  /**\n   * Creates a new stack with `capacity` defaulted to `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new stack with the given capacity.\n   *\n   * @param capacity - the stack's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new stack. Initial capacity is the number of items given.\n   *\n   * @param items - the values to store in the stack.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    this._list = new CircularDoublyLinkedList(capacity as number);\n  }\n\n  get capacity(): number {\n    return this._list.capacity;\n  }\n\n  get size(): number {\n    return this._list.size;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return CircularLinkedDeque.name;\n  }\n\n  set capacity(capacity: number) {\n    this._list.capacity = capacity;\n  }\n\n  first(): T | undefined {\n    return this._list.at(0);\n  }\n\n  front(): T | undefined {\n    return this._list.at(0);\n  }\n\n  clear(): void {\n    this._list.clear();\n  }\n\n  entries(): IterableIterator<[number, T]> {\n    return this._list.entries();\n  }\n\n  forEach(\n    callbackfn: (value: T, index: number, collection: this) => void,\n    thisArg?: unknown\n  ): void {\n    this._list.forEach((v, i) => callbackfn.call(thisArg, v, i, this), thisArg);\n  }\n\n  has(value: T): boolean {\n    return this._list.has(value);\n  }\n\n  keys(): IterableIterator<number> {\n    return this._list.keys();\n  }\n\n  last(): T | undefined {\n    return this._list.at(-1);\n  }\n\n  pop(): T | undefined {\n    return this._list.pop();\n  }\n\n  push(...elems: T[]): number {\n    return this._list.push(...elems);\n  }\n\n  shift(): T | undefined {\n    return this._list.shift();\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.values();\n  }\n\n  top(): T | undefined {\n    return this._list.at(-1);\n  }\n\n  unshift(...elems: T[]): number {\n    return this._list.unshift(...elems);\n  }\n\n  values(): IterableIterator<T> {\n    return this._list.values();\n  }\n\n  addListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.addListener(event, listener);\n    return this;\n  }\n\n  on(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.on(event, listener);\n    return this;\n  }\n\n  removeListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.removeListener(event, listener);\n    return this;\n  }\n}\n","import { Bounded, BoundedEvent } from \"../..\";\nimport { LinkedCore, LinkedNode as Node } from \"../../types/linkedNode\";\nimport { List } from \"../../types/list\";\nimport { ARGS_MAX_LENGTH, LINKED_MAX_LENGTH } from \"../../utils/constants\";\nimport { isInfinity, isLinkedLength, isNumber } from \"../../utils/is\";\nimport { chunk } from \"../../utils/iterable\";\nimport {\n  copy,\n  cut,\n  entries,\n  get,\n  has,\n  keys,\n  toList,\n  values,\n} from \"../../utils/linkedNode\";\nimport { addIfBelow, clamp, isInRange, toInteger } from \"../../utils/math\";\nimport { CircularBase } from \"../circularBase\";\n\nexport class CircularLinkedList<T>\n  extends CircularBase<T>\n  implements Bounded<T>, List<T>\n{\n  /**\n   * @internal\n   * The maximum number of elements that can be stored in the collection.\n   */\n  protected _capacity: number;\n\n  /**\n   * @internal\n   * Whether capacity is finite (true) or infinite (false).\n   */\n  protected _isFinite: boolean;\n\n  /**\n   * @internal\n   * The root of the linked list\n   */\n  protected _root: Node<T>;\n\n  /**\n   * @internal\n   * The current size of the list (0 \\<= size \\<= capacity)\n   */\n  protected _size: number;\n\n  /**\n   * @internal\n   * The last node in the linked list.\n   */\n  protected _tail: Node<T>;\n\n  /**\n   * Creates a standard linked list (no capacity restriction).\n   */\n  constructor();\n  /**\n   * Creates a linked list with the given capacity.\n   *\n   * @param capacity - the list's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a linked list with the given items. Capacity is set to the number of items.\n   *\n   * @param items - the values to store in the list.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    super();\n\n    // Initialize class variables\n    this._capacity = LINKED_MAX_LENGTH;\n    this._isFinite = false;\n    this._root = { value: undefined } as Node<T>;\n    this._size = 0;\n    this._tail = this._root;\n\n    // Case 1: input is null or undefined\n    if (capacity == null) {\n      return;\n    }\n\n    // Case 2: input is capacity\n    if (isNumber(capacity)) {\n      this.capacity = capacity;\n      return;\n    }\n\n    // Case 3: capacity is iterable\n    for (const vals of chunk(capacity, ARGS_MAX_LENGTH)) {\n      this._insert(this._size, vals);\n    }\n    this._capacity = this._size;\n    this._isFinite = true;\n  }\n\n  get capacity(): number {\n    return this._isFinite ? this._capacity : Infinity;\n  }\n\n  get size(): number {\n    return this._size;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return CircularLinkedList.name;\n  }\n\n  set capacity(capacity: number) {\n    // Convert input to a number\n    capacity = +capacity;\n\n    // Check capacity\n    if (isInfinity(capacity)) {\n      // If capacity is Infinity\n      capacity = LINKED_MAX_LENGTH;\n      this._isFinite = false;\n    } else if (isLinkedLength(capacity)) {\n      // If capacity is valid\n      this._isFinite = true;\n    } else {\n      // If capacity is invalid\n      throw new RangeError(\"Invalid capacity\");\n    }\n\n    // Update capacity\n    this._capacity = capacity;\n\n    // If current size fits within new capacity\n    if (this._size <= capacity) {\n      return;\n    }\n\n    // Shrink\n    const diff = this._size - capacity;\n    const { root } = cut(this._root, diff);\n    this._size -= diff;\n\n    // Update tail, if needed\n    if (this._size <= 0) {\n      this._tail = this._root;\n    }\n\n    // Emit discarded items\n    this._overflow(root.next);\n  }\n\n  at(index?: number): T | undefined {\n    // Sanitize input\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return undefined;\n    }\n\n    // Return value\n    return this._get(index)!.value;\n  }\n\n  clear(): void {\n    this._size = 0;\n    this._tail = this._root;\n    this._root.next = undefined;\n  }\n\n  delete(index: number): boolean {\n    // Sanitize input\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return false;\n    }\n\n    // Delete value\n    this._cut(index, 1);\n\n    return true;\n  }\n\n  entries(): IterableIterator<[number, T]> {\n    return entries(this._root.next);\n  }\n\n  fill(value: T, start?: number, end?: number): this {\n    const size = this._size;\n\n    // Sanitize inputs\n    start = clamp(addIfBelow(toInteger(start, 0), size), 0, size);\n    end = clamp(addIfBelow(toInteger(end, size), size), start, size);\n    if (start >= end) {\n      return this;\n    }\n\n    // Fill values\n    let node = this._get(start)!;\n    for (let i = start; i < end; ++i) {\n      node.value = value;\n      node = node.next!;\n    }\n\n    // Return list\n    return this;\n  }\n\n  forEach(\n    callbackfn: (value: T, index: number, list: this) => void,\n    thisArg?: unknown\n  ): void {\n    let node = this._root;\n    for (let i = 0; i < this._size; ++i) {\n      node = node.next!;\n      callbackfn.call(thisArg, node.value, i, this);\n    }\n  }\n\n  has(value: T): boolean {\n    return has(this._root.next, value);\n  }\n\n  keys(): IterableIterator<number> {\n    return keys(this._root.next);\n  }\n\n  pop(): T | undefined {\n    // If list is empty\n    if (this._size <= 0) {\n      return undefined;\n    }\n\n    // Remove last value\n    const { root } = this._cut(this._size - 1, 1);\n\n    // Return value\n    return root.next!.value;\n  }\n\n  push(...values: T[]): number {\n    // Add values\n    this._insert(this._size, values);\n\n    // Return size\n    return this._size;\n  }\n\n  set(index: number, value: T): T | undefined {\n    // Sanitize input\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return undefined;\n    }\n\n    // Set value\n    const node = this._get(index);\n    const prevValue = node.value;\n    node.value = value;\n\n    // Return previous value\n    return prevValue;\n  }\n\n  shift(): T | undefined {\n    // If list is empty\n    if (this._size <= 0) {\n      return undefined;\n    }\n\n    // Remove first value\n    const { root } = this._cut(0, 1);\n\n    // Return value\n    return root.next!.value;\n  }\n\n  slice(start?: number, end?: number): CircularLinkedList<T> {\n    const size = this._size;\n\n    // Sanitize inputs\n    start = clamp(addIfBelow(toInteger(start, 0), size), 0, size);\n    end = clamp(addIfBelow(toInteger(end, size), size), start, size);\n\n    // Check if empty\n    if (start >= end) {\n      return new CircularLinkedList<T>(0);\n    }\n\n    // Create segment copy\n    const node = this._get(start);\n    const core = copy(node, end - start);\n\n    // Return copied segment as a list\n    const list = new CircularLinkedList<T>(core.size);\n    list._root = core.root;\n    list._size = core.size;\n    list._tail = core.tail;\n\n    // Return new list\n    return list;\n  }\n\n  splice(\n    start: number,\n    deleteCount?: number,\n    ...items: T[]\n  ): CircularLinkedList<T> {\n    const size = this._size;\n\n    // Sanitize inputs\n    start = clamp(addIfBelow(toInteger(start, 0), size), 0, size);\n    deleteCount = clamp(toInteger(deleteCount, 0), 0, size - start);\n\n    // Remove deleted items, if any\n    let list: CircularLinkedList<T>;\n    if (deleteCount <= 0) {\n      list = new CircularLinkedList<T>(0);\n    } else {\n      const { root, size, tail } = this._cut(start, deleteCount);\n      list = new CircularLinkedList<T>(deleteCount);\n      list._root = root;\n      list._size = size;\n      list._tail = tail;\n    }\n\n    // Add new items\n    this._insert(start, items);\n\n    // Return deleted items as a list\n    return list;\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return values(this._root.next);\n  }\n\n  unshift(...values: T[]): number {\n    // Add values\n    this._presert(0, values);\n\n    // Return new size\n    return this._size;\n  }\n\n  values(): IterableIterator<T> {\n    return values(this._root.next);\n  }\n\n  /**\n   * @internal\n   */\n  protected _cut(start: number, count: number): LinkedCore<T> {\n    // Get previous\n    const prev = this._get(start - 1)!;\n\n    // Cut and get removed segment\n    const core = cut(prev, count);\n\n    // Update size\n    this._size -= count;\n\n    // Update tail\n    if (start >= this._size) {\n      this._tail = prev;\n    }\n\n    // Return cut segment\n    return core;\n  }\n\n  /**\n   * @internal\n   */\n  protected _get(index: number): Node<T> {\n    return ++index == this._size ? this._tail : get(this._root, index)!;\n  }\n\n  /**\n   * @internal\n   */\n  protected _insert(index: number, values: T[]): void {\n    // If no values\n    const N = values.length;\n    if (N <= 0) {\n      return;\n    }\n\n    // If no capacity\n    if (this._capacity <= 0) {\n      this._overflow(values);\n      return;\n    }\n\n    // Check free space\n    let free = this._capacity - this._size;\n    if (free >= N) {\n      this._safeInsert(index, values);\n      return;\n    }\n\n    // Check if \"infinite\" capacity yet not enough space\n    if (!this._isFinite) {\n      this._safeInsert(index, values.slice(0, free));\n      throw new Error(\"Out of memory\");\n    }\n\n    // Remove from head\n    if (index > 0) {\n      const shifted = Math.min(index, N - free);\n      const { root } = this._cut(0, shifted);\n      this._overflow(root.next);\n      index -= shifted;\n      free += shifted;\n    }\n\n    // Check free space\n    if (free >= N) {\n      this._safeInsert(index, values);\n      return;\n    }\n\n    // Remove from items and insert remaining\n    const mid = values.length - free;\n    this._overflow(values.slice(0, mid));\n    this._safeInsert(0, values.slice(mid));\n  }\n\n  /**\n   * @internal\n   *\n   * Emit an overflow event containing the items evicted from the collection.\n   *\n   * @param evicted - The items evicted from the collection.\n   */\n  protected _overflow(evicted?: T[] | Node<T>): void {\n    if (evicted == null) {\n      return;\n    }\n    if (Array.isArray(evicted)) {\n      this._emitter.emit(BoundedEvent.Overflow, evicted);\n      return;\n    }\n    for (const array of chunk(values(evicted), ARGS_MAX_LENGTH)) {\n      this._emitter.emit(BoundedEvent.Overflow, array);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  protected _presert(index: number, values: T[]): void {\n    // If no values\n    const N = values.length;\n    if (N <= 0) {\n      return;\n    }\n\n    // If no capacity\n    if (this._capacity <= 0) {\n      this._overflow(values);\n      return;\n    }\n\n    // Check free space\n    let free = this._capacity - this._size;\n    if (free >= N) {\n      this._safeInsert(index, values);\n      return;\n    }\n\n    // Check if \"infinite\" capacity yet not enough space\n    if (!this._isFinite) {\n      this._safeInsert(0, values.slice(values.length - free));\n      throw new Error(\"Out of memory\");\n    }\n\n    // Remove from tail\n    if (index < this._size) {\n      const popped = Math.min(this._size - index, N - free);\n      const { root } = this._cut(this._size - popped, popped);\n      this._overflow(root.next);\n      free += popped;\n    }\n\n    // Check free space\n    if (free >= N) {\n      this._safeInsert(index, values);\n      return;\n    }\n\n    // Remove from items and insert remaining\n    this._overflow(values.slice(free));\n    this._safeInsert(this._size, values.slice(0, free));\n  }\n\n  /**\n   * @internal\n   */\n  protected _safeInsert(index: number, values: T[]): void {\n    // Sanitize input\n    if (values.length <= 0) {\n      return;\n    }\n\n    // Create segment\n    const { root, size, tail } = toList(values);\n\n    // Insert segment\n    const prev = this._get(index - 1);\n    tail!.next = prev.next;\n    prev.next = root.next;\n\n    // Update list state\n    this._tail = index < this._size ? this._tail : tail!;\n    this._size += size;\n  }\n}\n","import {\n  SkipCore,\n  SkipEntry,\n  SkipLink,\n  SkipNode,\n  SkipStack,\n} from \"../types/skipList\";\nimport { log } from \"./math\";\n\n/**\n * Calculates the maximum level for a skip list based on the given probability\n * factor and expected size.\n *\n * The maximum level determines how many forward pointers each element in the\n * skip list can have, which impacts the overall speed of search, insertion,\n * and deletion operations within the list.\n *\n * @param p - The probability factor used for determining the level. It should\n *          be a number between 0 and 1 (exclusive). The probability factor\n *          affects the sparsity of the skip list; a lower value results in a\n *          shorter, less dense list, while a higher value results in a\n *          taller, denser list.\n * @param expectedSize - The expected number of elements in the skip list. It\n *                     should be a positive integer. The expected size\n *                     influences the optimal maximum level for the list.\n *\n * @returns The calculated optimal maximum level for the skip list. Returns 1\n *          if the probability factor is less than or equal to 0 or the\n *          expected size is less than or equal to 1. Returns Infinity if the\n *          probability factor is 1 or more, indicating an unbounded number of\n *          levels, and likely an error in inputs.\n */\nexport function calcMaxLevel(p: number, expectedSize: number): number {\n  if (p <= 0 || expectedSize <= 1) {\n    return 1;\n  }\n  if (p >= 1) {\n    return Infinity;\n  }\n  return Math.ceil(log(expectedSize, 1 / p));\n}\n\n/**\n * Creates a copy of a segment from a skip list, starting at a specified\n * position and including a specified number of nodes.\n *\n * The copied segment is initialized with its own root node and returns\n * the new list's root, tail nodes at each level, and the total number\n * of nodes copied.\n *\n * @param root - The root {@link SkipNode} of the original skip list from\n *               which the copy operation begins.\n * @param start - The zero-based position in the original list from which to\n *                start copying nodes.\n * @param count - The number of nodes to copy from the start position. If the\n *                count exceeds the number of nodes available, only the\n *                available nodes are copied.\n * @returns A tuple containing:\n *          - The root {@link SkipNode} of the newly created skip list.\n *          - An array of {@link SkipNode}s representing the tail nodes at\n *            each level of the new skip list.\n *          - An integer representing the total number of nodes copied.\n */\nexport function copy<T>(\n  core: SkipCore<T>,\n  start: number,\n  distance: number\n): SkipCore<T> {\n  // Create new list\n  let size = 0;\n  const root = toNode(undefined as T);\n  const tails: SkipNode<T>[] = [root];\n  const sizes: number[] = [-1];\n\n  // Check distance\n  if (distance <= 0) {\n    return { root, size, tails };\n  }\n\n  // Get initial node\n  let node: SkipNode<T> | undefined = getEntry(core, start - 1).node;\n  node = node.levels[0].next;\n\n  // For each node\n  let maxY = 1;\n  while (node != null && size < distance) {\n    // Update maximum level\n    const Y = node.levels.length;\n    while (maxY < Y) {\n      tails[maxY] = root;\n      sizes[maxY] = -1;\n      ++maxY;\n    }\n\n    // Create the duplicate node\n    const dupe = toNode(node.value, Y);\n\n    // Attach the duplicate\n    for (let y = 0; y < Y; ++y) {\n      tails[y].levels[y] = { next: dupe, span: size - sizes[y] };\n      tails[y] = dupe;\n      sizes[y] = size;\n    }\n\n    // Move to the next node\n    const { next, span } = node.levels[0];\n    size += span;\n    node = next;\n  }\n\n  // Update the tail pointers\n  size = sizes[0] + 1;\n  for (let y = 0; y < maxY; ++y) {\n    tails[y].levels[y] = { next: undefined, span: size - sizes[y] };\n  }\n\n  // Return the copy\n  return { root, size, tails };\n}\n\n/**\n * Cuts a segment from a given skip list.\n *\n * The cut starts at the specified position and spans the given distance. The\n * cut segment is returned as a new skip list.\n *\n * @param core - The {@link SkipCore} representing the skip list from which to cut the segment.\n *               This skip list will be modified to reflect the removal.\n * @param start - The zero-based index indicating the start position of the cut, inclusive.\n * @param distance - The number of elements to be included in the cut segment.\n *\n * @returns A new {@link SkipCore} representing the skip list segment that has been cut.\n *\n * @remarks\n * - The height (levels) of the original list may be reduced if segment removal results in empty levels.\n * - The cut segment's height (levels) may be less than the original list. It will only contain\n *   levels that include nodes within the segment.\n */\nexport function cut<T>(\n  core: SkipCore<T>,\n  start: number,\n  distance: number\n): SkipCore<T> {\n  // Initialize output list\n  const segRoot = toNode(undefined as T);\n  const seg: SkipCore<T> = { root: segRoot, size: 0, tails: [segRoot] };\n\n  // Check inputs\n  if (distance <= 0) {\n    return seg;\n  }\n\n  // Initialize constants\n  const prevStack = getStack(core, start - 1);\n  const tailStack = nextStack(Array.from(prevStack), distance);\n  const end = tailStack[0].index + tailStack[0].node.levels[0].span;\n\n  // Update inputs\n  let levels = core.root.levels.length;\n  start = prevStack[0].index + prevStack[0].node.levels[0].span;\n  distance = end - start;\n\n  // Detach segment from participating levels\n  let lvl: number;\n  for (lvl = 0; lvl < levels; ++lvl) {\n    const prev = prevStack[lvl];\n    const tail = tailStack[lvl];\n\n    // Check if segment exists at this level\n    if (prev.index >= tail.index) {\n      break;\n    }\n\n    // Connect segment start to new root\n    let edge = prev.node.levels[lvl];\n    let span = prev.index + edge.span - start;\n    segRoot.levels[lvl] = { next: edge.next, span };\n\n    // Remove segment from list\n    edge = tail.node.levels[lvl];\n    span = tail.index - prev.index + (edge.span - distance);\n    prev.node.levels[lvl] = { next: edge.next, span };\n\n    // Detach segment end\n    tail.node.levels[lvl] = { next: undefined, span: end - tail.index };\n    seg.tails[lvl] = tail.node;\n  }\n\n  if (lvl < levels) {\n    // Remove segment from higher levels\n    while (lvl < levels) {\n      const prev = prevStack[lvl];\n      const { next, span } = prev.node.levels[lvl];\n      prev.node.levels[lvl] = { next: next, span: span - distance };\n      ++lvl;\n    }\n  } else {\n    // Remove empty levels from the source list\n    const links = core.root.levels;\n    while (lvl > 1 && links[lvl - 1].next == null) {\n      --lvl;\n    }\n    levels = lvl;\n    links.length = levels;\n    core.tails.length = levels;\n  }\n\n  // Update tails from source list\n  if (end >= core.size) {\n    for (lvl = 0; lvl < levels; ++lvl) {\n      core.tails[lvl] = prevStack[lvl].node;\n    }\n  }\n\n  // Update source list's size\n  core.size -= distance;\n\n  // Return removed segment\n  seg.size = distance;\n  return seg;\n}\n\n/**\n * Iterates through a skip list, yielding each node's index\n * (position in the list) and value as a tuple.\n *\n * Iteration starts from the given node and continues the end of the list.\n * This generator function provides a convenient way to enumerate all nodes in\n * a skip list, similar to how `Array.prototype.entries()` works for arrays.\n *\n * @param node - The node at which to start iterating.\n */\nexport function* entries<T>(node?: SkipNode<T>): Generator<[number, T]> {\n  let i = 0;\n  while (node != null) {\n    yield [i, node.value];\n    const { next, span } = node.levels[0];\n    node = next;\n    i += span;\n  }\n}\n\nexport function getEntry<T>(core: SkipCore<T>, target: number): SkipEntry<T> {\n  // Check target minimum\n  if (target < 0) {\n    return { index: -1, node: core.root };\n  }\n\n  // Check target maximum\n  const tails = core.tails;\n  if (target >= core.size - tails[0].levels[0].span) {\n    return { index: core.size - tails[0].levels[0].span, node: tails[0] };\n  }\n\n  // Use tails as shortcuts\n  let y: number;\n  let index = -1;\n  let node = core.root;\n  for (y = node.levels.length - 1; y >= 0 && index < target; --y) {\n    const i = core.size - tails[y].levels[y].span;\n    if (i > target) {\n      break;\n    }\n    index = i;\n    node = tails[y];\n  }\n\n  // Find node\n  while (y >= 0 && index < target) {\n    const { next, span } = node.levels[y];\n    if (index + span > target || next == null) {\n      --y;\n    } else {\n      index += span;\n      node = next;\n    }\n  }\n\n  // Return index and distance\n  return { index, node };\n}\n\nexport function getStack<T>(core: SkipCore<T>, target: number): SkipStack<T> {\n  const stack = toStack(core.root, -1);\n\n  // Check target minimum\n  if (target < 0) {\n    return stack;\n  }\n\n  // Check target maximum\n  const Y = stack.length;\n  const tails = core.tails;\n  if (target >= core.size - tails[0].levels[0].span) {\n    for (let y = 0; y < Y; ++y) {\n      const index = core.size - tails[y].levels[y].span;\n      stack[y] = { index, node: tails[y] };\n    }\n    return stack;\n  }\n\n  // Use tails as shortcuts\n  let y: number;\n  for (y = Y - 1; y >= 0 && stack[y].index < target; --y) {\n    const i = core.size - tails[y].levels[y].span;\n    if (i > target) {\n      break;\n    }\n    stack[y] = { index: i, node: tails[y] };\n  }\n\n  // Find node\n  while (y >= 0 && stack[y].index < target) {\n    const { index, node } = stack[y];\n    const { next, span } = node.levels[y];\n    if (index + span > target || next == null) {\n      --y;\n    } else {\n      stack[y] = { index: index + span, node: next };\n    }\n  }\n\n  // Finish stack update\n  if (y > 0) {\n    const { index, node } = stack[y];\n    for (let i = 0; i < y; ++i) {\n      stack[i] = { index, node };\n    }\n  }\n\n  return stack;\n}\n\n/**\n * Determines whether a skip list contains a node with a specified value.\n *\n * @param node - The node from which to start searching.\n * @param value - The value to search for.\n *\n * @returns `true` if the specified value is found, `false` otherwise.\n */\nexport function has<T>(node: SkipNode<T> | undefined, value: T): boolean {\n  while (node != null) {\n    if (node.value === value) {\n      return true;\n    }\n    node = node.levels[0].next;\n  }\n  return false;\n}\n\n/**\n * Inserts a skip list segment (`src`) into another skip list (`dest`) at a specified index.\n *\n * @param dest - The {@link SkipCore} representing the destination skip list into which the segment is to be\n *               inserted. This skip list will be modified to include the nodes from the source segment.\n * @param index - The zero-based position within the destination list at which the source segment is to be inserted.\n * @param src - The {@link SkipCore} representing the source skip list segment to be inserted into the destination\n *              list. This skip list's tail nodes will be modified to contain links within the destination list.\n *\n * @remarks\n * - The function may increase the height (number of levels) of the destination list if the source segment has\n *   more levels than the destination. This ensures that the merged list can accommodate the full structure of\n *   the segment being inserted.\n */\nexport function insert<T>(\n  dest: SkipCore<T>,\n  index: number,\n  src: SkipCore<T>\n): void {\n  // Check source values\n  if (src.size <= 0) {\n    return;\n  }\n\n  // Increase destination's height if necessary\n  const minY = src.tails.length;\n  for (let y = dest.tails.length; y < minY; ++y) {\n    dest.root.levels[y] = { next: undefined, span: dest.size + 1 };\n    dest.tails[y] = dest.root;\n  }\n\n  // Attach segment\n  const prevs = getStack(dest, index - 1);\n  for (let y = 0; y < minY; ++y) {\n    const prev = prevs[y].node;\n    const tail = src.tails[y];\n\n    // Attach segment tail\n    const prevEdge = prev.levels[y];\n    const tailEdge = tail.levels[y];\n    let span = prevs[y].index - index + prevEdge.span + tailEdge.span;\n    tail.levels[y] = { next: prevEdge.next, span };\n\n    // Attach segment head\n    const rootEdge = src.root.levels[y];\n    span = index - prevs[y].index + (rootEdge.span - 1);\n    prev.levels[y] = { next: rootEdge.next, span };\n  }\n\n  // Update higher levels\n  const maxY = dest.tails.length;\n  for (let y = minY; y < maxY; ++y) {\n    const levels = prevs[y].node.levels;\n    const { next, span } = levels[y];\n    levels[y] = { next, span: span + src.size };\n  }\n\n  // Update tails\n  if (index === dest.size) {\n    for (let y = 0; y < minY; ++y) {\n      dest.tails[y] = src.tails[y];\n    }\n  }\n\n  // Update size\n  dest.size += src.size;\n}\n\n/**\n * Iterates through a skip list, yielding each node's index\n * (position in the list).\n *\n * This generator function provides a convenient way to enumerate all nodes in\n * a skip list, similar to how `Array.prototype.entries()` works for arrays.\n *\n * @param node - The node at which to start iterating.\n */\nexport function* keys<T>(node?: SkipNode<T>): Generator<number> {\n  let i = 0;\n  while (node != null) {\n    yield i;\n    const { next, span } = node.levels[0];\n    node = next;\n    i += span;\n  }\n}\n\n/**\n * Iterates through a skip list, yielding each node's height.\n *\n * Iteration starts from the `node` node and continues until\n * the end of the list.\n *\n * @param node - The node at which to start iterating.\n */\nexport function* levels<T>(node?: SkipNode<T>): Generator<number> {\n  while (node != null) {\n    yield node.levels.length;\n    node = node.levels[0].next;\n  }\n}\n\n/**\n * Moves the input stack to point to the nodes closest to a specified distance.\n *\n * @param stack - The {@link SkipStack} representing the current pointers at various levels of the skip list.\n * @param distance - The forward distance to travel. The starting point is based on `stack`'s lowest level.\n *\n * @returns A {@link SkipStack} with pointers to the nodes closest to the specified distance, based\n *          on the initial positions indicated by the input stack.\n *\n * @remarks\n * - If the specified distance is 0 or negative, the stack is not modified, as no traversal is needed.\n * - If the target distance exceeds the bounds of the skip list, the result will point to the furthest possible\n *   nodes within the list.\n */\nexport function nextStack<T>(\n  stack: SkipStack<T>,\n  distance: number\n): SkipStack<T> {\n  // Check inputs\n  if (distance <= 0 || stack.length <= 0) {\n    return stack;\n  }\n\n  // Find node\n  let y = stack.length - 1;\n  const target = stack[0].index + distance;\n  while (y >= 0 && stack[y].index < target) {\n    const { index, node } = stack[y];\n    const { next, span } = node.levels[y];\n    if (index + span > target || next == null) {\n      --y;\n    } else {\n      stack[y] = { index: index + span, node: next };\n    }\n  }\n\n  // Finish stack update\n  if (y > 0) {\n    const { index, node } = stack[y];\n    for (let i = 0; i < y; ++i) {\n      stack[i] = { index, node };\n    }\n  }\n\n  return stack;\n}\n\n/**\n * Creates a generator that yields each node in a skip list at a specified level.\n *\n * Iteration begins from a given node up to, but not including, an optional end node. Defaults to level `0`.\n *\n * @param node - The starting {@link SkipNode} from which the iteration begins. If not defined, no nodes are yielded.\n * @param end - An optional {@link SkipNode} at which to end the iteration, exclusive. If provided, the iteration\n *              will halt before yielding this node. If `end` is `undefined`, the iteration will continue until\n *              the end of the list.\n * @param level - The level at which to traverse the skip list, starting from 0 for the base level. Defaults to `0`\n *                if not specified. If a negative value is given, or if the start `node` does not reach this level,\n *                no nodes are yielded.\n */\nexport function* nodes<T>(node?: SkipNode<T>): Generator<SkipNode<T>> {\n  while (node != null) {\n    yield node;\n    node = node.levels[0].next;\n  }\n}\n\n/**\n * Constructs a skip list from an array of levels and an array of values.\n *\n * @param levels - An array of integers that determines the number of\n *                 levels of the corresponding value in the `values` array.\n * @param values - An array of values to be stored in the skip list. Each\n *                 value is assigned to a new node in the list.\n *\n * @returns A tuple containing three elements:\n *          - The first element is the root {@link SkipNode} of the skip list. This is a dummy node immediately\n *            prior to the first value.\n *          - The second element is an array of {@link SkipNode}s representing the tail nodes at each level.\n *          - The third element is an integer `X` representing the number of nodes successfully added to the list,\n *            not including the root node.\n *\n * @remarks\n * - If the lengths of the input arrays do not match, the function operates on the smallest length.\n * - A dummy root node is created and updated to have up to the maximum level in the `levels` array.\n */\nexport function toList<T>(levels: number[], values: T[]): SkipCore<T> {\n  // Get # of values (X) and max level (Y)\n  let Y = -Infinity;\n  const size = Math.min(levels.length, values.length);\n  for (let i = 0; i < size; ++i) {\n    if (Y < levels[i]) {\n      Y = levels[i];\n    }\n  }\n\n  // Check inputs\n  if (Y <= 0 || size <= 0) {\n    const root = toNode(undefined as T);\n    return { root, size: 0, tails: [root] };\n  }\n\n  // Create root node and tails array\n  const root = toNode(undefined as T, Y, size + 1);\n  const tails = new Array(Y).fill(root);\n\n  // For each value\n  for (let i = 0; i < size; ++i) {\n    // Create node\n    Y = levels[i];\n    const span = size - i;\n    const next = toNode(values[i], Y, span);\n\n    // Append node\n    for (let y = 0; y < Y; ++y) {\n      const levels = tails[y].levels;\n      levels[y] = { next, span: levels[y].span - span };\n      tails[y] = next;\n    }\n  }\n\n  // Return root, tails and list length\n  return { root, size, tails };\n}\n\n/**\n * Generates a new skip list node.\n *\n * @param value - The value to be stored in the new skip list node.\n * @param levels - The number of levels the node participates in within the skip list. Defaults to `1`.\n * @param span - The uniform distance to the next node at each level. Defaults to `1`.\n * @param next - The uniform next node at each level. Defaults to `undefined`.\n *\n * @returns A {@link SkipNode} object populated with the specified value and levels array. Each\n *          level in the array is initialized with a `next` pointer and `span` distance set to\n *          the specified values.\n */\nexport function toNode<T>(\n  value: T,\n  levels = 1,\n  span = 1,\n  next?: SkipNode<T>\n): SkipNode<T> {\n  const array = new Array<SkipLink<T>>(levels);\n  for (let i = 0; i < levels; ++i) {\n    array[i] = { next, span };\n  }\n  return { value, levels: array };\n}\n\n/**\n * Generates a skip stack filled with pointers to the given node and index.\n *\n * @param node - The {@link SkipNode} to which all pointers in the generated stack will point.\n * @param index - The index in the skip list at which the node is located. Defaults to `0`.\n *\n * @returns A {@link SkipStack} array, where each level points to `node` with index `index`.\n *          The length of this array is equal to the number of levels in the input node.\n */\nexport function toStack<T>(node: SkipNode<T>, index = 0): SkipStack<T> {\n  const N = node.levels.length;\n  const stack: SkipStack<T> = new Array(N);\n  for (let i = 0; i < N; ++i) {\n    stack[i] = { index, node };\n  }\n  return stack;\n}\n\n/**\n * Reduces the height of the skip list to the specified level.\n *\n * @param node - The skip node.\n * @param level - The target level.\n */\nexport function truncateLevels<T>(\n  node: SkipNode<T> | undefined,\n  level: number\n): void {\n  // Check inputs\n  if (node == null || node.levels.length <= level) {\n    return;\n  }\n\n  // Truncate nodes\n  while (node != null) {\n    const next = node.levels[level].next as SkipNode<T>;\n    node.levels.length = level;\n    node = next!;\n  }\n}\n\n/**\n * Iterates through a skip list, yielding each node's value.\n *\n * This generator function provides a convenient way to enumerate all nodes in\n * a skip list, similar to how `Array.prototype.entries()` works for arrays.\n *\n * @param node - The node at which to start iterating.\n */\nexport function* values<T>(node?: SkipNode<T>): Generator<T> {\n  while (node != null) {\n    yield node.value;\n    node = node.levels[0].next;\n  }\n}\n","import { BoundedEvent } from \"../../types/boundedEvent\";\nimport { Bounded, BoundedConfig } from \"../../types/bounded\";\nimport {\n  SkipList,\n  SkipListConfig,\n  SkipCore,\n  SkipNode,\n} from \"../../types/skipList\";\n\nimport { ARGS_MAX_LENGTH, LINKED_MAX_LENGTH } from \"../../utils/constants\";\nimport {\n  isArrayLength,\n  isInfinity,\n  isIterable,\n  isLinkedLength,\n  isNumber,\n} from \"../../utils/is\";\nimport { chunk } from \"../../utils/iterable\";\nimport {\n  addIfBelow,\n  clamp,\n  isInRange,\n  randomRun,\n  toInteger,\n} from \"../../utils/math\";\nimport {\n  calcMaxLevel,\n  copy,\n  cut,\n  entries,\n  getEntry,\n  has,\n  insert,\n  keys,\n  toList,\n  toNode,\n  truncateLevels,\n  values,\n} from \"../../utils/skipList\";\n\nimport { CircularBase } from \"../circularBase\";\n\nexport interface CircularSkipListConfig extends BoundedConfig, SkipListConfig {}\n\nexport class CircularSkipList<T>\n  extends CircularBase<T>\n  implements Bounded<T>, SkipList<T>\n{\n  /**\n   * @internal\n   * The maximum number of elements that can be stored in the collection.\n   */\n  protected _capacity: number;\n\n  /**\n   * @internal\n   * Whether capacity is finite (true) or infinite (false).\n   */\n  protected _isFinite: boolean;\n\n  /**\n   * @internal\n   * The maximum number of levels in the skip list.\n   */\n  protected _maxLevel: number;\n\n  /**\n   * @internal\n   * The probability factor used to randomly determine the levels\n   * of new nodes. Should be a value between 0 and 1, where a lower\n   * value results in fewer levels on average.\n   */\n  protected _p: number;\n\n  /**\n   * @internal\n   * The root of the skip list\n   */\n  protected _root: SkipNode<T>;\n\n  /**\n   * @internal\n   * The current size of the list (0 \\<= size \\<= capacity)\n   */\n  protected _size: number;\n\n  /**\n   * @internal\n   * The last nodes in the skip list at each level.\n   */\n  protected _tails: SkipNode<T>[];\n\n  constructor();\n  constructor(capacity?: number | null);\n  constructor(config: CircularSkipListConfig);\n  constructor(items: Iterable<T>);\n  constructor(config?: CircularSkipListConfig | Iterable<T> | null | number) {\n    super();\n\n    // Initialize class variables\n    this._capacity = LINKED_MAX_LENGTH;\n    this._isFinite = false;\n    this._p = 0.5;\n    this._maxLevel = calcMaxLevel(this._p, LINKED_MAX_LENGTH);\n    this._root = toNode(undefined as T);\n    this._size = 0;\n    this._tails = [this._root];\n\n    // Case 1: input is null or undefined\n    if (config == null) {\n      return;\n    }\n\n    // Case 2: input is capacity\n    if (isNumber(config)) {\n      this.capacity = config;\n      return;\n    }\n\n    // Case 3: input is config\n    if (!isIterable(config)) {\n      this.capacity = config.capacity ?? this._capacity;\n      this.p = config.p ?? this._p;\n      const size = config.expectedSize ?? this._capacity;\n      this.maxLevel = config.maxLevel ?? calcMaxLevel(this._p, size);\n      return;\n    }\n\n    // Case 4: input is an iterable\n    for (const vals of chunk(config, ARGS_MAX_LENGTH)) {\n      this._insert(this._size, vals);\n    }\n    this._capacity = this._size;\n    this._isFinite = true;\n  }\n\n  get capacity(): number {\n    return this._isFinite ? this._capacity : Infinity;\n  }\n\n  get levels(): number {\n    return this._root.levels.length;\n  }\n\n  get maxLevel(): number {\n    return this._maxLevel;\n  }\n\n  get p(): number {\n    return this._p;\n  }\n\n  get size(): number {\n    return this._size;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return CircularSkipList.name;\n  }\n\n  set capacity(capacity: number) {\n    // Convert input to a number\n    capacity = +capacity;\n\n    // Check capacity\n    if (isInfinity(capacity)) {\n      // If capacity is Infinity\n      capacity = LINKED_MAX_LENGTH;\n      this._isFinite = false;\n    } else if (isLinkedLength(capacity)) {\n      // If capacity is valid\n      this._isFinite = true;\n    } else {\n      // If capacity is invalid\n      throw new RangeError(\"Invalid capacity\");\n    }\n\n    // Update capacity\n    this._capacity = capacity;\n\n    // If current size fits within new capacity\n    if (this._size <= capacity) {\n      return;\n    }\n\n    // Shrink list and emit discarded items\n    const { root } = this._cut(0, this._size - capacity);\n    this._overflow(root.levels[0].next);\n  }\n\n  set maxLevel(maxLevel: number) {\n    // Convert input to number\n    maxLevel = +maxLevel;\n\n    // If input is invalid\n    if (!isArrayLength(maxLevel) || maxLevel <= 0) {\n      throw new RangeError(\"Invalid maxLevel\");\n    }\n\n    // Update\n    this._maxLevel = maxLevel;\n\n    // Remove excess levels\n    if (maxLevel < this.levels) {\n      truncateLevels(this._root, maxLevel);\n    }\n  }\n\n  set p(p: number) {\n    // Convert input to number\n    p = +p;\n\n    // If input is invalid\n    if (isNaN(p) || p < 0 || p > 1) {\n      throw new RangeError(\"Invalid p\");\n    }\n\n    // Update\n    this._p = p;\n  }\n\n  at(index: number): T | undefined {\n    // Sanitize input\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return undefined;\n    }\n\n    // Return value\n    const core = { root: this._root, size: this._size, tails: this._tails };\n    return getEntry(core, index).node.value;\n  }\n\n  clear(): void {\n    this._size = 0;\n    this._tails = [this._root];\n    this._root.levels.length = 1;\n    this._root.levels[0] = { next: undefined, span: 1 };\n  }\n\n  delete(index: number): boolean {\n    // Sanitize input\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return false;\n    }\n\n    // Delete value\n    this._cut(index, 1);\n\n    // Return success\n    return true;\n  }\n\n  entries(): IterableIterator<[number, T]> {\n    return entries(this._root.levels[0].next);\n  }\n\n  fill(value: T, start?: number, end?: number): this {\n    const size = this._size;\n\n    // Sanitize inputs\n    start = clamp(addIfBelow(toInteger(start, 0), size), 0, size);\n    end = clamp(addIfBelow(toInteger(end, size), size), start, size);\n    if (start >= end) {\n      return this;\n    }\n\n    // Fill values\n    const core = { root: this._root, size: this._size, tails: this._tails };\n    let { node } = getEntry(core, start);\n    for (let i = start; i < end; ++i) {\n      node.value = value;\n      node = node.levels[0].next!;\n    }\n\n    // Return list\n    return this;\n  }\n\n  forEach(\n    callbackfn: (value: T, index: number, list: this) => void,\n    thisArg?: unknown\n  ): void {\n    let node = this._root;\n    for (let i = 0; i < this._size; ++i) {\n      node = node.levels[0].next!;\n      callbackfn.call(thisArg, node.value, i, this);\n    }\n  }\n\n  has(value: T): boolean {\n    return has(this._root.levels[0].next, value);\n  }\n\n  keys(): IterableIterator<number> {\n    return keys(this._root.levels[0].next);\n  }\n\n  pop(): T | undefined {\n    // If list is empty\n    if (this._size <= 0) {\n      return undefined;\n    }\n\n    // Remove last value\n    const { root } = this._cut(this._size - 1, 1);\n\n    // Return value\n    return root.levels[0].next!.value;\n  }\n\n  push(...values: T[]): number {\n    // Add values\n    this._insert(this._size, values);\n\n    // Return new size\n    return this._size;\n  }\n\n  set(index: number, value: T): T | undefined {\n    // Sanitize input\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return undefined;\n    }\n\n    // Set value\n    const core = { root: this._root, size: this._size, tails: this._tails };\n    const { node } = getEntry(core, index);\n    const prevValue = node.value;\n    node.value = value;\n\n    // Return previous value\n    return prevValue;\n  }\n\n  shift(): T | undefined {\n    // If list is empty\n    if (this._size <= 0) {\n      return undefined;\n    }\n\n    // Remove first value\n    const { root } = this._cut(0, 1);\n\n    // Return value\n    return root.levels[0].next!.value;\n  }\n\n  slice(start?: number, end?: number): CircularSkipList<T> {\n    const size = this._size;\n\n    // Sanitize inputs\n    start = clamp(addIfBelow(toInteger(start, 0), size), 0, size);\n    end = clamp(addIfBelow(toInteger(end, size), size), start, size);\n\n    // Create config\n    const config: CircularSkipListConfig = {\n      capacity: 0,\n      p: this._p,\n      maxLevel: this._maxLevel,\n    };\n\n    // Check if empty\n    if (start >= end) {\n      return new CircularSkipList<T>(config);\n    }\n\n    // Create segment copy\n    const core = { root: this._root, size: this._size, tails: this._tails };\n    const seg = copy(core, start, end - start);\n\n    // Return copied segment as a list\n    config.capacity = seg.size;\n    const list = new CircularSkipList<T>(config);\n    list._root = seg.root;\n    list._tails = seg.tails;\n    list._size = seg.size;\n\n    return list;\n  }\n\n  splice(\n    start: number,\n    deleteCount?: number,\n    ...items: T[]\n  ): CircularSkipList<T> {\n    const size = this._size;\n\n    // Sanitize inputs\n    start = clamp(addIfBelow(toInteger(start, 0), size), 0, size);\n    deleteCount = clamp(toInteger(deleteCount, 0), 0, size - start);\n\n    // Remove deleted items\n    const core = this._cut(start, deleteCount);\n\n    // Add new items\n    this._insert(start, items);\n\n    // Return deleted items as a list\n    const list = new CircularSkipList<T>({\n      capacity: deleteCount,\n      p: this._p,\n      maxLevel: this._maxLevel,\n    });\n    list._root = core.root;\n    list._tails = core.tails;\n    list._size = core.size;\n\n    return list;\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.values();\n  }\n\n  unshift(...values: T[]): number {\n    // Add values\n    this._presert(0, values);\n\n    // Return new size\n    return this._size;\n  }\n\n  values(): IterableIterator<T> {\n    return values(this._root.levels[0].next);\n  }\n\n  /**\n   * @internal\n   */\n  protected _cut(start: number, count: number): SkipCore<T> {\n    // Create list core\n    const core = { root: this._root, size: this._size, tails: this._tails };\n\n    // Cut and get removed segment\n    const seg = cut(core, start, count);\n\n    // Update list state\n    this._size = core.size;\n    this._tails = core.tails;\n\n    // Return cut segment\n    return seg;\n  }\n\n  /**\n   * @internal\n   */\n  protected _genLevels(N: number): number[] {\n    const levels = new Array<number>(N);\n    const maxLevel = this._maxLevel - 1;\n    for (let i = 0; i < N; ++i) {\n      levels[i] = 1 + randomRun(this._p, maxLevel);\n    }\n    return levels;\n  }\n\n  /**\n   * @internal\n   */\n  protected _insert(index: number, values: T[]): void {\n    // If no values\n    const N = values.length;\n    if (N <= 0) {\n      return;\n    }\n\n    // If no capacity\n    if (this._capacity <= 0) {\n      this._overflow(values);\n      return;\n    }\n\n    // Check free space\n    let free = this._capacity - this._size;\n    if (free >= N) {\n      this._safeInsert(index, values);\n      return;\n    }\n\n    // Check if \"infinite\" capacity yet not enough space\n    if (!this._isFinite) {\n      this._safeInsert(index, values.slice(0, free));\n      throw new Error(\"Out of memory\");\n    }\n\n    // Remove from head\n    if (index > 0) {\n      const shifted = Math.min(index, N - free);\n      const { root } = this._cut(0, shifted);\n      this._overflow(root.levels[0].next);\n      index -= shifted;\n      free += shifted;\n    }\n\n    // Check free space\n    if (free >= N) {\n      this._safeInsert(index, values);\n      return;\n    }\n\n    // Remove from items and insert remaining\n    const mid = values.length - free;\n    this._overflow(values.slice(0, mid));\n    this._safeInsert(0, values.slice(mid));\n  }\n\n  /**\n   * @internal\n   *\n   * Emit an overflow event containing the items evicted from the collection.\n   *\n   * @param evicted - The items evicted from the collection.\n   */\n  protected _overflow(evicted?: T[] | SkipNode<T>): void {\n    if (evicted == null) {\n      return;\n    }\n    if (Array.isArray(evicted)) {\n      this._emitter.emit(BoundedEvent.Overflow, evicted);\n      return;\n    }\n    for (const array of chunk(values(evicted), ARGS_MAX_LENGTH)) {\n      this._emitter.emit(BoundedEvent.Overflow, array);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  protected _presert(index: number, values: T[]): void {\n    // If no values\n    const N = values.length;\n    if (N <= 0) {\n      return;\n    }\n\n    // If no capacity\n    if (this._capacity <= 0) {\n      this._overflow(values);\n      return;\n    }\n\n    // Check free space\n    let free = this._capacity - this._size;\n    if (free >= N) {\n      this._safeInsert(index, values);\n      return;\n    }\n\n    // Check if \"infinite\" capacity yet not enough space\n    if (!this._isFinite) {\n      this._safeInsert(0, values.slice(values.length - free));\n      throw new Error(\"Out of memory\");\n    }\n\n    // Remove from tail\n    if (index < this._size) {\n      const popped = Math.min(this._size - index, N - free);\n      const { root } = this._cut(this._size - popped, popped);\n      this._overflow(root.levels[0].next);\n      free += popped;\n    }\n\n    // Check free space\n    if (free >= N) {\n      this._safeInsert(index, values);\n      return;\n    }\n\n    // Remove from items and insert remaining\n    this._overflow(values.slice(free));\n    this._safeInsert(this._size, values.slice(0, free));\n  }\n\n  /**\n   * @internal\n   */\n  protected _safeInsert(index: number, values: T[]): void {\n    // Create segment\n    const levels = this._genLevels(values.length);\n    const seg = toList(levels, values);\n\n    // Insert segment\n    const core = { root: this._root, size: this._size, tails: this._tails };\n    insert(core, index, seg);\n\n    // Update list state\n    this._size = core.size;\n    this._tails = core.tails;\n  }\n}\n","import { Bounded } from \"../../types/bounded\";\nimport { BoundedEvent } from \"../../types/boundedEvent\";\nimport { Collection } from \"../../types/collection\";\nimport { isInfinity, isNumber, isSafeCount } from \"../../utils/is\";\n\nimport { CircularBase } from \"../circularBase\";\n\n/**\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularMap<K, V>\n  extends CircularBase<[K, V]>\n  implements Bounded<[K, V]>, Map<K, V>, Collection<K, V>\n{\n  /**\n   * @internal\n   * The maximum number of elements that can be stored in the collection.\n   */\n  protected _capacity: number;\n\n  /**\n   * @internal\n   * The internal map.\n   */\n  protected _map: Map<K, V>;\n\n  /**\n   * Creates a new map with `capacity` defaulted to `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new map with the given capacity.\n   *\n   * @param capacity - the map's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new map. Initial capacity is the number of unique items given.\n   *\n   * @param items - the values to store in the map.\n   */\n  constructor(items: Iterable<[K, V]>);\n  constructor(capacity?: number | null | Iterable<[K, V]>) {\n    super();\n\n    // Initialize class variables\n    this._capacity = Infinity;\n    this._map = new Map();\n\n    // Case 1: capacity is null, undefined or Infinity\n    capacity = capacity ?? Infinity;\n    if (isInfinity(capacity)) {\n      return;\n    }\n\n    // Case 2: capacity is zero or a safe positive integer\n    if (isNumber(capacity)) {\n      if (!isSafeCount(capacity)) {\n        throw new RangeError(\"Invalid capacity\");\n      }\n      this._capacity = capacity;\n      return;\n    }\n\n    // Case 3: capacity is iterable\n    this._map = new Map(capacity as Iterable<[K, V]>);\n    this._capacity = this._map.size;\n  }\n\n  /**\n   * @returns the maximum number of elements that can be stored.\n   */\n  get capacity(): number {\n    return this._capacity;\n  }\n\n  /**\n   * @returns the number of values in the map.\n   */\n  get size(): number {\n    return this._map.size;\n  }\n\n  /**\n   * Return the type of the object.\n   */\n  get [Symbol.toStringTag](): string {\n    return CircularMap.name;\n  }\n\n  /**\n   * The maximum number of elements that can be stored in the map.\n   */\n  set capacity(capacity: number) {\n    // Convert input to a number\n    capacity = +capacity;\n\n    // Check if input is valid\n    if (!isInfinity(capacity) && !isSafeCount(capacity)) {\n      throw new RangeError(\"Invalid capacity\");\n    }\n\n    // Check if capacity is changing\n    if (capacity === this._capacity) {\n      return;\n    }\n\n    // Update capacity\n    this._capacity = capacity;\n\n    // Check if size is within capacity\n    if (this.size <= capacity) {\n      return;\n    }\n\n    // Check if new capacity is zero\n    if (capacity === 0) {\n      const evicted = Array.from(this._map);\n      this.clear();\n      this._emitter.emit(BoundedEvent.Overflow, evicted);\n      return;\n    }\n\n    // Shrink down map.\n    const evicted: [K, V][] = [];\n    const iter = this._map.entries();\n    for (let n = this.size - capacity; n > 0; --n) {\n      const entry = iter.next().value;\n      this._map.delete(entry[0]);\n      evicted.push(entry);\n    }\n    this._emitter.emit(BoundedEvent.Overflow, evicted);\n  }\n\n  /**\n   * Removes all elements from the map.\n   */\n  clear(): void {\n    this._map.clear();\n  }\n\n  /**\n   * Deletes a specified value from the map.\n   *\n   * @returns `true` if the value existed in the map and has been removed, or `false` otherwise.\n   */\n  delete(key: K): boolean {\n    return this._map.delete(key);\n  }\n\n  /**\n   * Iterate through the map's entries.\n   *\n   * **Note:** Modifying the map during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of [key, value] pairs for every entry.\n   */\n  entries(): IterableIterator<[K, V]> {\n    return this._map.entries();\n  }\n\n  /**\n   * Performs the specified action for each value in the map.\n   *\n   * **Note:** Modifying the map during iteration may cause unexpected behavior.\n   *\n   * @param callbackfn - A function that accepts up to three arguments. It is called once per value.\n   * @param thisArg - An object to which the `this` keyword refers to in the `callbackfn` function. Defaults to `undefined`.\n   */\n  forEach(\n    callbackfn: (value: V, key: K, map: this) => void,\n    thisArg?: unknown\n  ): void {\n    for (const [key, value] of this._map.entries()) {\n      callbackfn.call(thisArg, value, key, this);\n    }\n  }\n\n  /**\n   * Returns the associated value of the given key from the map.\n   *\n   * If the associated value is an object, then you will get a reference to that object; any change made to the object will effectively modify it inside the map.\n   *\n   * @returns the value associated with the specified key, or `undefined` if no value is associated.\n   */\n  get(key: K): V | undefined {\n    return this._map.get(key);\n  }\n\n  /**\n   * Determines whether a given value is in the map.\n   *\n   * @param key - The key to search for.\n   *\n   * @returns `true` if the value was found, `false` otherwise.\n   */\n  has(key: K): boolean {\n    return this._map.has(key);\n  }\n\n  /**\n   * Iterate through the map's keys.\n   *\n   * **Note:** Modifying the map during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of the map's keys.\n   */\n  keys(): IterableIterator<K> {\n    return this._map.keys();\n  }\n\n  /**\n   * Sets the specified key-value pair in the map.\n   *\n   * @param key - the key to add\n   * @param value - the key's value.\n   */\n  set(key: K, value: V): this {\n    // Base case: map has no capacity.\n    if (this.capacity < 1) {\n      this._emitter.emit(BoundedEvent.Overflow, [[key, value]]);\n      return this;\n    }\n\n    // Evict excess items\n    const evicted: [K, V][] = [];\n    if (!this._map.delete(key) && this.size >= this.capacity) {\n      const entry = this._map.entries().next().value;\n      this._map.delete(entry[0]);\n      evicted.push(entry);\n    }\n\n    // Add value\n    this._map.set(key, value);\n\n    // Emit evicted\n    if (evicted.length > 0) {\n      this._emitter.emit(BoundedEvent.Overflow, evicted);\n    }\n\n    return this;\n  }\n\n  /**\n   * Iterate through the map's values.\n   *\n   * **Note:** Modifying the map during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of values.\n   */\n  [Symbol.iterator](): IterableIterator<[K, V]> {\n    return this._map.entries();\n  }\n\n  /**\n   * Iterate through the map's values.\n   *\n   * **Note:** Modifying the map during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of the map's values.\n   */\n  values(): IterableIterator<V> {\n    return this._map.values();\n  }\n}\n","import { Queue } from \"../../types/queue\";\nimport { Bounded } from \"../../types/bounded\";\n\nimport { CircularLinkedList } from \"../list/circularLinkedList\";\nimport { BoundedEvent } from \"../..\";\n\n/**\n * A circular queue is similar to a traditional queue, but uses a fixed-size,\n * circular buffer. When the queue reaches its maximum capacity and a new\n * element is added, the oldest is discarded, thus maintaining its size.\n *\n * This structure efficiently utilizes memory for applications where only the\n * most recent additions are of interest and older data can be discarded.\n *\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularLinkedQueue<T> implements Bounded<T>, Queue<T> {\n  /**\n   * @internal\n   */\n  protected _list: CircularLinkedList<T>;\n\n  /**\n   * Creates a new stack with `capacity` defaulted to `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new stack with the given capacity.\n   *\n   * @param capacity - the stack's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new stack. Initial capacity is the number of items given.\n   *\n   * @param items - the values to store in the stack.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    this._list = new CircularLinkedList(capacity as number);\n  }\n\n  get capacity(): number {\n    return this._list.capacity;\n  }\n\n  get size(): number {\n    return this._list.size;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return CircularLinkedQueue.name;\n  }\n\n  set capacity(capacity: number) {\n    this._list.capacity = capacity;\n  }\n\n  clear(): void {\n    this._list.clear();\n  }\n\n  entries(): IterableIterator<[number, T]> {\n    return this._list.entries();\n  }\n\n  first(): T | undefined {\n    return this._list.at(0);\n  }\n\n  forEach(\n    callbackfn: (value: T, index: number, collection: this) => void,\n    thisArg?: unknown\n  ): void {\n    this._list.forEach((v, i) => callbackfn.call(thisArg, v, i, this), thisArg);\n  }\n\n  front(): T | undefined {\n    return this._list.at(0);\n  }\n\n  has(value: T): boolean {\n    return this._list.has(value);\n  }\n\n  keys(): IterableIterator<number> {\n    return this._list.keys();\n  }\n\n  push(...elems: T[]): number {\n    return this._list.push(...elems);\n  }\n\n  shift(): T | undefined {\n    return this._list.shift();\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.values();\n  }\n\n  values(): IterableIterator<T> {\n    return this._list.values();\n  }\n\n  addListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.addListener(event, listener);\n    return this;\n  }\n\n  on(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.on(event, listener);\n    return this;\n  }\n\n  removeListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.removeListener(event, listener);\n    return this;\n  }\n}\n","import { BoundedEvent } from \"../../types/boundedEvent\";\nimport { Queue } from \"../../types/queue\";\nimport { Bounded } from \"../../types/bounded\";\nimport { CircularArrayList } from \"../list/circularArrayList\";\n\n/**\n * A circular queue is similar to a traditional queue, but uses a fixed-size,\n * circular buffer. When the queue reaches its maximum capacity and a new\n * element is added, the oldest is discarded, thus maintaining its size.\n *\n * This structure efficiently utilizes memory for applications where only the\n * most recent additions are of interest and older data can be discarded.\n *\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularQueue<T> implements Bounded<T>, Queue<T> {\n  /**\n   * @internal\n   */\n  protected _list: CircularArrayList<T>;\n\n  /**\n   * Creates a new queue. Default `capacity` is `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new queue with the given capacity.\n   *\n   * @param capacity - the queue's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new queue from the given items. `capacity` will equal the number of items.\n   *\n   * @param items - the initial values in the queue.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    this._list = new CircularArrayList(capacity as number);\n  }\n\n  get capacity(): number {\n    return this._list.capacity;\n  }\n\n  get size(): number {\n    return this._list.size;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return CircularQueue.name;\n  }\n\n  set capacity(capacity: number) {\n    this._list.capacity = capacity;\n  }\n\n  clear(): void {\n    this._list.clear();\n  }\n\n  entries(): IterableIterator<[number, T]> {\n    return this._list.entries();\n  }\n\n  first(): T | undefined {\n    return this._list.first();\n  }\n\n  forEach(\n    callbackfn: (value: T, index: number, collection: this) => void,\n    thisArg?: unknown\n  ): void {\n    return this._list.forEach((v, i) => callbackfn.call(thisArg, v, i, this));\n  }\n\n  front(): T | undefined {\n    return this._list.first();\n  }\n\n  has(value: T): boolean {\n    return this._list.has(value);\n  }\n\n  keys(): IterableIterator<number> {\n    return this._list.keys();\n  }\n\n  push(...elems: T[]): number {\n    return this._list.push(...elems);\n  }\n\n  shift(): T | undefined {\n    return this._list.shift();\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return this._list.values();\n  }\n\n  values(): IterableIterator<T> {\n    return this._list.values();\n  }\n\n  addListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.addListener(event, listener);\n    return this;\n  }\n\n  on(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.on(event, listener);\n    return this;\n  }\n\n  removeListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.removeListener(event, listener);\n    return this;\n  }\n}\n","import { Bounded } from \"../../types/bounded\";\nimport { BoundedEvent } from \"../../types/boundedEvent\";\nimport { Collection } from \"../../types/collection\";\nimport { isInfinity, isNumber, isSafeCount } from \"../../utils/is\";\n\nimport { CircularBase } from \"../circularBase\";\n\n/**\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularSet<T>\n  extends CircularBase<T>\n  implements Bounded<T>, Set<T>, Collection<T, T>\n{\n  /**\n   * @internal\n   * The maximum number of elements that can be stored in the collection.\n   */\n  protected _capacity: number;\n\n  /**\n   * @internal\n   * The internal set.\n   */\n  protected _set: Set<T>;\n\n  /**\n   * Creates a new set with `capacity` defaulted to `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new set with the given capacity.\n   *\n   * @param capacity - the set's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new set. Initial capacity is the number of unique items given.\n   *\n   * @param items - the values to store in the set.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    super();\n\n    // Initialize class variables\n    this._capacity = Infinity;\n    this._set = new Set();\n\n    // Case 1: capacity is null, undefined or Infinity\n    capacity = capacity ?? Infinity;\n    if (isInfinity(capacity)) {\n      return;\n    }\n\n    // Case 2: capacity is zero or a safe positive integer\n    if (isNumber(capacity)) {\n      if (!isSafeCount(capacity)) {\n        throw new RangeError(\"Invalid capacity\");\n      }\n      this._capacity = capacity;\n      return;\n    }\n\n    // Case 3: capacity is iterable\n    this._set = new Set(capacity as Iterable<T>);\n    this._capacity = this._set.size;\n  }\n\n  /**\n   * @returns the maximum number of elements that can be stored.\n   */\n  get capacity(): number {\n    return this._capacity;\n  }\n\n  /**\n   * @returns the number of values in the set.\n   */\n  get size(): number {\n    return this._set.size;\n  }\n\n  /**\n   * Return the type of the object.\n   */\n  get [Symbol.toStringTag](): string {\n    return CircularSet.name;\n  }\n\n  /**\n   * The maximum number of elements that can be stored in the set.\n   */\n  set capacity(capacity: number) {\n    // Convert input to a number\n    capacity = +capacity;\n\n    // Check if input is valid\n    if (!isInfinity(capacity) && !isSafeCount(capacity)) {\n      throw new RangeError(\"Invalid capacity\");\n    }\n\n    // Check if capacity is changing\n    if (capacity === this._capacity) {\n      return;\n    }\n\n    // Update capacity\n    this._capacity = capacity;\n\n    // Check if set is within capacity\n    if (this.size <= capacity) {\n      return;\n    }\n\n    // Check if new capacity is zero\n    if (capacity === 0) {\n      const evicted = Array.from(this._set);\n      this.clear();\n      this._emitter.emit(BoundedEvent.Overflow, evicted);\n      return;\n    }\n\n    // Shrink down map.\n    const evicted: T[] = [];\n    const iter = this._set.values();\n    for (let n = this.size - capacity; n > 0; --n) {\n      const value = iter.next().value;\n      this._set.delete(value);\n      evicted.push(value);\n    }\n    this._emitter.emit(BoundedEvent.Overflow, evicted);\n  }\n\n  /**\n   * Adds the specified value to the set.\n   *\n   * @param value - the value to add.\n   */\n  add(value: T): this {\n    // Base case: set has no capacity.\n    if (this.capacity < 1) {\n      this._emitter.emit(BoundedEvent.Overflow, [value]);\n      return this;\n    }\n\n    // Evict excess items\n    const evicted: T[] = [];\n    if (!this._set.delete(value) && this.size >= this.capacity) {\n      const out = this._set.values().next().value;\n      this._set.delete(out);\n      evicted.push(out);\n    }\n\n    // Add value\n    this._set.add(value);\n\n    // Emit evicted\n    if (evicted.length > 0) {\n      this._emitter.emit(BoundedEvent.Overflow, evicted);\n    }\n\n    return this;\n  }\n\n  /**\n   * Removes all elements from the set.\n   */\n  clear(): void {\n    this._set.clear();\n  }\n\n  /**\n   * Deletes a specified value from the set.\n   *\n   * @returns `true` if the value existed in the set and has been removed, or `false` otherwise.\n   */\n  delete(value: T): boolean {\n    return this._set.delete(value);\n  }\n\n  /**\n   * Iterate through the set's entries.\n   *\n   * **Note:** Modifying the set during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of [key, value] pairs for every entry.\n   */\n  entries(): IterableIterator<[T, T]> {\n    return this._set.entries();\n  }\n\n  /**\n   * Performs the specified action for each value in the set.\n   *\n   * **Note:** Modifying the set during iteration may cause unexpected behavior.\n   *\n   * @param callbackfn - A function that accepts up to three arguments. It is called once per value.\n   * @param thisArg - An object to which the `this` keyword refers to in the `callbackfn` function. Defaults to `undefined`.\n   */\n  forEach(\n    callbackfn: (value: T, key: T, set: this) => void,\n    thisArg?: unknown\n  ): void {\n    for (const key of this._set.keys()) {\n      callbackfn.call(thisArg, key, key, this);\n    }\n  }\n\n  /**\n   * Determines whether a given value is in the set.\n   *\n   * @param value - The value to search for.\n   *\n   * @returns `true` if the value was found, `false` otherwise.\n   */\n  has(value: T): boolean {\n    return this._set.has(value);\n  }\n\n  /**\n   * Iterate through the set's keys.\n   *\n   * **Note:** Modifying the set during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of the set's keys.\n   */\n  keys(): IterableIterator<T> {\n    return this._set.keys();\n  }\n\n  /**\n   * Iterate through the set's values.\n   *\n   * **Note:** Modifying the set during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of the set's values.\n   */\n  values(): IterableIterator<T> {\n    return this._set.keys();\n  }\n\n  /**\n   * Iterate through the set's values.\n   *\n   * **Note:** Modifying the set during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of values.\n   */\n  [Symbol.iterator](): IterableIterator<T> {\n    return this._set.values();\n  }\n}\n","import { Stack } from \"../../types/stack\";\nimport { Bounded } from \"../../types/bounded\";\nimport { BoundedEvent, CircularDoublyLinkedList } from \"../..\";\n\n/**\n * A circular stack is similar to a traditional stack, but uses a fixed-size,\n * circular buffer. When the stack reaches its maximum capacity and a new\n * element is added, the oldest is discarded, thus maintaining its size.\n *\n * This structure efficiently utilizes memory for applications where only the\n * most recent additions are of interest and older data can be discarded.\n *\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularLinkedStack<T> implements Bounded<T>, Stack<T> {\n  /**\n   * @internal\n   */\n  protected _list: CircularDoublyLinkedList<T>;\n\n  /**\n   * Creates a new stack with `capacity` defaulted to `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new stack with the given capacity.\n   *\n   * @param capacity - the stack's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new stack. Initial capacity is the number of items given.\n   *\n   * @param items - the values to store in the stack.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    this._list = new CircularDoublyLinkedList(capacity as number);\n  }\n\n  get capacity(): number {\n    return this._list.capacity;\n  }\n\n  get size(): number {\n    return this._list.size;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return CircularLinkedStack.name;\n  }\n\n  set capacity(capacity: number) {\n    this._list.capacity = capacity;\n  }\n\n  clear(): void {\n    this._list.clear();\n  }\n\n  entries(): IterableIterator<[number, T]> {\n    return this._list.entries();\n  }\n\n  forEach(\n    callbackfn: (value: T, index: number, collection: this) => void,\n    thisArg?: unknown\n  ): void {\n    this._list.forEach((v, i) => callbackfn.call(thisArg, v, i, this), thisArg);\n  }\n\n  has(value: T): boolean {\n    return this._list.has(value);\n  }\n\n  keys(): IterableIterator<number> {\n    return this._list.keys();\n  }\n\n  last(): T | undefined {\n    return this._list.at(-1);\n  }\n\n  pop(): T | undefined {\n    return this._list.pop();\n  }\n\n  push(...elems: T[]): number {\n    return this._list.push(...elems);\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.values();\n  }\n\n  top(): T | undefined {\n    return this._list.at(-1);\n  }\n\n  values(): IterableIterator<T> {\n    return this._list.values();\n  }\n\n  addListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.addListener(event, listener);\n    return this;\n  }\n\n  on(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.on(event, listener);\n    return this;\n  }\n\n  removeListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.removeListener(event, listener);\n    return this;\n  }\n}\n","import { BoundedEvent } from \"../../types/boundedEvent\";\nimport { Stack } from \"../../types/stack\";\nimport { Bounded } from \"../../types/bounded\";\nimport { CircularArrayList } from \"../list/circularArrayList\";\n\n/**\n * A circular stack is similar to a traditional stack, but uses a fixed-size,\n * circular buffer. When the stack reaches its maximum capacity and a new\n * element is added, the oldest is discarded, thus maintaining its size.\n *\n * This structure efficiently utilizes memory for applications where only the\n * most recent additions are of interest and older data can be discarded.\n *\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularStack<T> implements Bounded<T>, Stack<T> {\n  /**\n   * @internal\n   */\n  protected _list: CircularArrayList<T>;\n\n  /**\n   * Creates a new stack. Default `capacity` is `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new stack with the given capacity.\n   *\n   * @param capacity - the stack's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new stack from the given items. `capacity` will equal the number of items.\n   *\n   * @param items - the initial values in the stack.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    this._list = new CircularArrayList(capacity as number);\n  }\n\n  get capacity(): number {\n    return this._list.capacity;\n  }\n\n  get size(): number {\n    return this._list.size;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return CircularStack.name;\n  }\n\n  set capacity(capacity: number) {\n    this._list.capacity = capacity;\n  }\n\n  clear(): void {\n    this._list.clear();\n  }\n\n  entries(): IterableIterator<[number, T]> {\n    return this._list.entries();\n  }\n\n  forEach(\n    callbackfn: (value: T, index: number, collection: this) => void,\n    thisArg?: unknown\n  ): void {\n    return this._list.forEach((v, i) => callbackfn.call(thisArg, v, i, this));\n  }\n\n  has(value: T): boolean {\n    return this._list.has(value);\n  }\n\n  keys(): IterableIterator<number> {\n    return this._list.keys();\n  }\n\n  last(): T | undefined {\n    return this._list.last();\n  }\n\n  pop(): T | undefined {\n    return this._list.pop();\n  }\n\n  push(...elems: T[]): number {\n    return this._list.push(...elems);\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return this._list.values();\n  }\n\n  top(): T | undefined {\n    return this._list.last();\n  }\n\n  values(): IterableIterator<T> {\n    return this._list.values();\n  }\n\n  addListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.addListener(event, listener);\n    return this;\n  }\n\n  on(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.on(event, listener);\n    return this;\n  }\n\n  removeListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.removeListener(event, listener);\n    return this;\n  }\n}\n"],"names":["BoundedEvent","has","prefix","Events","EE","fn","context","once","addListener","emitter","event","listener","evt","clearEvent","EventEmitter","names","events","name","handlers","i","l","ee","listeners","a1","a2","a3","a4","a5","len","args","length","j","module","CircularBase","__publicField","ARGS_MAX_LENGTH","ARRAY_MAX_LENGTH","LINKED_MAX_LENGTH","isArrayLength","value","isInfinity","isIterable","isLinkedLength","isNumber","isSafeCount","addIfBelow","addend","target","clamp","min","max","isInRange","log","base","randomRun","probability","randomFn","count","toInteger","defaultValue","chunk","source","chunkSize","CircularArrayList","capacity","vals","index","start","end","ranges","deleteCount","ext","size","callbackfn","thisArg","N","newSize","items","prevValue","from","to","out","addCount","replaceCount","a","b","free","shifted","mid","vIndex","popped","newHead","evicted","temp","diff","tail","externalIndex","head","CircularDeque","v","elems","copy","node","distance","root","dupe","cut","prev","get","entries","keys","toList","values","seg","singlyCut","next","singlyGet","CircularDoublyLinkedList","array","getValues","core","list","CircularLinkedDeque","CircularLinkedList","calcMaxLevel","p","expectedSize","toNode","tails","sizes","getEntry","maxY","Y","span","y","segRoot","prevStack","getStack","tailStack","nextStack","levels","lvl","edge","links","stack","toStack","insert","dest","src","minY","prevs","prevEdge","tailEdge","rootEdge","truncateLevels","level","CircularSkipList","config","maxLevel","CircularMap","iter","n","entry","key","CircularLinkedQueue","CircularQueue","CircularSet","CircularLinkedStack","CircularStack"],"mappings":"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","x_google_ignoreList":[1]}