/*! circle-ds
https://github.com/havelessbemore/circle-ds

MIT License

Copyright (C) 2024-2024 Michael Rojas <dev.michael.rojas@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. */
"use strict";var Y=Object.defineProperty;var j=(r,h,t)=>h in r?Y(r,h,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[h]=t;var a=(r,h,t)=>(j(r,typeof h!="symbol"?h+"":h,t),t);Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});const o={Overflow:"overflow"},D={};class w{constructor(h=new D){a(this,"emitter");this.emitter=h}addListener(h,t){return this.emitter.addListener(h,t),this}on(h,t){return this.emitter.on(h,t),this}prependListener(h,t){return this.emitter.prependListener(h,t),this}removeListener(h,t){return this.emitter.removeListener(h,t),this}}const m=4294967295;function N(r){return Number.isInteger(r)&&r>=0&&r<=m}function c(r){return r===Number.POSITIVE_INFINITY}function S(r){return typeof r=="number"}function g(r){return Number.isSafeInteger(r)&&r>=0}class L extends w{constructor(t){super();a(this,"_capacity");a(this,"head");a(this,"isFinite");a(this,"next");a(this,"_size");a(this,"vals");if(this._capacity=m,this.head=0,this.isFinite=!1,this._size=0,this.next=0,this.vals=[],t=t??1/0,!c(t)){if(S(t)){if(!N(t))throw new RangeError("Invalid capacity");this._capacity=t,this.isFinite=!0;return}for(const i of t)this.vals.push(i);this._capacity=this.vals.length,this.isFinite=!0,this._size=this._capacity}}get capacity(){return this.isFinite?this._capacity:1/0}get size(){return this._size}get[Symbol.toStringTag](){return L.name}set capacity(t){if(t=+t,c(t))t=m,this.isFinite=!1;else if(N(t))this.isFinite=!0;else throw new RangeError("Invalid capacity");this._size<1?(this._capacity=t,this.clear()):t<this._capacity?this.shrink(t):t>this._capacity&&this.grow(t)}clear(){this.head=0,this._size=0,this.next=0,this.vals.length=0}*entries(){for(let t=0;t<this._size;++t)yield[t,this.vals[(this.head+t)%this._capacity]]}first(){return this.vals[this.head]}forEach(t,i){const s=this._size;for(let e=0;e<s&&e<this._size;++e){const n=this.vals[(this.head+e)%this._capacity];t.call(i,n,e,this)}}front(){return this.vals[this.head]}has(t){const i=this._size;for(let s=0;s<i;++s)if(t===this.vals[(this.head+s)%this._capacity])return!0;return!1}*keys(){for(let t=0;t<this._size;++t)yield t}last(){return this.top()}pop(){if(this._size<=0)return;const t=this.next>0?this.next-1:this.head+this._size-1;--this._size,this.next=t;const i=this.vals[t];return this.vals[t]=void 0,i}push(...t){const i=t.length;if(i<1)return this._size;const s=this._capacity;if(s<1)return this.emit(t),this._size;const e=s-this._size;if(e>=i)return this._push(t,i),this._size;if(!this.isFinite)throw this._push(t,e),new Error("Out of memory");const n=i-s;if(this.evictHead(this.size+n),n>0)this.emit(t.splice(0,n));else if(n<0)return this._push(t,i),this._size;return this.vals=t,this._size=s,this._size}shift(){if(this._size<=0)return;--this._size;const t=this.vals[this.head];return this.vals[this.head]=void 0,++this.head>=this._capacity&&(this.head=0,this.vals.length=this.next),t}[Symbol.iterator](){return this.values()}unshift(...t){const i=t.length;if(i<1)return this._size;const s=this._capacity;if(s<1)return this.emit(t),this._size;const e=s-this._size;if(e>=i)return this._unshift(t,i),this._size;if(!this.isFinite)throw this._unshift(t,e),new Error("Out of memory");const n=i-s;if(this.evictTail(this.size+n),n>0)this.emit(t.splice(i-n,n));else if(n<0)return this._unshift(t,i),this._size;return this.vals=t,this._size=s,this._size}top(){if(!(this._size<1))return this.vals[(this.head+this._size-1)%this._capacity]}*values(){for(let t=0;t<this._size;++t)yield this.vals[(this.head+t)%this._capacity]}emit(t){this.emitter.emit(o.Overflow,t)}evictHead(t){if(t<=0)return;const i=this._capacity-this.head,s=!this.isSequential();if(s&&i>t){this.emit(this.vals.slice(this.head,this.head+t)),this.vals.fill(void 0,this.head,this.head+t),this.head+=t,this._size-=t;return}if(s){if(this.emit(this.vals.slice(this.head,this.head+i)),this.vals.length=this.next,this.head=0,this._size-=i,t<=i)return;t-=i}if(t>=this._size){this.emit(this.vals.slice(this.head,this.head+this._size)),this.clear();return}this.emit(this.vals.slice(this.head,this.head+t)),this.vals.fill(void 0,this.head,this.head+t),this.head+=t,this._size-=t}evictTail(t){if(t<=0)return;const i=!this.isSequential();if(i&&this.next>t){this.emit(this.vals.slice(this.next-t,this.next)),this.vals.fill(void 0,this.next-t,this.next),this.next-=t,this._size-=t;return}if(i&&(this.emit(this.vals.slice(0,this.next)),this.vals.fill(void 0,0,this.next),this._size-=this.next,t-=this.next,this.next=0,t<=0))return;const s=this.head+this._size;if(t>=this._size){this.emit(this.vals.slice(this.head,s)),this.clear();return}this.emit(this.vals.slice(s-t,s)),this.next=s-t,this.vals.length=this.next,this._size-=t}grow(t){if(this.isSequential()){this.sequentialReset(t);return}if(this._size<=this.head){const i=this._size-this.next;this.vals.copyWithin(i,0,this.next),this.vals.copyWithin(0,this.head,this.head+i),this.vals.length=this._size,this.head=0,this.next=this._size}else if(this.head+this._size<=t)this.vals.length=this.head+this._size,this.vals.copyWithin(this._capacity,0,this.next),this.vals.fill(void 0,0,this.next),this.next=(this.head+this._size)%t;else{const i=t-this._capacity;this.vals.length=t,this.vals.copyWithin(this._capacity,0,i),this.vals.copyWithin(0,i,this.next);const s=Math.max(i,this.next-i);this.vals.fill(void 0,s,this.next),this.next-=i}this._capacity=t}isSequential(){return this.head<this.next||this.next<1}_push(t,i){const s=this._capacity,e=this.vals;let n=this.next;for(let l=0;l<i;++l)e[n]=t[l],++n>=s&&(n=0);this.next=n,this._size+=i}sequentialReset(t){const i=this.head+this._size;return i<=t?(this.vals.length=i,this.next=this.vals.length%t):this.head>=t?(this.vals.copyWithin(0,this.head,i),this.vals.length=this._size,this.head=0,this.next=this._size%t):(this.vals.copyWithin(0,t,i),this.vals.length=t,this.next=i-t),this._capacity=t,!0}shrink(t){if(this.evictHead(this._size-t),this.isSequential()){this.sequentialReset(t);return}const i=this._capacity-t;this.vals.copyWithin(this.head-i,this.head,this._capacity),this.vals.length=t,this.head-=i,this._capacity=t}_unshift(t,i){const s=this._capacity,e=this.vals;let n=this.head;const l=t.length-i;for(let u=t.length-1;u>=l;--u)--n<0&&(n+=s),e[n]=t[u];this.head=n,this._size+=i}}function b(r,h){if(h<=0)return[void 0,void 0];const t=r.next,i=x(t,h-1);return r.next=i.next,i.next=void 0,[t,i]}function*$(r,h){for(let t=0;r!=h;++t)yield[t,r.value],r=r.next}function x(r,h){if(!(h<0)){for(let t=0;r!=null&&t<h;++t)r=r.next;return r}}function P(r,h,t){for(;r!=t;){if(r.value===h)return!0;r=r.next}return!1}function*Q(r,h){for(let t=0;r!=h;++t)yield t,r=r.next}function k(r,h){const t=[];for(;r!=h;)t.push(r.value),r=r.next;return t}function H(r){const h={};let t=0,i=h;for(const s of r)i.next={value:s},i=i.next,++t;return h.next===void 0?[void 0,void 0,0]:[h.next,i,t]}function*q(r,h){for(let t=0;r!=h;++t)yield r.value,r=r.next}function G(r,h){if(h<=0)return[void 0,void 0];const[t,i]=b(r,h);return t.prev=void 0,r.next!=null&&(r.next.prev=r),[t,i]}function V(r,h){if(h>=0)return x(r,h);for(let t=0;r!=null&&t>h;--t)r=r.prev;return r}function X(r){const h={};let t=0,i=h;for(const s of r)i.next={prev:i,value:s},i=i.next,++t;return t<=0?[void 0,void 0,0]:(h.next.prev=void 0,[h.next,i,t])}function v(r,h,t=0){return r>=t?r:r+h}function z(r,h,t){if(h>t)throw new RangeError("Invalid clamp range; min must be <= max");return r<=h?h:r<=t?r:t}function I(r,h,t){return r>=h&&r<t}function _(r,h=0){return r=+r,isNaN(r)?h:Math.trunc(r)}class y extends w{constructor(t){super();a(this,"_capacity");a(this,"root");a(this,"_size");if(this._capacity=1/0,this.root={value:void 0},this.clear(),t=t??1/0,c(t))return;if(S(t)){if(!g(t))throw new RangeError("Invalid capacity");this._capacity=t;return}const[i,s,e]=X(t);this._capacity=e,e>0&&(this.root.next=i,this.root.prev=s,i.prev=this.root,s.next=this.root,this._size=e)}get capacity(){return this._capacity}get size(){return this._size}get[Symbol.toStringTag](){return y.name}set capacity(t){if(t=+t,!c(t)&&!g(t))throw new RangeError("Invalid capacity");if(this._capacity=t,this._size<=t)return;const i=this._size-t,[s,e]=G(this.root,i);this._size-=i,this.emitter.emit(o.Overflow,k(s,e.next))}at(t){if(t=v(_(t,-1/0),this._size),!!I(t,0,this._size))return this.get(t).value}clear(){this._size=0,this.root.next=this.root,this.root.prev=this.root}delete(t){if(t=v(_(t,-1/0),this._size),!I(t,0,this._size))return!1;const i=this.get(t);return i.prev.next=i.next,i.next.prev=i.prev,--this._size,!0}entries(){return $(this.root.next,this.root)}fill(t,i,s){i=_(i,0),i=z(v(i,this._size),0,this._size),s=_(s,this._size),s=z(v(s,this._size),0,this._size);let e=this.get(i);for(;i<s;)e.value=t,e=e.next,++i;return this}forEach(t,i){let s=this.root;for(let e=0;e<this._size;++e)s=s.next,t.call(i,s.value,e,this)}has(t){return P(this.root.next,t,this.root)}keys(){return Q(this.root.next,this.root)}pop(){if(this._size<=0)return;const t=this.root.prev;return t.prev.next=t.next,t.next.prev=t.prev,--this._size,t.value}push(...t){return t.length<=0?this._size:this._capacity<=0?(this.emitter.emit(o.Overflow,t),this._size):(this.append(this.root.prev,t),this._size)}set(t,i){if(t=v(_(t,-1/0),this._size),!I(t,0,this._size))return;const s=this.get(t),e=s.value;return s.value=i,e}shift(){if(this._size<=0)return;const t=this.root.next;return t.prev.next=t.next,t.next.prev=t.prev,--this._size,t.value}slice(t,i){const s=new y;if(this._size<=0)return s;t=_(t,0),t=z(v(t,this._size),0,this._size),i=_(i,this._size),i=z(v(i,this._size),0,this._size);let e=this.get(t-1);for(;t<i;)e=e.next,s.push(e.value),++t;return s}splice(t,i,...s){const e=new y;if(this._size<=0)return e;t=_(t,0),t=z(v(t,this._size),0,this._size),i=_(i,0),i=z(i,0,this._size-t);const n=s.length;let l=this.get(t-1);const u=Math.min(i,n);for(let d=0;d<u;++d)l=l.next,e.push(l.value),l.value=s[d];if(i<=u)return this.append(l,s,u),e;let f=e.root.prev;l.next.prev=f,f.next=l.next;const p=i-u;return f=V(l,p),l.next=f.next,l.next.prev=l,this._size-=p,f.next=e.root,e.root.prev=f,e._size+=p,e}[Symbol.iterator](){return q(this.root.next,this.root)}unshift(...t){return t.length<=0?this._size:this._capacity<=0?(this.emitter.emit(o.Overflow,t),this._size):(this.prepend(this.root.next,t),this._size)}values(){return q(this.root.next,this.root)}append(t,i,s=0){const e=this.root,n=t.next,l=[],u=this._capacity;let f=this._size;const p=i.length;for(let d=s;d<p;++d){const O={prev:t,value:i[d]};t.next=O,t=O,f<u?++f:(l.push(e.next.value),e.next=e.next.next)}return t.next=n,n.prev=t,e.next.prev=e,l.length>0&&this.emitter.emit(o.Overflow,l),this._size=f,t}get(t){return t-=t<=this._size/2?-1:this._size,V(this.root,t)}prepend(t,i){const s=this.root,e=t.prev,n=[],l=this._capacity;let u=this._size;for(let f=i.length-1;f>=0;--f){const p={next:t,value:i[f]};t.prev=p,t=p,u<l?++u:(n.push(s.prev.value),s.prev=s.prev.prev)}return t.prev=e,e.next=t,s.prev.next=s,n.length>0&&this.emitter.emit(o.Overflow,n.reverse()),this._size=u,t}}class R{constructor(h){a(this,"list");this.list=new y(h)}get capacity(){return this.list.capacity}get size(){return this.list.size}get[Symbol.toStringTag](){return R.name}set capacity(h){this.list.capacity=h}first(){return this.list.at(0)}front(){return this.list.at(0)}clear(){this.list.clear()}entries(){return this.list.entries()}forEach(h,t){this.list.forEach((i,s)=>h.call(t,i,s,this),t)}has(h){return this.list.has(h)}keys(){return this.list.keys()}last(){return this.list.at(-1)}pop(){return this.list.pop()}push(...h){return this.list.push(...h)}shift(){return this.list.shift()}[Symbol.iterator](){return this.values()}top(){return this.list.at(-1)}unshift(...h){return this.list.unshift(...h)}values(){return this.list.values()}addListener(h,t){return this.list.addListener(h,t),this}on(h,t){return this.list.on(h,t),this}prependListener(h,t){return this.list.prependListener(h,t),this}removeListener(h,t){return this.list.removeListener(h,t),this}}class E extends w{constructor(t){super();a(this,"_capacity");a(this,"root");a(this,"_size");a(this,"tail");if(this._capacity=1/0,this.root={value:void 0},this.clear(),t=t??1/0,c(t))return;if(S(t)){if(!g(t))throw new RangeError("Invalid capacity");this._capacity=t;return}const[i,s,e]=H(t);this._capacity=e,e>0&&(this.root.next=i,this.tail=s,this._size=e)}get capacity(){return this._capacity}get size(){return this._size}get[Symbol.toStringTag](){return E.name}set capacity(t){if(t=+t,!c(t)&&!g(t))throw new RangeError("Invalid capacity");if(this._capacity=t,this._size<=t)return;const i=this._size-t,[s]=b(this.root,i);this._size-=i,this._size<=0&&(this.tail=this.root),this.emitter.emit(o.Overflow,k(s))}at(t){if(t=v(_(t,-1/0),this._size),!!I(t,0,this._size))return++t==this._size?this.tail.value:x(this.root,t).value}clear(){this._size=0,this.root.next=void 0,this.tail=this.root}delete(t){if(t=v(_(t,-1/0),this._size),!I(t,0,this._size))return!1;const i=x(this.root,t);return i.next=i.next.next,--this._size,t==this._size&&(this.tail=i),!0}entries(){return $(this.root.next)}fill(t,i,s){i=_(i,0),i=z(v(i,this._size),0,this._size),s=_(s,this._size),s=z(v(s,this._size),0,this._size);let e=x(this.root,i+1);for(;i<s;)e.value=t,e=e.next,++i;return this}forEach(t,i){let s=this.root;for(let e=0;e<this._size;++e)s=s.next,t.call(i,s.value,e,this)}has(t){return P(this.root.next,t)}keys(){return Q(this.root.next)}pop(){if(this._size<=0)return;const t=this.tail.value;return this.tail=x(this.root,--this._size),this.tail.next=void 0,t}push(...t){return t.length<=0?this._size:this._capacity<=0?(this.emitter.emit(o.Overflow,t),this._size):(this.tail=this.append(this.tail,t),this._size)}set(t,i){if(t=v(_(t,-1/0),this._size),!I(t,0,this._size))return;const s=x(this.root,t+1),e=s.value;return s.value=i,e}shift(){if(this._size<=0)return;const t=this.root.next;return this.root.next=t.next,--this._size,this._size<=0&&(this.tail=this.root),t.value}slice(t,i){const s=new E;if(this._size<=0)return s;t=_(t,0),t=z(v(t,this._size),0,this._size),i=_(i,this._size),i=z(v(i,this._size),0,this._size);let e=x(this.root,t);for(;t<i;)e=e.next,s.push(e.value),++t;return s}splice(t,i,...s){const e=new E;if(this._size<=0)return e;t=_(t,0),t=z(v(t,this._size),0,this._size),i=_(i,0),i=z(i,0,this._size-t);let n=x(this.root,t);const[l,u]=b(n,i);return this._size-=i,e.root.next=l,e.tail=u??e.root,e._size=i,n=this.append(n,s),n.next==null&&(this.tail=n),e}[Symbol.iterator](){return q(this.root.next)}unshift(...t){let i=t.length;if(i<=0)return this._size;const s=this._capacity;if(s<=0)return this.emitter.emit(o.Overflow,t),this._size;const e=i<=s?0:i-s;if(i-=e,this._size+i>s){this._size=s-i;const u=x(this.root,this._size);this.emitter.emit(o.Overflow,k(u.next)),u.next=void 0,this.tail=u}e>0&&(this.emitter.emit(o.Overflow,t.slice(i)),t.length=i);const[n,l]=H(t);return l.next=this.root.next,this.root.next=n,this._size<=0&&(this.tail=l),this._size+=i,this._size}values(){return q(this.root.next)}append(t,i,s=0){const e=this.root,n=t.next,l=[],u=this._capacity;let f=this._size;const p=i.length;for(let d=s;d<p;++d){const O={value:i[d]};t.next=O,t=O,f<u?++f:(l.push(e.next.value),e.next=e.next.next)}return t.next=n,l.length>0&&this.emitter.emit(o.Overflow,l),this._size=f,t}}class F{constructor(h){a(this,"list");this.list=new E(h)}get capacity(){return this.list.capacity}get size(){return this.list.size}get[Symbol.toStringTag](){return F.name}set capacity(h){this.list.capacity=h}clear(){this.list.clear()}entries(){return this.list.entries()}first(){return this.list.at(0)}forEach(h,t){this.list.forEach((i,s)=>h.call(t,i,s,this),t)}front(){return this.list.at(0)}has(h){return this.list.has(h)}keys(){return this.list.keys()}push(...h){return this.list.push(...h)}shift(){return this.list.shift()}[Symbol.iterator](){return this.values()}values(){return this.list.values()}addListener(h,t){return this.list.addListener(h,t),this}on(h,t){return this.list.on(h,t),this}prependListener(h,t){return this.list.prependListener(h,t),this}removeListener(h,t){return this.list.removeListener(h,t),this}}class W{constructor(h){a(this,"list");this.list=new y(h)}get capacity(){return this.list.capacity}get size(){return this.list.size}get[Symbol.toStringTag](){return W.name}set capacity(h){this.list.capacity=h}clear(){this.list.clear()}entries(){return this.list.entries()}forEach(h,t){this.list.forEach((i,s)=>h.call(t,i,s,this),t)}has(h){return this.list.has(h)}keys(){return this.list.keys()}last(){return this.list.at(-1)}pop(){return this.list.pop()}push(...h){return this.list.push(...h)}[Symbol.iterator](){return this.values()}top(){return this.list.at(-1)}values(){return this.list.values()}addListener(h,t){return this.list.addListener(h,t),this}on(h,t){return this.list.on(h,t),this}prependListener(h,t){return this.list.prependListener(h,t),this}removeListener(h,t){return this.list.removeListener(h,t),this}}class T extends w{constructor(t){super();a(this,"_capacity");a(this,"map");if(this._capacity=1/0,this.map=new Map,t=t??1/0,!c(t)){if(S(t)){if(!g(t))throw new RangeError("Invalid capacity");this._capacity=t;return}this.map=new Map(t),this._capacity=this.map.size}}get capacity(){return this._capacity}get size(){return this.map.size}get[Symbol.toStringTag](){return T.name}set capacity(t){if(t=+t,!c(t)&&!g(t))throw new RangeError("Invalid capacity");if(t===this._capacity||(this._capacity=t,this.size<=t))return;if(t===0){const e=Array.from(this.map);this.clear(),this.emitter.emit(o.Overflow,e);return}const i=[],s=this.map.entries();for(let e=this.size-t;e>0;--e){const n=s.next().value;this.map.delete(n[0]),i.push(n)}this.emitter.emit(o.Overflow,i)}clear(){this.map.clear()}delete(t){return this.map.delete(t)}entries(){return this.map.entries()}forEach(t,i){for(const[s,e]of this.map.entries())t.call(i,e,s,this)}get(t){return this.map.get(t)}has(t){return this.map.has(t)}keys(){return this.map.keys()}set(t,i){if(this.capacity<1)return this.emitter.emit(o.Overflow,[[t,i]]),this;const s=[];if(!this.map.delete(t)&&this.size>=this.capacity){const e=this.map.entries().next().value;this.map.delete(e[0]),s.push(e)}return this.map.set(t,i),s.length>0&&this.emitter.emit(o.Overflow,s),this}[Symbol.iterator](){return this.map.entries()}values(){return this.map.values()}}class M extends w{constructor(t){super();a(this,"_capacity");a(this,"head");a(this,"isFinite");a(this,"next");a(this,"_size");a(this,"vals");if(this._capacity=m,this.head=0,this.isFinite=!1,this._size=0,this.next=0,this.vals=[],t=t??1/0,!c(t)){if(S(t)){if(!N(t))throw new RangeError("Invalid capacity");this._capacity=t,this.isFinite=!0;return}for(const i of t)this.vals.push(i);this._capacity=this.vals.length,this.isFinite=!0,this._size=this._capacity}}get capacity(){return this.isFinite?this._capacity:1/0}get size(){return this._size}get[Symbol.toStringTag](){return M.name}set capacity(t){if(t=+t,c(t))t=m,this.isFinite=!1;else if(N(t))this.isFinite=!0;else throw new RangeError("Invalid capacity");this._size<1?(this._capacity=t,this.clear()):t<this._capacity?this.shrink(t):t>this._capacity&&this.grow(t)}clear(){this.head=0,this._size=0,this.next=0,this.vals.length=0}*entries(){for(let t=0;t<this._size;++t)yield[t,this.vals[(this.head+t)%this._capacity]]}first(){return this.vals[this.head]}forEach(t,i){const s=this._size;for(let e=0;e<s&&e<this._size;++e){const n=this.vals[(this.head+e)%this._capacity];t.call(i,n,e,this)}}front(){return this.vals[this.head]}has(t){const i=this._size;for(let s=0;s<i;++s)if(t===this.vals[(this.head+s)%this._capacity])return!0;return!1}*keys(){for(let t=0;t<this._size;++t)yield t}push(...t){const i=t.length;if(i<1)return this._size;const s=this._capacity;if(s<1)return this.emit(t),this._size;const e=s-this._size;if(e>=i)return this._push(t,i),this._size;if(!this.isFinite)throw this._push(t,e),new Error("Out of memory");const n=i-s;if(this.evict(this.size+n),n>0)this.emit(t.splice(0,n));else if(n<0)return this._push(t,i),this._size;return this.vals=t,this._size=s,this._size}shift(){if(this._size<=0)return;--this._size;const t=this.vals[this.head];return this.vals[this.head]=void 0,++this.head>=this._capacity&&(this.head=0,this.vals.length=this.next),t}[Symbol.iterator](){return this.values()}*values(){for(let t=0;t<this._size;++t)yield this.vals[(this.head+t)%this._capacity]}emit(t){this.emitter.emit(o.Overflow,t)}evict(t){if(t<=0)return;const i=this._capacity-this.head,s=!this.isSequential();if(s&&i>t){this.emit(this.vals.slice(this.head,this.head+t)),this.vals.fill(void 0,this.head,this.head+t),this.head+=t,this._size-=t;return}if(s){if(this.emit(this.vals.slice(this.head,this.head+i)),this.vals.length=this.next,this.head=0,this._size-=i,t<=i)return;t-=i}if(t>=this._size){this.emit(this.vals.slice(this.head,this.head+this._size)),this.clear();return}this.emit(this.vals.slice(this.head,this.head+t)),this.vals.fill(void 0,this.head,this.head+t),this.head+=t,this._size-=t}grow(t){if(this.isSequential()){this.sequentialReset(t);return}if(this._size<=this.head){const i=this._size-this.next;this.vals.copyWithin(i,0,this.next),this.vals.copyWithin(0,this.head,this.head+i),this.vals.length=this._size,this.head=0,this.next=this._size}else if(this.head+this._size<=t)this.vals.length=this.head+this._size,this.vals.copyWithin(this._capacity,0,this.next),this.vals.fill(void 0,0,this.next),this.next=(this.head+this._size)%t;else{const i=t-this._capacity;this.vals.length=t,this.vals.copyWithin(this._capacity,0,i),this.vals.copyWithin(0,i,this.next);const s=Math.max(i,this.next-i);this.vals.fill(void 0,s,this.next),this.next-=i}this._capacity=t}isSequential(){return this.head<this.next||this.next<1}_push(t,i){const s=this._capacity,e=this.vals;let n=this.next;for(let l=0;l<i;++l)e[n]=t[l],++n>=s&&(n=0);this.next=n,this._size+=i}sequentialReset(t){const i=this.head+this._size;return i<=t?(this.vals.length=i,this.next=this.vals.length%t):this.head>=t?(this.vals.copyWithin(0,this.head,i),this.vals.length=this._size,this.head=0,this.next=this._size%t):(this.vals.copyWithin(0,t,i),this.vals.length=t,this.next=i-t),this._capacity=t,!0}shrink(t){if(this.evict(this._size-t),this.isSequential()){this.sequentialReset(t);return}const i=this._capacity-t;this.vals.copyWithin(this.head-i,this.head,this._capacity),this.vals.length=t,this.head-=i,this._capacity=t}}class A extends w{constructor(t){super();a(this,"_capacity");a(this,"set");if(this._capacity=1/0,this.set=new Set,t=t??1/0,!c(t)){if(S(t)){if(!g(t))throw new RangeError("Invalid capacity");this._capacity=t;return}this.set=new Set(t),this._capacity=this.set.size}}get capacity(){return this._capacity}get size(){return this.set.size}get[Symbol.toStringTag](){return A.name}set capacity(t){if(t=+t,!c(t)&&!g(t))throw new RangeError("Invalid capacity");if(t===this._capacity||(this._capacity=t,this.size<=t))return;if(t===0){const e=Array.from(this.set);this.clear(),this.emitter.emit(o.Overflow,e);return}const i=[],s=this.set.values();for(let e=this.size-t;e>0;--e){const n=s.next().value;this.set.delete(n),i.push(n)}this.emitter.emit(o.Overflow,i)}add(t){if(this.capacity<1)return this.emitter.emit(o.Overflow,[t]),this;const i=[];if(!this.set.delete(t)&&this.size>=this.capacity){const s=this.set.values().next().value;this.set.delete(s),i.push(s)}return this.set.add(t),i.length>0&&this.emitter.emit(o.Overflow,i),this}clear(){this.set.clear()}delete(t){return this.set.delete(t)}entries(){return this.set.entries()}forEach(t,i){for(const s of this.set.keys())t.call(i,s,s,this)}has(t){return this.set.has(t)}keys(){return this.set.keys()}values(){return this.set.keys()}[Symbol.iterator](){return this.set.values()}}class B extends w{constructor(t){super();a(this,"_capacity");a(this,"head");a(this,"isFinite");a(this,"next");a(this,"_size");a(this,"vals");if(this._capacity=m,this.head=0,this.isFinite=!1,this._size=0,this.next=0,this.vals=[],t=t??1/0,!c(t)){if(S(t)){if(!N(t))throw new RangeError("Invalid capacity");this._capacity=t,this.isFinite=!0;return}for(const i of t)this.vals.push(i);this._capacity=this.vals.length,this.isFinite=!0,this._size=this._capacity}}get capacity(){return this.isFinite?this._capacity:1/0}get size(){return this._size}get[Symbol.toStringTag](){return B.name}set capacity(t){if(t=+t,c(t))t=m,this.isFinite=!1;else if(N(t))this.isFinite=!0;else throw new RangeError("Invalid capacity");this._size<1?(this._capacity=t,this.clear()):t<this._capacity?this.shrink(t):t>this._capacity&&this.grow(t)}clear(){this.head=0,this._size=0,this.next=0,this.vals.length=0}*entries(){for(let t=0;t<this._size;++t)yield[t,this.vals[(this.head+t)%this._capacity]]}forEach(t,i){const s=this._size;for(let e=0;e<s&&e<this._size;++e){const n=this.vals[(this.head+e)%this._capacity];t.call(i,n,e,this)}}has(t){const i=this._size;for(let s=0;s<i;++s)if(t===this.vals[(this.head+s)%this._capacity])return!0;return!1}*keys(){for(let t=0;t<this._size;++t)yield t}last(){return this.top()}pop(){if(this._size<=0)return;const t=this.next>0?this.next-1:this.head+this._size-1;--this._size,this.next=t;const i=this.vals[t];return this.vals[t]=void 0,i}push(...t){const i=t.length;if(i<1)return this._size;const s=this._capacity;if(s<1)return this.emit(t),this._size;const e=s-this._size;if(e>=i)return this._push(t,i),this._size;if(!this.isFinite)throw this._push(t,e),new Error("Out of memory");const n=i-s;if(this.evict(this.size+n),n>0)this.emit(t.splice(0,n));else if(n<0)return this._push(t,i),this._size;return this.vals=t,this._size=s,this._size}[Symbol.iterator](){return this.values()}top(){if(!(this._size<1))return this.vals[(this.head+this._size-1)%this._capacity]}*values(){for(let t=0;t<this._size;++t)yield this.vals[(this.head+t)%this._capacity]}emit(t){this.emitter.emit(o.Overflow,t)}evict(t){if(t<=0)return;const i=this._capacity-this.head,s=!this.isSequential();if(s&&i>t){this.emit(this.vals.slice(this.head,this.head+t)),this.vals.fill(void 0,this.head,this.head+t),this.head+=t,this._size-=t;return}if(s){if(this.emit(this.vals.slice(this.head,this.head+i)),this.vals.length=this.next,this.head=0,this._size-=i,t<=i)return;t-=i}if(t>=this._size){this.emit(this.vals.slice(this.head,this.head+this._size)),this.clear();return}this.emit(this.vals.slice(this.head,this.head+t)),this.vals.fill(void 0,this.head,this.head+t),this.head+=t,this._size-=t}grow(t){if(this.isSequential()){this.sequentialReset(t);return}if(this._size<=this.head){const i=this._size-this.next;this.vals.copyWithin(i,0,this.next),this.vals.copyWithin(0,this.head,this.head+i),this.vals.length=this._size,this.head=0,this.next=this._size}else if(this.head+this._size<=t)this.vals.length=this.head+this._size,this.vals.copyWithin(this._capacity,0,this.next),this.vals.fill(void 0,0,this.next),this.next=(this.head+this._size)%t;else{const i=t-this._capacity;this.vals.length=t,this.vals.copyWithin(this._capacity,0,i),this.vals.copyWithin(0,i,this.next);const s=Math.max(i,this.next-i);this.vals.fill(void 0,s,this.next),this.next-=i}this._capacity=t}isSequential(){return this.head<this.next||this.next<1}_push(t,i){const s=this._capacity,e=this.vals;let n=this.next;for(let l=0;l<i;++l)e[n]=t[l],++n>=s&&(n=0);this.next=n,this._size+=i}sequentialReset(t){const i=this.head+this._size;return i<=t?(this.vals.length=i,this.next=this.vals.length%t):this.head>=t?(this.vals.copyWithin(0,this.head,i),this.vals.length=this._size,this.head=0,this.next=this._size%t):(this.vals.copyWithin(0,t,i),this.vals.length=t,this.next=i-t),this._capacity=t,!0}shrink(t){if(this.evict(this._size-t),this.isSequential()){this.sequentialReset(t);return}const i=this._capacity-t;this.vals.copyWithin(this.head-i,this.head,this._capacity),this.vals.length=t,this.head-=i,this._capacity=t}}exports.BoundedEvent=o;exports.CircularDeque=L;exports.CircularDoublyLinkedList=y;exports.CircularLinkedDeque=R;exports.CircularLinkedList=E;exports.CircularLinkedQueue=F;exports.CircularLinkedStack=W;exports.CircularMap=T;exports.CircularQueue=M;exports.CircularSet=A;exports.CircularStack=B;
//# sourceMappingURL=circle-ds.min.cjs.map
