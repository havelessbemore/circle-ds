/*! circle-ds
https://github.com/havelessbemore/circle-ds

MIT License

Copyright (C) 2024-2024 Michael Rojas <dev.michael.rojas@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE. */
"use strict";var ut=Object.defineProperty;var ft=(h,r,t)=>r in h?ut(h,r,{enumerable:!0,configurable:!0,writable:!0,value:t}):h[r]=t;var v=(h,r,t)=>(ft(h,typeof r!="symbol"?r+"":r,t),t);Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});const x={Overflow:"overflow"};function at(h){return h&&h.__esModule&&Object.prototype.hasOwnProperty.call(h,"default")?h.default:h}var it={exports:{}};(function(h){var r=Object.prototype.hasOwnProperty,t="~";function s(){}Object.create&&(s.prototype=Object.create(null),new s().__proto__||(t=!1));function e(_,l,u){this.fn=_,this.context=l,this.once=u||!1}function i(_,l,u,f,z){if(typeof u!="function")throw new TypeError("The listener must be a function");var y=new e(u,f||_,z),w=t?t+l:l;return _._events[w]?_._events[w].fn?_._events[w]=[_._events[w],y]:_._events[w].push(y):(_._events[w]=y,_._eventsCount++),_}function n(_,l){--_._eventsCount===0?_._events=new s:delete _._events[l]}function o(){this._events=new s,this._eventsCount=0}o.prototype.eventNames=function(){var l=[],u,f;if(this._eventsCount===0)return l;for(f in u=this._events)r.call(u,f)&&l.push(t?f.slice(1):f);return Object.getOwnPropertySymbols?l.concat(Object.getOwnPropertySymbols(u)):l},o.prototype.listeners=function(l){var u=t?t+l:l,f=this._events[u];if(!f)return[];if(f.fn)return[f.fn];for(var z=0,y=f.length,w=new Array(y);z<y;z++)w[z]=f[z].fn;return w},o.prototype.listenerCount=function(l){var u=t?t+l:l,f=this._events[u];return f?f.fn?1:f.length:0},o.prototype.emit=function(l,u,f,z,y,w){var I=t?t+l:l;if(!this._events[I])return!1;var a=this._events[I],S=arguments.length,N,m;if(a.fn){switch(a.once&&this.removeListener(l,a.fn,void 0,!0),S){case 1:return a.fn.call(a.context),!0;case 2:return a.fn.call(a.context,u),!0;case 3:return a.fn.call(a.context,u,f),!0;case 4:return a.fn.call(a.context,u,f,z),!0;case 5:return a.fn.call(a.context,u,f,z,y),!0;case 6:return a.fn.call(a.context,u,f,z,y,w),!0}for(m=1,N=new Array(S-1);m<S;m++)N[m-1]=arguments[m];a.fn.apply(a.context,N)}else{var _t=a.length,$;for(m=0;m<_t;m++)switch(a[m].once&&this.removeListener(l,a[m].fn,void 0,!0),S){case 1:a[m].fn.call(a[m].context);break;case 2:a[m].fn.call(a[m].context,u);break;case 3:a[m].fn.call(a[m].context,u,f);break;case 4:a[m].fn.call(a[m].context,u,f,z);break;default:if(!N)for($=1,N=new Array(S-1);$<S;$++)N[$-1]=arguments[$];a[m].fn.apply(a[m].context,N)}}return!0},o.prototype.on=function(l,u,f){return i(this,l,u,f,!1)},o.prototype.once=function(l,u,f){return i(this,l,u,f,!0)},o.prototype.removeListener=function(l,u,f,z){var y=t?t+l:l;if(!this._events[y])return this;if(!u)return n(this,y),this;var w=this._events[y];if(w.fn)w.fn===u&&(!z||w.once)&&(!f||w.context===f)&&n(this,y);else{for(var I=0,a=[],S=w.length;I<S;I++)(w[I].fn!==u||z&&!w[I].once||f&&w[I].context!==f)&&a.push(w[I]);a.length?this._events[y]=a.length===1?a[0]:a:n(this,y)}return this},o.prototype.removeAllListeners=function(l){var u;return l?(u=t?t+l:l,this._events[u]&&n(this,u)):(this._events=new s,this._eventsCount=0),this},o.prototype.off=o.prototype.removeListener,o.prototype.addListener=o.prototype.on,o.prefixed=t,o.EventEmitter=o,h.exports=o})(it);var ct=it.exports;const vt=at(ct);class W{constructor(r=new vt){v(this,"_emitter");this._emitter=r}addListener(r,t){return this._emitter.addListener(r,t),this}on(r,t){return this._emitter.on(r,t),this}removeListener(r,t){return this._emitter.removeListener(r,t),this}}const R=16383,j=4294967295,F=Number.MAX_SAFE_INTEGER;function rt(h){return Number.isInteger(h)&&h>=0&&h<=j}function O(h){return h===Number.POSITIVE_INFINITY}function pt(h){return typeof(h==null?void 0:h[Symbol.iterator])=="function"}function V(h){return Number.isInteger(h)&&h>=0&&h<=F}function P(h){return typeof h=="number"}function Y(h){return Number.isSafeInteger(h)&&h>=0}function p(h,r,t=0){return h>=t?h:h+r}function g(h,r,t){if(r>t)throw new RangeError("Invalid clamp range; min must be <= max");return h<=r?r:h<=t?h:t}function d(h,r,t){return h>=r&&h<t}function zt(h,r){return h>=0&&r>0?Math.log(h)/Math.log(r):NaN}function yt(h,r=1/0,t=Math.random){let s=0;for(;s<r&&t()<h;)++s;return s}function c(h,r=0){return h=+h,isNaN(h)?r:Math.trunc(h)}function*M(h,r){if(r<1)return;let t=[];r=Math.trunc(r);for(const s of h)t.push(s)>=r&&(yield t,t=[]);t.length>0&&(yield t)}class A extends W{constructor(t){super();v(this,"_capacity");v(this,"_head");v(this,"_isFinite");v(this,"_next");v(this,"_size");v(this,"_vals");if(this._capacity=j,this._head=0,this._isFinite=!1,this._size=0,this._next=0,this._vals=[],t!=null){if(P(t)){this.capacity=t;return}for(const s of M(t,R))this._insert(this._size,s);this._capacity=this._size,this._isFinite=!0}}get capacity(){return this._isFinite?this._capacity:1/0}get size(){return this._size}get[Symbol.toStringTag](){return A.name}set capacity(t){if(t=+t,O(t))t=j,this._isFinite=!1;else if(rt(t))this._isFinite=!0;else throw new RangeError("Invalid capacity");this._size<=0?(this._capacity=t,this.clear()):t<this._capacity?this._shrink(t):t>this._capacity&&this._grow(t)}at(t){if(t=p(c(t,-1/0),this._size),!!d(t,0,this._size))return this._vals[this._toIndex(t)]}clear(){this._size=0,this._head=0,this._next=0,this._vals.length=0}_copyWithin(t,s,e){if(t==s||s>=e)return;const i=this._capacity-1,n=this._vals,o=this._toRanges(s,e);if(t<=s||e<=t){t=this._toIndex(t);for(const[_,l]of o)for(let u=_;u<l;++u)n[t]=n[u],t=t<i?t+1:0}else{t=this._toIndex(t+(e-s));for(const[_,l]of o.reverse())for(let u=l-1;u>=_;--u)t=t>0?t-1:i,n[t]=n[u]}}delete(t){return t=p(c(t,-1/0),this._size),d(t,0,this._size)?(this._delete(t,1),!0):!1}_delete(t,s){this._copyWithin(t,t+s,this._size),this._pop(s)}*entries(){for(let t=0;t<this._size;++t)yield[t,this._vals[this._toIndex(t)]]}fill(t,s,e){const i=this._size;return s=g(p(c(s,0),i),0,i),e=g(p(c(e,i),i),s,i),this._fill(t,s,e),this}_fill(t,s,e){for(const[i,n]of this._toRanges(s,e))this._vals.fill(t,i,n)}first(){return this._size>0?this._vals[this._head]:void 0}forEach(t,s){const e=this._size;for(let i=0;i<e&&i<this._size;++i){const n=this._vals[this._toIndex(i)];t.call(s,n,i,this)}}has(t){const s=this._vals;for(const[e,i]of this._toRanges(0,this._size))for(let n=e;n<i;++n)if(t===s[n])return!0;return!1}*keys(){for(let t=0;t<this._size;++t)yield t}last(){return this._size>0?this._vals[this._toIndex(this._size-1)]:void 0}pop(){if(this._size<=0)return;const t=this._vals[this._toIndex(this._size-1)];return this._pop(1),t}_pop(t){const s=this._size-t;this._fill(void 0,s,this._size),this._next=this._toIndex(s),this._size=s}push(...t){return t.length<=0?this._size:this._capacity<=0?(this._overflow(t),this._size):(this._insert(this._size,t),this._size)}set(t,s){if(t=p(c(t,-1/0),this._size),!d(t,0,this._size))return;t=this._toIndex(t);const e=this._vals[t];return this._vals[t]=s,e}shift(){if(this._size<=0)return;const t=this._vals[this._head];return this._shift(1),t}_shift(t){this._fill(void 0,0,t),this._head=this._toIndex(t),this._size-=t}slice(t,s){const e=this._size;return t=g(p(c(t,0),e),0,e),s=g(p(c(s,e),e),t,e),this._toList(this._slice(t,s))}_slice(t,s){const e=this._vals,i=new Array(s-t);let n=0;for([t,s]of this._toRanges(t,s))for(let o=t;o<s;++o)i[n++]=e[o];return i}splice(t,s,...e){const i=this._size;t=g(p(c(t,0),i),0,i),s=g(c(s,0),0,i-t);const n=this._toList(this._slice(t,t+s));return this._splice(t,s,e),n}_splice(t,s,e=[]){const i=e.length,n=Math.min(s,i),o=this._vals;let _=0;for(const[l,u]of this._toRanges(t,t+n))for(let f=l;f<u;++f)o[f]=e[_++];s!=i&&(t+=n,s<i?this._insert(t,e,n):this._delete(t,s-i))}_insert(t,s,e=0,i=s.length){const n=i-e;let o=this._capacity-this._size;if(o>=n){this._safeInsert(t,s,e,i);return}if(!this._isFinite)throw this._safeInsert(t,s,e,e+o),new Error("Out of memory");if(t>0){const l=Math.min(t,n-o);this._overflow(this._slice(0,l)),this._shift(l),t-=l,o+=l}if(o>=n){this._safeInsert(t,s,e,i);return}const _=i-o;this._overflow(s.slice(e,_)),this._safePresert(0,s,_,i)}_safeInsert(t,s,e=0,i=s.length){const n=i-e,o=this._vals;this._copyWithin(t+n,t,this._size);for(const[_,l]of this._toRanges(t,t+n))for(let u=_;u<l;++u)o[u]=s[e++];this._size+=n,this._next=this._toIndex(this._size)}[Symbol.iterator](){return this.values()}unshift(...t){return t.length<=0?this._size:this._capacity<=0?(this._overflow(t),this._size):(this._presert(0,t),this._size)}_presert(t,s,e=0,i=s.length){const n=i-e;let o=this._capacity-this._size;if(o>=n){this._safePresert(t,s,e,i);return}if(!this._isFinite)throw this._safePresert(t,s,i-o,i),new Error("Out of memory");if(t<this._size){const l=Math.min(this._size-t,n-o);this._overflow(this._slice(this._size-l,this._size)),this._pop(l),o+=l}if(o>=n){this._safePresert(t,s,e,i);return}const _=e+o;this._overflow(s.slice(_,i)),this._safeInsert(this._size,s,e,_)}_safePresert(t,s,e=0,i=s.length){const n=this._capacity,o=i-e,_=this._vals,l=n-o;this._copyWithin(l,0,t),t+=l;for(const[u,f]of this._toRanges(t,t+o))for(let z=u;z<f;++z)_[z]=s[e++];this._size+=o,this._head=this._toIndex(l)}*values(){for(let t=0;t<this._size;++t)yield this._vals[this._toIndex(t)]}_overflow(t){this._emitter.emit(x.Overflow,t)}_grow(t){if(this._isSequential()){this._sequentialReset(t);return}if(this._size<=this._head){const s=this._size-this._next;this._vals.copyWithin(s,0,this._next),this._vals.copyWithin(0,this._head,this._head+s),this._vals.length=this._size,this._head=0,this._next=this._size}else if(this._head+this._size<=t)this._vals.length=this._head+this._size,this._vals.copyWithin(this._capacity,0,this._next),this._vals.fill(void 0,0,this._next),this._next=(this._head+this._size)%t;else{const s=t-this._capacity;this._vals.length=t,this._vals.copyWithin(this._capacity,0,s),this._vals.copyWithin(0,s,this._next);const e=Math.max(s,this._next-s);this._vals.fill(void 0,e,this._next),this._next-=s}this._capacity=t}_isSequential(){return this._head<this._next||this._next<=0}_sequentialReset(t){const s=this._head+this._size;return s<=t?(this._vals.length=s,this._next=this._vals.length%t):this._head>=t?(this._vals.copyWithin(0,this._head,s),this._vals.length=this._size,this._head=0,this._next=this._size%t):(this._vals.copyWithin(0,t,s),this._vals.length=t,this._next=s-t),this._capacity=t,!0}_shrink(t){if(this._size>t){const e=this._size-t;this._overflow(this._slice(0,e)),this._shift(e)}if(this._isSequential()){this._sequentialReset(t);return}const s=this._capacity-t;this._vals.copyWithin(this._head-s,this._head,this._capacity),this._vals.length=t,this._head-=s,this._capacity=t}_toIndex(t){return(this._head+t)%this._capacity}_toList(t){const s=new A(0);return s._vals=t,s._size=t.length,s._capacity=t.length,s}_toRanges(t,s){const e=this._head,i=this._capacity-e;return s<=i?[[e+t,e+s]]:t>=i?[[t-i,s-i]]:[[e+t,this._capacity],[0,s-i]]}}class B{constructor(r){v(this,"_list");this._list=new A(r)}get capacity(){return this._list.capacity}get size(){return this._list.size}get[Symbol.toStringTag](){return B.name}set capacity(r){this._list.capacity=r}clear(){this._list.clear()}entries(){return this._list.entries()}first(){return this._list.first()}forEach(r,t){return this._list.forEach((s,e)=>r.call(t,s,e,this))}front(){return this._list.first()}has(r){return this._list.has(r)}keys(){return this._list.keys()}last(){return this._list.last()}pop(){return this._list.pop()}push(...r){return this._list.push(...r)}shift(){return this._list.shift()}[Symbol.iterator](){return this._list.values()}top(){return this._list.last()}unshift(...r){return this._list.unshift(...r)}values(){return this._list.values()}addListener(r,t){return this._list.addListener(r,t),this}on(r,t){return this._list.on(r,t),this}removeListener(r,t){return this._list.removeListener(r,t),this}}function gt(h,r){const t={value:void 0};let s=0,e=t;for(;h!=null&&s<r;){const i={value:h.value};e.next=i,e=i,++s,h=h.next}return e.next=void 0,{root:t,size:s,tail:e}}function G(h,r){const t={value:void 0};if(h==null||r<=0)return{root:t,size:0,tail:t};const s=h.next,e=H(s,r-1);return h.next=e.next,e.next=void 0,t.next=s,{root:t,size:r,tail:e}}function*nt(h){for(let r=0;h!=null;++r)yield[r,h.value],h=h.next}function H(h,r){if(!(r<0)){for(let t=0;h!=null&&t<r;++t)h=h.next;return h}}function ht(h,r){for(;h!=null;){if(h.value===r)return!0;h=h.next}return!1}function*ot(h){for(let r=0;h!=null;++r)yield r,h=h.next}function wt(h){const r={value:void 0};let t=0,s=r;for(const e of h)s.next={value:e},s=s.next,++t;return s.next=void 0,{root:r,size:t,tail:s}}function*L(h){for(;h!=null;)yield h.value,h=h.next}function mt(h,r){const t={value:void 0};if(h==null||r<=0)return{root:t,size:0,tail:t};let s=0,e=t;for(;h!=null&&s<r;){const i={value:h.value};e.next=i,i.prev=e,e=i,++s,h=h.next}return t.prev=void 0,e.next=void 0,{root:t,size:s,tail:e}}function C(h,r){const t=G(h,r);if(t.size<=0)return t;t.root.next.prev=t.root;const s=h.next;return s!=null&&(s.prev=h),t}function tt(h,r){if(r>=0)return H(h,r);for(let t=0;h!=null&&t>r;--t)h=h.prev;return h}function xt(h){const r={value:void 0};let t=0,s=r;for(const e of h)s.next={prev:s,value:e},s=s.next,++t;return r.prev=void 0,s.next=void 0,{root:r,size:t,tail:s}}class E extends W{constructor(t){super();v(this,"_capacity");v(this,"_isFinite");v(this,"_root");v(this,"_size");v(this,"_tail");if(this._capacity=F,this._isFinite=!1,this._root={value:void 0},this._size=0,this._tail=this._root,t!=null){if(P(t)){this.capacity=t;return}for(const s of M(t,R))this._insert(this._size,s);this._capacity=this._size,this._isFinite=!0}}get capacity(){return this._isFinite?this._capacity:1/0}get size(){return this._size}get[Symbol.toStringTag](){return E.name}set capacity(t){if(t=+t,t=+t,O(t))t=F,this._isFinite=!1;else if(V(t))this._isFinite=!0;else throw new RangeError("Invalid capacity");if(this._capacity=t,this._size<=t)return;const s=this._size-t,{root:e}=C(this._root,s);this._size-=s,this._size<=0&&(this._tail=this._root);for(const i of M(L(e.next),R))this._overflow(i)}at(t){if(t=p(c(t,-1/0),this._size),!!d(t,0,this._size))return this._get(t).value}clear(){this._size=0,this._tail=this._root,this._root.next=void 0}delete(t){if(t=p(c(t,-1/0),this._size),!d(t,0,this._size))return!1;const s=this._get(t);return s.prev.next=s.next,s.next!=null&&(s.next.prev=s.prev),--this._size,!0}entries(){return nt(this._root.next)}fill(t,s,e){s=c(s,0),s=g(p(s,this._size),0,this._size),e=c(e,this._size),e=g(p(e,this._size),0,this._size);let i=this._get(s);for(;s<e;)i.value=t,i=i.next,++s;return this}forEach(t,s){let e=this._root;for(let i=0;i<this._size;++i)e=e.next,t.call(s,e.value,i,this)}has(t){return ht(this._root.next,t)}keys(){return ot(this._root.next)}pop(){if(this._size<=0)return;const{root:t}=this._cut(this._size-1,1);return t.next.value}push(...t){return this._insert(this._size,t),this._size}set(t,s){if(t=p(c(t,-1/0),this._size),!d(t,0,this._size))return;const e=this._get(t),i=e.value;return e.value=s,i}shift(){if(this._size<=0)return;const{root:t}=this._cut(0,1);return t.next.value}slice(t,s){const e=this._size;if(t=g(p(c(t,0),e),0,e),s=g(p(c(s,e),e),t,e),t>=s)return new E(0);const i=this._get(t),n=mt(i,s-t),o=new E(n.size);return o._root=n.root,o._size=n.size,o._tail=n.tail,o}splice(t,s,...e){const i=this._size;t=g(p(c(t,0),i),0,i),s=g(c(s,0),0,i-t);let n;if(s<=0)n=new E(0);else{const{root:o,size:_,tail:l}=this._cut(t,s);n=new E(_),n._root=o,n._size=_,n._tail=l}return this._insert(t,e),n}[Symbol.iterator](){return L(this._root.next)}unshift(...t){return this._presert(0,t),this._size}values(){return L(this._root.next)}_cut(t,s){const e=this._get(t-1),i=C(e,s);return this._size-=s,t>=this._size&&(this._tail=e),i}_get(t){const s=this._size/2;return++t<=s?tt(this._root,t):tt(this._tail,t-this._size)}_insert(t,s){const e=s.length;if(e<=0)return;if(this._capacity<=0){this._overflow(s);return}let i=this._capacity-this._size;if(i>=e){this._safeInsert(t,s);return}if(!this._isFinite)throw this._safeInsert(t,s.slice(0,i)),new Error("Out of memory");if(t>0){const o=Math.min(t,e-i),{root:_}=this._cut(0,o);this._overflow(L(_.next)),t-=o,i+=o}if(i>=e){this._safeInsert(t,s);return}const n=s.length-i;this._overflow(s.slice(0,n)),this._safeInsert(0,s.slice(n))}_overflow(t){Array.isArray(t)||(t=Array.from(t)),this._emitter.emit(x.Overflow,t)}_presert(t,s){const e=s.length;if(e<=0)return;if(this._capacity<=0){this._overflow(s);return}let i=this._capacity-this._size;if(i>=e){this._safeInsert(t,s);return}if(!this._isFinite)throw this._safeInsert(0,s.slice(s.length-i)),new Error("Out of memory");if(t<this._size){const n=Math.min(this._size-t,e-i),{root:o}=this._cut(this._size-n,n);this._overflow(L(o.next)),i+=n}if(i>=e){this._safeInsert(t,s);return}this._overflow(s.slice(i)),this._safeInsert(this._size,s.slice(0,i))}_safeInsert(t,s){if(s.length<=0)return;const{root:e,size:i,tail:n}=xt(s),o=e.next,_=this._get(t-1),l=_.next;o.prev=_,n.next=l,_.next=o,l!=null&&(l.prev=n),this._tail=t<this._size?this._tail:n,this._size+=i}}class X{constructor(r){v(this,"_list");this._list=new E(r)}get capacity(){return this._list.capacity}get size(){return this._list.size}get[Symbol.toStringTag](){return X.name}set capacity(r){this._list.capacity=r}first(){return this._list.at(0)}front(){return this._list.at(0)}clear(){this._list.clear()}entries(){return this._list.entries()}forEach(r,t){this._list.forEach((s,e)=>r.call(t,s,e,this),t)}has(r){return this._list.has(r)}keys(){return this._list.keys()}last(){return this._list.at(-1)}pop(){return this._list.pop()}push(...r){return this._list.push(...r)}shift(){return this._list.shift()}[Symbol.iterator](){return this.values()}top(){return this._list.at(-1)}unshift(...r){return this._list.unshift(...r)}values(){return this._list.values()}addListener(r,t){return this._list.addListener(r,t),this}on(r,t){return this._list.on(r,t),this}removeListener(r,t){return this._list.removeListener(r,t),this}}class b extends W{constructor(t){super();v(this,"_capacity");v(this,"_isFinite");v(this,"_root");v(this,"_size");v(this,"_tail");if(this._capacity=F,this._isFinite=!1,this._root={value:void 0},this._size=0,this._tail=this._root,t!=null){if(P(t)){this.capacity=t;return}for(const s of M(t,R))this._insert(this._size,s);this._capacity=this._size,this._isFinite=!0}}get capacity(){return this._isFinite?this._capacity:1/0}get size(){return this._size}get[Symbol.toStringTag](){return b.name}set capacity(t){if(t=+t,O(t))t=F,this._isFinite=!1;else if(V(t))this._isFinite=!0;else throw new RangeError("Invalid capacity");if(this._capacity=t,this._size<=t)return;const s=this._size-t,{root:e}=G(this._root,s);this._size-=s,this._size<=0&&(this._tail=this._root),this._overflow(e.next)}at(t){if(t=p(c(t,-1/0),this._size),!!d(t,0,this._size))return this._get(t).value}clear(){this._size=0,this._tail=this._root,this._root.next=void 0}delete(t){return t=p(c(t,-1/0),this._size),d(t,0,this._size)?(this._cut(t,1),!0):!1}entries(){return nt(this._root.next)}fill(t,s,e){const i=this._size;if(s=g(p(c(s,0),i),0,i),e=g(p(c(e,i),i),s,i),s>=e)return this;let n=this._get(s);for(let o=s;o<e;++o)n.value=t,n=n.next;return this}forEach(t,s){let e=this._root;for(let i=0;i<this._size;++i)e=e.next,t.call(s,e.value,i,this)}has(t){return ht(this._root.next,t)}keys(){return ot(this._root.next)}pop(){if(this._size<=0)return;const{root:t}=this._cut(this._size-1,1);return t.next.value}push(...t){return this._insert(this._size,t),this._size}set(t,s){if(t=p(c(t,-1/0),this._size),!d(t,0,this._size))return;const e=this._get(t),i=e.value;return e.value=s,i}shift(){if(this._size<=0)return;const{root:t}=this._cut(0,1);return t.next.value}slice(t,s){const e=this._size;if(t=g(p(c(t,0),e),0,e),s=g(p(c(s,e),e),t,e),t>=s)return new b(0);const i=this._get(t),n=gt(i,s-t),o=new b(n.size);return o._root=n.root,o._size=n.size,o._tail=n.tail,o}splice(t,s,...e){const i=this._size;t=g(p(c(t,0),i),0,i),s=g(c(s,0),0,i-t);let n;if(s<=0)n=new b(0);else{const{root:o,size:_,tail:l}=this._cut(t,s);n=new b(s),n._root=o,n._size=_,n._tail=l}return this._insert(t,e),n}[Symbol.iterator](){return L(this._root.next)}unshift(...t){return this._presert(0,t),this._size}values(){return L(this._root.next)}_cut(t,s){const e=this._get(t-1),i=G(e,s);return this._size-=s,t>=this._size&&(this._tail=e),i}_get(t){return++t==this._size?this._tail:H(this._root,t)}_insert(t,s){const e=s.length;if(e<=0)return;if(this._capacity<=0){this._overflow(s);return}let i=this._capacity-this._size;if(i>=e){this._safeInsert(t,s);return}if(!this._isFinite)throw this._safeInsert(t,s.slice(0,i)),new Error("Out of memory");if(t>0){const o=Math.min(t,e-i),{root:_}=this._cut(0,o);this._overflow(_.next),t-=o,i+=o}if(i>=e){this._safeInsert(t,s);return}const n=s.length-i;this._overflow(s.slice(0,n)),this._safeInsert(0,s.slice(n))}_overflow(t){if(t!=null){if(Array.isArray(t)){this._emitter.emit(x.Overflow,t);return}for(const s of M(L(t),R))this._emitter.emit(x.Overflow,s)}}_presert(t,s){const e=s.length;if(e<=0)return;if(this._capacity<=0){this._overflow(s);return}let i=this._capacity-this._size;if(i>=e){this._safeInsert(t,s);return}if(!this._isFinite)throw this._safeInsert(0,s.slice(s.length-i)),new Error("Out of memory");if(t<this._size){const n=Math.min(this._size-t,e-i),{root:o}=this._cut(this._size-n,n);this._overflow(o.next),i+=n}if(i>=e){this._safeInsert(t,s);return}this._overflow(s.slice(i)),this._safeInsert(this._size,s.slice(0,i))}_safeInsert(t,s){if(s.length<=0)return;const{root:e,size:i,tail:n}=wt(s),o=this._get(t-1);n.next=o.next,o.next=e.next,this._tail=t<this._size?this._tail:n,this._size+=i}}function st(h,r){return h<=0||r<=1?1:h>=1?1/0:Math.ceil(zt(r,1/h))}function dt(h,r,t){let s=0;const e=k(void 0),i=[e],n=[-1];if(t<=0)return{root:e,size:s,tails:i};let o=q(h,r-1).node;o=o.levels[0].next;let _=1;for(;o!=null&&s<t;){const l=o.levels.length;for(;_<l;)i[_]=e,n[_]=-1,++_;const u=k(o.value,l);for(let y=0;y<l;++y)i[y].levels[y]={next:u,span:s-n[y]},i[y]=u,n[y]=s;const{next:f,span:z}=o.levels[0];s+=z,o=f}s=n[0]+1;for(let l=0;l<_;++l)i[l].levels[l]={next:void 0,span:s-n[l]};return{root:e,size:s,tails:i}}function It(h,r,t){const s=k(void 0),e={root:s,size:0,tails:[s]};if(t<=0)return e;const i=lt(h,r-1),n=Ft(Array.from(i),t),o=n[0].index+n[0].node.levels[0].span;let _=h.root.levels.length;r=i[0].index+i[0].node.levels[0].span,t=o-r;let l;for(l=0;l<_;++l){const u=i[l],f=n[l];if(u.index>=f.index)break;let z=u.node.levels[l],y=u.index+z.span-r;s.levels[l]={next:z.next,span:y},z=f.node.levels[l],y=f.index-u.index+(z.span-t),u.node.levels[l]={next:z.next,span:y},f.node.levels[l]={next:void 0,span:o-f.index},e.tails[l]=f.node}if(l<_)for(;l<_;){const u=i[l],{next:f,span:z}=u.node.levels[l];u.node.levels[l]={next:f,span:z-t},++l}else{const u=h.root.levels;for(;l>1&&u[l-1].next==null;)--l;_=l,u.length=_,h.tails.length=_}if(o>=h.size)for(l=0;l<_;++l)h.tails[l]=i[l].node;return h.size-=t,e.size=t,e}function*Et(h){let r=0;for(;h!=null;){yield[r,h.value];const{next:t,span:s}=h.levels[0];h=t,r+=s}}function q(h,r){if(r<0)return{index:-1,node:h.root};const t=h.tails;if(r>=h.size-t[0].levels[0].span)return{index:h.size-t[0].levels[0].span,node:t[0]};let s,e=-1,i=h.root;for(s=i.levels.length-1;s>=0&&e<r;--s){const n=h.size-t[s].levels[s].span;if(n>r)break;e=n,i=t[s]}for(;s>=0&&e<r;){const{next:n,span:o}=i.levels[s];e+o>r||n==null?--s:(e+=o,i=n)}return{index:e,node:i}}function lt(h,r){const t=Nt(h.root,-1);if(r<0)return t;const s=t.length,e=h.tails;if(r>=h.size-e[0].levels[0].span){for(let n=0;n<s;++n){const o=h.size-e[n].levels[n].span;t[n]={index:o,node:e[n]}}return t}let i;for(i=s-1;i>=0&&t[i].index<r;--i){const n=h.size-e[i].levels[i].span;if(n>r)break;t[i]={index:n,node:e[i]}}for(;i>=0&&t[i].index<r;){const{index:n,node:o}=t[i],{next:_,span:l}=o.levels[i];n+l>r||_==null?--i:t[i]={index:n+l,node:_}}if(i>0){const{index:n,node:o}=t[i];for(let _=0;_<i;++_)t[_]={index:n,node:o}}return t}function St(h,r){for(;h!=null;){if(h.value===r)return!0;h=h.levels[0].next}return!1}function Lt(h,r,t){if(t.size<=0)return;const s=t.tails.length;for(let n=h.tails.length;n<s;++n)h.root.levels[n]={next:void 0,span:h.size+1},h.tails[n]=h.root;const e=lt(h,r-1);for(let n=0;n<s;++n){const o=e[n].node,_=t.tails[n],l=o.levels[n],u=_.levels[n];let f=e[n].index-r+l.span+u.span;_.levels[n]={next:l.next,span:f};const z=t.root.levels[n];f=r-e[n].index+(z.span-1),o.levels[n]={next:z.next,span:f}}const i=h.tails.length;for(let n=s;n<i;++n){const o=e[n].node.levels,{next:_,span:l}=o[n];o[n]={next:_,span:l+t.size}}if(r===h.size)for(let n=0;n<s;++n)h.tails[n]=t.tails[n];h.size+=t.size}function*bt(h){let r=0;for(;h!=null;){yield r;const{next:t,span:s}=h.levels[0];h=t,r+=s}}function Ft(h,r){if(r<=0||h.length<=0)return h;let t=h.length-1;const s=h[0].index+r;for(;t>=0&&h[t].index<s;){const{index:e,node:i}=h[t],{next:n,span:o}=i.levels[t];e+o>s||n==null?--t:h[t]={index:e+o,node:n}}if(t>0){const{index:e,node:i}=h[t];for(let n=0;n<t;++n)h[n]={index:e,node:i}}return h}function Ot(h,r){let t=-1/0;const s=Math.min(h.length,r.length);for(let n=0;n<s;++n)t<h[n]&&(t=h[n]);if(t<=0||s<=0){const n=k(void 0);return{root:n,size:0,tails:[n]}}const e=k(void 0,t,s+1),i=new Array(t).fill(e);for(let n=0;n<s;++n){t=h[n];const o=s-n,_=k(r[n],t,o);for(let l=0;l<t;++l){const u=i[l].levels;u[l]={next:_,span:u[l].span-o},i[l]=_}}return{root:e,size:s,tails:i}}function k(h,r=1,t=1,s){const e=new Array(r);for(let i=0;i<r;++i)e[i]={next:s,span:t};return{value:h,levels:e}}function Nt(h,r=0){const t=h.levels.length,s=new Array(t);for(let e=0;e<t;++e)s[e]={index:r,node:h};return s}function kt(h,r){if(!(h==null||h.levels.length<=r))for(;h!=null;){const t=h.levels[r].next;h.levels.length=r,h=t}}function*et(h){for(;h!=null;)yield h.value,h=h.levels[0].next}class T extends W{constructor(t){super();v(this,"_capacity");v(this,"_isFinite");v(this,"_maxLevel");v(this,"_p");v(this,"_root");v(this,"_size");v(this,"_tails");if(this._capacity=F,this._isFinite=!1,this._p=.5,this._maxLevel=st(this._p,F),this._root=k(void 0),this._size=0,this._tails=[this._root],t!=null){if(P(t)){this.capacity=t;return}if(!pt(t)){this.capacity=t.capacity??this._capacity,this.p=t.p??this._p;const s=t.expectedSize??this._capacity;this.maxLevel=t.maxLevel??st(this._p,s);return}for(const s of M(t,R))this._insert(this._size,s);this._capacity=this._size,this._isFinite=!0}}get capacity(){return this._isFinite?this._capacity:1/0}get levels(){return this._root.levels.length}get maxLevel(){return this._maxLevel}get p(){return this._p}get size(){return this._size}get[Symbol.toStringTag](){return T.name}set capacity(t){if(t=+t,O(t))t=F,this._isFinite=!1;else if(V(t))this._isFinite=!0;else throw new RangeError("Invalid capacity");if(this._capacity=t,this._size<=t)return;const{root:s}=this._cut(0,this._size-t);this._overflow(s.levels[0].next)}set maxLevel(t){if(t=+t,!rt(t)||t<=0)throw new RangeError("Invalid maxLevel");this._maxLevel=t,t<this.levels&&kt(this._root,t)}set p(t){if(t=+t,isNaN(t)||t<0||t>1)throw new RangeError("Invalid p");this._p=t}at(t){if(t=p(c(t,-1/0),this._size),!d(t,0,this._size))return;const s={root:this._root,size:this._size,tails:this._tails};return q(s,t).node.value}clear(){this._size=0,this._tails=[this._root],this._root.levels.length=1,this._root.levels[0]={next:void 0,span:1}}delete(t){return t=p(c(t,-1/0),this._size),d(t,0,this._size)?(this._cut(t,1),!0):!1}entries(){return Et(this._root.levels[0].next)}fill(t,s,e){const i=this._size;if(s=g(p(c(s,0),i),0,i),e=g(p(c(e,i),i),s,i),s>=e)return this;const n={root:this._root,size:this._size,tails:this._tails};let{node:o}=q(n,s);for(let _=s;_<e;++_)o.value=t,o=o.levels[0].next;return this}forEach(t,s){let e=this._root;for(let i=0;i<this._size;++i)e=e.levels[0].next,t.call(s,e.value,i,this)}has(t){return St(this._root.levels[0].next,t)}keys(){return bt(this._root.levels[0].next)}pop(){if(this._size<=0)return;const{root:t}=this._cut(this._size-1,1);return t.levels[0].next.value}push(...t){return this._insert(this._size,t),this._size}set(t,s){if(t=p(c(t,-1/0),this._size),!d(t,0,this._size))return;const e={root:this._root,size:this._size,tails:this._tails},{node:i}=q(e,t),n=i.value;return i.value=s,n}shift(){if(this._size<=0)return;const{root:t}=this._cut(0,1);return t.levels[0].next.value}slice(t,s){const e=this._size;t=g(p(c(t,0),e),0,e),s=g(p(c(s,e),e),t,e);const i={capacity:0,p:this._p,maxLevel:this._maxLevel};if(t>=s)return new T(i);const n={root:this._root,size:this._size,tails:this._tails},o=dt(n,t,s-t);i.capacity=o.size;const _=new T(i);return _._root=o.root,_._tails=o.tails,_._size=o.size,_}splice(t,s,...e){const i=this._size;t=g(p(c(t,0),i),0,i),s=g(c(s,0),0,i-t);const n=this._cut(t,s);this._insert(t,e);const o=new T({capacity:s,p:this._p,maxLevel:this._maxLevel});return o._root=n.root,o._tails=n.tails,o._size=n.size,o}[Symbol.iterator](){return this.values()}unshift(...t){return this._presert(0,t),this._size}values(){return et(this._root.levels[0].next)}_cut(t,s){const e={root:this._root,size:this._size,tails:this._tails},i=It(e,t,s);return this._size=e.size,this._tails=e.tails,i}_genLevels(t){const s=new Array(t),e=this._maxLevel-1;for(let i=0;i<t;++i)s[i]=1+yt(this._p,e);return s}_insert(t,s){const e=s.length;if(e<=0)return;if(this._capacity<=0){this._overflow(s);return}let i=this._capacity-this._size;if(i>=e){this._safeInsert(t,s);return}if(!this._isFinite)throw this._safeInsert(t,s.slice(0,i)),new Error("Out of memory");if(t>0){const o=Math.min(t,e-i),{root:_}=this._cut(0,o);this._overflow(_.levels[0].next),t-=o,i+=o}if(i>=e){this._safeInsert(t,s);return}const n=s.length-i;this._overflow(s.slice(0,n)),this._safeInsert(0,s.slice(n))}_overflow(t){if(t!=null){if(Array.isArray(t)){this._emitter.emit(x.Overflow,t);return}for(const s of M(et(t),R))this._emitter.emit(x.Overflow,s)}}_presert(t,s){const e=s.length;if(e<=0)return;if(this._capacity<=0){this._overflow(s);return}let i=this._capacity-this._size;if(i>=e){this._safeInsert(t,s);return}if(!this._isFinite)throw this._safeInsert(0,s.slice(s.length-i)),new Error("Out of memory");if(t<this._size){const n=Math.min(this._size-t,e-i),{root:o}=this._cut(this._size-n,n);this._overflow(o.levels[0].next),i+=n}if(i>=e){this._safeInsert(t,s);return}this._overflow(s.slice(i)),this._safeInsert(this._size,s.slice(0,i))}_safeInsert(t,s){const e=this._genLevels(s.length),i=Ot(e,s),n={root:this._root,size:this._size,tails:this._tails};Lt(n,t,i),this._size=n.size,this._tails=n.tails}}class Q extends W{constructor(t){super();v(this,"_capacity");v(this,"_map");if(this._capacity=1/0,this._map=new Map,t=t??1/0,!O(t)){if(P(t)){if(!Y(t))throw new RangeError("Invalid capacity");this._capacity=t;return}this._map=new Map(t),this._capacity=this._map.size}}get capacity(){return this._capacity}get size(){return this._map.size}get[Symbol.toStringTag](){return Q.name}set capacity(t){if(t=+t,!O(t)&&!Y(t))throw new RangeError("Invalid capacity");if(t===this._capacity||(this._capacity=t,this.size<=t))return;if(t===0){const i=Array.from(this._map);this.clear(),this._emitter.emit(x.Overflow,i);return}const s=[],e=this._map.entries();for(let i=this.size-t;i>0;--i){const n=e.next().value;this._map.delete(n[0]),s.push(n)}this._emitter.emit(x.Overflow,s)}clear(){this._map.clear()}delete(t){return this._map.delete(t)}entries(){return this._map.entries()}forEach(t,s){for(const[e,i]of this._map.entries())t.call(s,i,e,this)}get(t){return this._map.get(t)}has(t){return this._map.has(t)}keys(){return this._map.keys()}set(t,s){if(this.capacity<1)return this._emitter.emit(x.Overflow,[[t,s]]),this;const e=[];if(!this._map.delete(t)&&this.size>=this.capacity){const i=this._map.entries().next().value;this._map.delete(i[0]),e.push(i)}return this._map.set(t,s),e.length>0&&this._emitter.emit(x.Overflow,e),this}[Symbol.iterator](){return this._map.entries()}values(){return this._map.values()}}class D{constructor(r){v(this,"_list");this._list=new b(r)}get capacity(){return this._list.capacity}get size(){return this._list.size}get[Symbol.toStringTag](){return D.name}set capacity(r){this._list.capacity=r}clear(){this._list.clear()}entries(){return this._list.entries()}first(){return this._list.at(0)}forEach(r,t){this._list.forEach((s,e)=>r.call(t,s,e,this),t)}front(){return this._list.at(0)}has(r){return this._list.has(r)}keys(){return this._list.keys()}push(...r){return this._list.push(...r)}shift(){return this._list.shift()}[Symbol.iterator](){return this.values()}values(){return this._list.values()}addListener(r,t){return this._list.addListener(r,t),this}on(r,t){return this._list.on(r,t),this}removeListener(r,t){return this._list.removeListener(r,t),this}}class K{constructor(r){v(this,"_list");this._list=new A(r)}get capacity(){return this._list.capacity}get size(){return this._list.size}get[Symbol.toStringTag](){return K.name}set capacity(r){this._list.capacity=r}clear(){this._list.clear()}entries(){return this._list.entries()}first(){return this._list.first()}forEach(r,t){return this._list.forEach((s,e)=>r.call(t,s,e,this))}front(){return this._list.first()}has(r){return this._list.has(r)}keys(){return this._list.keys()}push(...r){return this._list.push(...r)}shift(){return this._list.shift()}[Symbol.iterator](){return this._list.values()}values(){return this._list.values()}addListener(r,t){return this._list.addListener(r,t),this}on(r,t){return this._list.on(r,t),this}removeListener(r,t){return this._list.removeListener(r,t),this}}class J extends W{constructor(t){super();v(this,"_capacity");v(this,"_set");if(this._capacity=1/0,this._set=new Set,t=t??1/0,!O(t)){if(P(t)){if(!Y(t))throw new RangeError("Invalid capacity");this._capacity=t;return}this._set=new Set(t),this._capacity=this._set.size}}get capacity(){return this._capacity}get size(){return this._set.size}get[Symbol.toStringTag](){return J.name}set capacity(t){if(t=+t,!O(t)&&!Y(t))throw new RangeError("Invalid capacity");if(t===this._capacity||(this._capacity=t,this.size<=t))return;if(t===0){const i=Array.from(this._set);this.clear(),this._emitter.emit(x.Overflow,i);return}const s=[],e=this._set.values();for(let i=this.size-t;i>0;--i){const n=e.next().value;this._set.delete(n),s.push(n)}this._emitter.emit(x.Overflow,s)}add(t){if(this.capacity<1)return this._emitter.emit(x.Overflow,[t]),this;const s=[];if(!this._set.delete(t)&&this.size>=this.capacity){const e=this._set.values().next().value;this._set.delete(e),s.push(e)}return this._set.add(t),s.length>0&&this._emitter.emit(x.Overflow,s),this}clear(){this._set.clear()}delete(t){return this._set.delete(t)}entries(){return this._set.entries()}forEach(t,s){for(const e of this._set.keys())t.call(s,e,e,this)}has(t){return this._set.has(t)}keys(){return this._set.keys()}values(){return this._set.keys()}[Symbol.iterator](){return this._set.values()}}class U{constructor(r){v(this,"_list");this._list=new E(r)}get capacity(){return this._list.capacity}get size(){return this._list.size}get[Symbol.toStringTag](){return U.name}set capacity(r){this._list.capacity=r}clear(){this._list.clear()}entries(){return this._list.entries()}forEach(r,t){this._list.forEach((s,e)=>r.call(t,s,e,this),t)}has(r){return this._list.has(r)}keys(){return this._list.keys()}last(){return this._list.at(-1)}pop(){return this._list.pop()}push(...r){return this._list.push(...r)}[Symbol.iterator](){return this.values()}top(){return this._list.at(-1)}values(){return this._list.values()}addListener(r,t){return this._list.addListener(r,t),this}on(r,t){return this._list.on(r,t),this}removeListener(r,t){return this._list.removeListener(r,t),this}}class Z{constructor(r){v(this,"_list");this._list=new A(r)}get capacity(){return this._list.capacity}get size(){return this._list.size}get[Symbol.toStringTag](){return Z.name}set capacity(r){this._list.capacity=r}clear(){this._list.clear()}entries(){return this._list.entries()}forEach(r,t){return this._list.forEach((s,e)=>r.call(t,s,e,this))}has(r){return this._list.has(r)}keys(){return this._list.keys()}last(){return this._list.last()}pop(){return this._list.pop()}push(...r){return this._list.push(...r)}[Symbol.iterator](){return this._list.values()}top(){return this._list.last()}values(){return this._list.values()}addListener(r,t){return this._list.addListener(r,t),this}on(r,t){return this._list.on(r,t),this}removeListener(r,t){return this._list.removeListener(r,t),this}}exports.BoundedEvent=x;exports.CircularArrayList=A;exports.CircularDeque=B;exports.CircularDoublyLinkedList=E;exports.CircularLinkedDeque=X;exports.CircularLinkedList=b;exports.CircularLinkedQueue=D;exports.CircularLinkedStack=U;exports.CircularMap=Q;exports.CircularQueue=K;exports.CircularSet=J;exports.CircularSkipList=T;exports.CircularStack=Z;
//# sourceMappingURL=circle-ds.min.cjs.map
