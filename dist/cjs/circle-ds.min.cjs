/*! circle-ds
https://github.com/havelessbemore/circle-ds

Copyright (C) 2024-2024 Michael Rojas <dev.michael.rojas@gmail.com>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
 */
"use strict";var O=Object.defineProperty;var R=(l,o,t)=>o in l?O(l,o,{enumerable:!0,configurable:!0,writable:!0,value:t}):l[o]=t;var n=(l,o,t)=>(R(l,typeof o!="symbol"?o+"":o,t),t);Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});const a={Overflow:"overflow"},b={};class d{constructor(){n(this,"emitter");this.emitter=new b}addListener(o,t){return this.emitter.addListener(o,t),this}on(o,t){return this.emitter.on(o,t),this}prependListener(o,t){return this.emitter.prependListener(o,t),this}removeListener(o,t){return this.emitter.removeListener(o,t),this}}const k=4294967295;function p(l){return Number.isInteger(l)&&l>=0&&l<=k}function u(l){return l===Number.POSITIVE_INFINITY}function c(l){return l===null}function z(l){return typeof l=="number"}function f(l){return Number.isSafeInteger(l)&&l>=0}function x(l){return typeof l>"u"}class m extends d{constructor(t){super();n(this,"_capacity");n(this,"root");n(this,"_size");if(this._capacity=1/0,this.root={value:void 0},this.root.next=this.root,this.root.prev=this.root,this._size=0,x(t)||c(t)||u(t))return;if(z(t)){if(!f(t))throw new RangeError("Invalid capacity");this._capacity=t;return}let i=this.root.prev;for(const e of t)i.next={next:this.root,prev:i,value:e},i=i.next,this.root.prev=i,++this._size;this._capacity=this._size}get capacity(){return this._capacity}get size(){return this._size}get[Symbol.toStringTag](){return m.name}set capacity(t){if(t=+t,!u(t)&&!f(t))throw new RangeError("Invalid capacity");if(this._size<=t){this._capacity=t;return}const i=[];let e=this.root.next;do i.push(e.value),e=e.next;while(--this._size>t);this.root.next=e,e.prev=this.root,this._capacity=t,this.emitter.emit(a.Overflow,i)}clear(){this._size=0,this.root={value:void 0},this.root.next=this.root,this.root.prev=this.root}*entries(){let t=this.root;for(let i=0;i<this._size;++i)t=t.next,yield[i,t.value]}first(){return this.root.next.value}forEach(t,i){let e=this.root;for(let s=0;s<this._size;++s)e=e.next,t.call(i,e.value,s,this)}front(){return this.root.next.value}has(t){let i=this.root;for(let e=0;e<this._size;++e)if(i=i.next,i.value===t)return!0;return!1}*keys(){for(let t=0;t<this._size;++t)yield t}last(){return this.root.prev.value}pop(){if(this._size<1)return;const t=this.root.prev;return this.root.prev=t.prev,t.prev.next=this.root,--this._size,t.value}push(...t){const i=this._capacity;if(i<1)return this.emitter.emit(a.Overflow,t),this._size;const e=t.length,s=this.root,h=[];let r=s.prev;for(let v=0;v<e;++v)r.next={next:s,prev:r,value:t[v]},r=r.next,this._size<i?++this._size:(h.push(s.next.value),s.next=s.next.next);return s.prev=r,s.next.prev=s,h.length>0&&this.emitter.emit(a.Overflow,h),this._size}shift(){if(this._size<1)return;const t=this.root.next.next,i=t.prev.value;return this.root.next=t,t.prev=this.root,--this._size,i}[Symbol.iterator](){return this.values()}top(){return this.root.prev.value}unshift(...t){const i=this._capacity;if(i<1)return this.emitter.emit(a.Overflow,t),this._size;const e=this.root,s=[];let h=e.next;for(let r=t.length-1;r>=0;--r)h={next:h,prev:e,value:t[r]},h.next.prev=h,this._size<i?++this._size:(s.push(e.prev.value),e.prev=e.prev.prev);return e.next=h,e.prev.next=e,s.length>0&&this.emitter.emit(a.Overflow,s.reverse()),this._size}*values(){let t=this.root;for(let i=0;i<this._size;++i)t=t.next,yield t.value}}class g extends d{constructor(t){super();n(this,"_capacity");n(this,"root");n(this,"_size");n(this,"tail");if(this._capacity=1/0,this.root={value:void 0},this.root.next=this.root,this._size=0,this.tail=this.root,x(t)||c(t)||u(t))return;if(z(t)){if(!f(t))throw new RangeError("Invalid capacity");this._capacity=t;return}let i=this.root;for(const e of t)i.next={next:this.root,value:e},i=i.next,++this._size;this.tail=i,i.next=this.root,this._capacity=this._size}get capacity(){return this._capacity}get size(){return this._size}get[Symbol.toStringTag](){return g.name}set capacity(t){if(t=+t,!u(t)&&!f(t))throw new RangeError("Invalid capacity");if(this._size<=t){this._capacity=t;return}const i=[];let e=this.root.next;do i.push(e.value),e=e.next;while(--this._size>t);this.root.next=e,this.tail=this._size>0?this.tail:this.root,this._capacity=t,this.emitter.emit(a.Overflow,i)}clear(){this._size=0,this.root={value:void 0},this.root.next=this.root,this.tail=this.root}*entries(){let t=this.root;for(let i=0;i<this._size;++i)t=t.next,yield[i,t.value]}first(){return this.root.next.value}forEach(t,i){let e=this.root;for(let s=0;s<this._size;++s)e=e.next,t.call(i,e.value,s,this)}front(){return this.root.next.value}has(t){let i=this.root;for(let e=0;e<this._size;++e)if(i=i.next,i.value===t)return!0;return!1}*keys(){for(let t=0;t<this._size;++t)yield t}push(...t){const i=this._capacity;if(i<1)return this._size;const e=t.length,s=this.root,h=[];for(let r=0;r<e;++r)this.tail.next={next:s,value:t[r]},this.tail=this.tail.next,this._size<i?++this._size:(h.push(s.next.value),s.next=s.next.next);return h.length>0&&this.emitter.emit(a.Overflow,h),this._size}shift(){if(this._size<1)return;const t=this.root.next;return this.root.next=t.next,--this._size<1&&(this.tail=this.root),t.value}[Symbol.iterator](){return this.values()}*values(){let t=this.root;for(let i=0;i<this._size;++i)t=t.next,yield t.value}}class y extends d{constructor(t){super();n(this,"_capacity");n(this,"root");n(this,"_size");if(this._capacity=1/0,this.root={value:void 0},this.root.next=this.root,this.root.prev=this.root,this._size=0,x(t)||c(t)||u(t))return;if(z(t)){if(!f(t))throw new RangeError("Invalid capacity");this._capacity=t;return}let i=this.root;for(const e of t)i.next={prev:i,value:e},i=i.next,++this._size;i.next=this.root,this.root.prev=i,this._capacity=this._size}get capacity(){return this._capacity}get size(){return this._size}get[Symbol.toStringTag](){return y.name}set capacity(t){if(t=+t,!u(t)&&!f(t))throw new RangeError("Invalid capacity");if(this._size<=t){this._capacity=t;return}const i=[];let e=this.root.next;do i.push(e.value),e=e.next;while(--this._size>t);this.root.next=e,e.prev=this.root,this._capacity=t,this.emitter.emit(a.Overflow,i)}clear(){this._size=0,this.root={value:void 0},this.root.next=this.root,this.root.prev=this.root}*entries(){let t=this.root;for(let i=0;i<this._size;++i)t=t.next,yield[i,t.value]}forEach(t,i){let e=this.root;for(let s=0;s<this._size;++s)e=e.next,t.call(i,e.value,s,this)}has(t){let i=this.root;for(let e=0;e<this._size;++e)if(i=i.next,i.value===t)return!0;return!1}*keys(){for(let t=0;t<this._size;++t)yield t}last(){return this.root.prev.value}pop(){if(this._size<1)return;const t=this.root.prev;return this.root.prev=t.prev,t.prev.next=this.root,--this._size,t.value}push(...t){const i=this._capacity;if(i<1)return this._size;const e=t.length,s=this.root,h=[];let r=s.prev;for(let v=0;v<e;++v)r.next={next:s,prev:r,value:t[v]},r=r.next,this._size<i?++this._size:(h.push(s.next.value),s.next=s.next.next);return s.prev=r,s.next.prev=s,h.length>0&&this.emitter.emit(a.Overflow,h),this._size}[Symbol.iterator](){return this.values()}top(){return this.root.prev.value}*values(){let t=this.root;for(let i=0;i<this._size;++i)t=t.next,yield t.value}}class w extends d{constructor(t){super();n(this,"_capacity");n(this,"map");if(this._capacity=1/0,this.map=new Map,!(x(t)||c(t)||u(t))){if(z(t)){if(!f(t))throw new RangeError("Invalid capacity");this._capacity=t;return}for(const[i,e]of t)this.map.set(i,e);this._capacity=this.map.size}}get capacity(){return this._capacity}get size(){return this.map.size}get[Symbol.toStringTag](){return w.name}set capacity(t){if(t=+t,!u(t)&&!f(t))throw new RangeError("Invalid capacity");if(t===this._capacity||(this._capacity=t,this.size<=t))return;if(t===0){const s=Array.from(this.map);this.clear(),this.emitter.emit(a.Overflow,s);return}const i=[],e=this.map.entries();for(let s=this.size-t;s>0;--s){const h=e.next().value;this.map.delete(h[0]),i.push(h)}this.emitter.emit(a.Overflow,i)}clear(){this.map.clear()}delete(t){return this.map.delete(t)}entries(){return this.map.entries()}forEach(t,i){for(const[e,s]of this.map.entries())t.call(i,s,e,this)}get(t){return this.map.get(t)}has(t){return this.map.has(t)}keys(){return this.map.keys()}set(t,i){if(this.capacity<1)return this.emitter.emit(a.Overflow,[[t,i]]),this;const e=[];if(!this.map.delete(t)&&this.size>=this.capacity){const s=this.map.entries().next().value;this.map.delete(s[0]),e.push(s)}return this.map.set(t,i),e.length>0&&this.emitter.emit(a.Overflow,e),this}[Symbol.iterator](){return this.map.entries()}values(){return this.map.values()}}class S extends d{constructor(t){super();n(this,"_capacity");n(this,"head");n(this,"next");n(this,"_size");n(this,"vals");if(this._capacity=1/0,this.head=0,this._size=0,this.next=0,this.vals=[],!(x(t)||c(t)||u(t))){if(z(t)){if(!p(t))throw new RangeError("Invalid capacity");this._capacity=t;return}for(const i of t)this.vals.push(i);this._capacity=this.vals.length,this._size=this._capacity}}get capacity(){return this._capacity}set capacity(t){if(t=+t,!u(t)&&!p(t))throw new RangeError("Invalid capacity");if(t!==this._capacity){if(this._size<1){this._capacity=t,this.clear();return}t<this._capacity?this.emit(this.shrink(t)):this.grow(t)}}get size(){return this._size}get[Symbol.toStringTag](){return S.name}clear(){this.head=0,this._size=0,this.next=0,this.vals.length=0}*entries(){for(let t=0;t<this._size;++t)yield[t,this.vals[(this.head+t)%this._capacity]]}first(){return this.vals[this.head]}forEach(t,i){const e=this._size;for(let s=0;s<e&&s<this._size;++s){const h=this.vals[(this.head+s)%this._capacity];t.call(i,h,s,this)}}front(){return this.vals[this.head]}has(t){const i=this._size;for(let e=0;e<i;++e)if(t===this.vals[(this.head+e)%this._capacity])return!0;return!1}*keys(){for(let t=0;t<this._size;++t)yield t}push(...t){const i=t.length;if(i<1)return this._size;const e=this._capacity;if(e<1)return this.emit([t]),this._size;const s=i-e,h=this.evict(this.size+s);if(s>0&&h.push(t.splice(0,s)),s>=0)return this.vals=t,this._size=e,this.emit(h),this._size;let r=this.next;const v=this.vals;for(let _=0;_<i;++_)v[r]=t[_],++r>=e&&(r=0);return this._size+=i,this.next=r,this.emit(h),this._size}shift(){if(this._size<=0)return;--this._size;const t=this.vals[this.head];return this.vals[this.head]=void 0,++this.head>=this._capacity&&(this.head=0,this.vals.length=this.next),t}[Symbol.iterator](){return this.values()}*values(){for(let t=0;t<this._size;++t)yield this.vals[(this.head+t)%this._capacity]}grow(t){if(this.isSequential()){this.sequentialReset(t);return}if(this._size<=this.head){const i=this._size-this.next;this.vals.copyWithin(i,0,this.next),this.vals.copyWithin(0,this.head,this.head+i),this.vals.length=this._size,this.head=0,this.next=this._size}else if(this.head+this._size<=t)this.vals.length=this.head+this._size,this.vals.copyWithin(this._capacity,0,this.next),this.vals.fill(void 0,0,this.next),this.next=(this.head+this._size)%t;else{const i=t-this._capacity;this.vals.length=t,this.vals.copyWithin(this._capacity,0,i),this.vals.copyWithin(0,i,this.next);const e=Math.max(i,this.next-i);this.vals.fill(void 0,e,this.next),this.next-=i}this._capacity=t}isSequential(){return this.head<this.next||this.next<1}emit(t){const i=t.length;for(let e=0;e<i;++e)this.emitter.emit(a.Overflow,t[e])}evict(t){if(t<=0)return[];const i=[],e=this._capacity-this.head,s=!this.isSequential();if(s&&e>t)return i.push(this.vals.slice(this.head,this.head+t)),this.vals.fill(void 0,this.head,this.head+t),this.head+=t,this._size-=t,i;if(s){if(i.push(this.vals.slice(this.head,this.head+e)),this.vals.length=this.next,this.head=0,this._size-=e,t<=e)return i;t-=e}return t>=this._size?(i.push(this.vals.slice(this.head,this.head+this._size)),this.clear(),i):(i.push(this.vals.slice(this.head,this.head+t)),this.vals.fill(void 0,this.head,this.head+t),this.head+=t,this._size-=t,i)}sequentialReset(t){const i=this.head+this._size;return i<=t?(this.vals.length=i,this.next=this.vals.length%t):this.head>=t?(this.vals.copyWithin(0,this.head,i),this.vals.length=this._size,this.head=0,this.next=this._size%t):(this.vals.copyWithin(0,t,i),this.vals.length=t,this.next=i-t),this._capacity=t,!0}shrink(t){const i=this.evict(this._size-t);if(this.isSequential())return this.sequentialReset(t),i;const e=this._capacity-t;return this.vals.copyWithin(this.head-e,this.head,this._capacity),this.vals.length=t,this.head-=e,this._capacity=t,i}}class I extends d{constructor(t){super();n(this,"_capacity");n(this,"set");if(this._capacity=1/0,this.set=new Set,!(x(t)||c(t)||u(t))){if(z(t)){if(!f(t))throw new RangeError("Invalid capacity");this._capacity=t;return}for(const i of t)this.set.add(i);this._capacity=this.set.size}}get capacity(){return this._capacity}get size(){return this.set.size}get[Symbol.toStringTag](){return I.name}set capacity(t){if(t=+t,!u(t)&&!f(t))throw new RangeError("Invalid capacity");if(t===this._capacity||(this._capacity=t,this.size<=t))return;if(t===0){const s=Array.from(this.set);this.clear(),this.emitter.emit(a.Overflow,s);return}const i=[],e=this.set.values();for(let s=this.size-t;s>0;--s){const h=e.next().value;this.set.delete(h),i.push(h)}this.emitter.emit(a.Overflow,i)}add(t){if(this.capacity<1)return this.emitter.emit(a.Overflow,[t]),this;const i=[];if(!this.set.delete(t)&&this.size>=this.capacity){const e=this.set.values().next().value;this.set.delete(e),i.push(e)}return this.set.add(t),i.length>0&&this.emitter.emit(a.Overflow,i),this}clear(){this.set.clear()}delete(t){return this.set.delete(t)}entries(){return this.set.entries()}forEach(t,i){for(const e of this.set.keys())t.call(i,e,e,this)}has(t){return this.set.has(t)}keys(){return this.set.keys()}values(){return this.set.keys()}[Symbol.iterator](){return this.set.values()}}class E extends d{constructor(t){super();n(this,"_capacity");n(this,"head");n(this,"next");n(this,"_size");n(this,"vals");if(this._capacity=1/0,this.head=0,this._size=0,this.next=0,this.vals=[],!(x(t)||c(t)||u(t))){if(z(t)){if(!p(t))throw new RangeError("Invalid capacity");this._capacity=t;return}for(const i of t)this.vals.push(i);this._capacity=this.vals.length,this._size=this._capacity}}get capacity(){return this._capacity}set capacity(t){if(t=+t,!u(t)&&!p(t))throw new RangeError("Invalid capacity");if(t!==this._capacity){if(this._size<1){this._capacity=t,this.clear();return}t<this._capacity?this.emit(this.shrink(t)):this.grow(t)}}get size(){return this._size}get[Symbol.toStringTag](){return E.name}clear(){this.head=0,this._size=0,this.next=0,this.vals.length=0}*entries(){for(let t=0;t<this._size;++t)yield[t,this.vals[(this.head+t)%this._capacity]]}forEach(t,i){const e=this._size;for(let s=0;s<e&&s<this._size;++s){const h=this.vals[(this.head+s)%this._capacity];t.call(i,h,s,this)}}has(t){const i=this._size;for(let e=0;e<i;++e)if(t===this.vals[(this.head+e)%this._capacity])return!0;return!1}*keys(){for(let t=0;t<this._size;++t)yield t}last(){if(!(this._size<1))return this.vals[(this.head+this._size-1)%this._capacity]}pop(){if(this._size<=0)return;let t=this.next-1;t<0&&(t+=this.head+this._size),--this._size,this.next=t;const i=this.vals[t];return this.vals[t]=void 0,i}push(...t){const i=t.length;if(i<1)return this._size;const e=this._capacity;if(e<1)return this.emit([t]),this._size;const s=i-e,h=this.evict(this.size+s);if(s>0&&h.push(t.splice(0,s)),s>=0)return this.vals=t,this._size=e,this.emit(h),this._size;let r=this.next;const v=this.vals;for(let _=0;_<i;++_)v[r]=t[_],++r>=e&&(r=0);return this._size+=i,this.next=r,this.emit(h),this._size}[Symbol.iterator](){return this.values()}top(){if(!(this._size<1))return this.vals[(this.head+this._size-1)%this._capacity]}*values(){for(let t=0;t<this._size;++t)yield this.vals[(this.head+t)%this._capacity]}grow(t){if(this.isSequential()){this.sequentialReset(t);return}if(this._size<=this.head){const i=this._size-this.next;this.vals.copyWithin(i,0,this.next),this.vals.copyWithin(0,this.head,this.head+i),this.vals.length=this._size,this.head=0,this.next=this._size}else if(this.head+this._size<=t)this.vals.length=this.head+this._size,this.vals.copyWithin(this._capacity,0,this.next),this.vals.fill(void 0,0,this.next),this.next=(this.head+this._size)%t;else{const i=t-this._capacity;this.vals.length=t,this.vals.copyWithin(this._capacity,0,i),this.vals.copyWithin(0,i,this.next);const e=Math.max(i,this.next-i);this.vals.fill(void 0,e,this.next),this.next-=i}this._capacity=t}isSequential(){return this.head<this.next||this.next<1}emit(t){const i=t.length;for(let e=0;e<i;++e)this.emitter.emit(a.Overflow,t[e])}evict(t){if(t<=0)return[];const i=[],e=this._capacity-this.head,s=!this.isSequential();if(s&&e>t)return i.push(this.vals.slice(this.head,this.head+t)),this.vals.fill(void 0,this.head,this.head+t),this.head+=t,this._size-=t,i;if(s){if(i.push(this.vals.slice(this.head,this.head+e)),this.vals.length=this.next,this.head=0,this._size-=e,t<=e)return i;t-=e}return t>=this._size?(i.push(this.vals.slice(this.head,this.head+this._size)),this.clear(),i):(i.push(this.vals.slice(this.head,this.head+t)),this.vals.fill(void 0,this.head,this.head+t),this.head+=t,this._size-=t,i)}sequentialReset(t){const i=this.head+this._size;return i<=t?(this.vals.length=i,this.next=this.vals.length%t):this.head>=t?(this.vals.copyWithin(0,this.head,i),this.vals.length=this._size,this.head=0,this.next=this._size%t):(this.vals.copyWithin(0,t,i),this.vals.length=t,this.next=i-t),this._capacity=t,!0}shrink(t){const i=this.evict(this._size-t);if(this.isSequential())return this.sequentialReset(t),i;const e=this._capacity-t;return this.vals.copyWithin(this.head-e,this.head,this._capacity),this.vals.length=t,this.head-=e,this._capacity=t,i}}exports.BoundedEvent=a;exports.CircularLinkedDeque=m;exports.CircularLinkedQueue=g;exports.CircularLinkedStack=y;exports.CircularMap=w;exports.CircularQueue=S;exports.CircularSet=I;exports.CircularStack=E;
//# sourceMappingURL=circle-ds.min.cjs.map
