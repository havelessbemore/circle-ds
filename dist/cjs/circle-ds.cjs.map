{"version":3,"file":"circle-ds.cjs","sources":["../../src/types/boundedEvent.ts","../../__vite-browser-external","../../src/circle/circularBase.ts","../../src/utils/constants.ts","../../src/utils/is.ts","../../src/utils/math.ts","../../src/circle/circularArrayList.ts","../../src/circle/circularDeque.ts","../../src/utils/linkedNode.ts","../../src/utils/doublyLinkedNode.ts","../../src/circle/circularDoublyLinkedList.ts","../../src/circle/circularLinkedDeque.ts","../../src/circle/circularLinkedList.ts","../../src/circle/circularLinkedQueue.ts","../../src/circle/circularLinkedStack.ts","../../src/circle/circularMap.ts","../../src/circle/circularQueue.ts","../../src/circle/circularSet.ts","../../src/utils/iterable.ts","../../src/utils/skipNode.ts","../../src/utils/skipStack.ts","../../src/circle/circularSkipList.ts","../../src/circle/circularStack.ts"],"sourcesContent":["/**\n * An enumeration of event types supported by {@link Bounded} collections.\n *\n * This object defines a set of constants representing event names that can\n * be emitted by instances of collections implementing the {@link Bounded} interface.\n * These events signify specific actions or changes in the state of the collection.\n *\n * Defined events include:\n * - `Overflow`: Indicates that the collection has reached its capacity, and\n *   as a result, one or more elements have been removed to accommodate new elements.\n *   This event is triggered during operations that add elements to the collection when\n *   it exceeds its capacity, or when capacity is updated below the collection's current\n *   size. Listeners attached to this event will receive an array of elements that were\n *   removed due to the overflow. Removed elements may be sent across 1 or more event\n *   instances.\n *\n * This object is marked as `const` to ensure that its properties are read-only,\n * preventing modification of event names which could lead to inconsistencies in\n * event handling across the application.\n */\nexport const BoundedEvent = {\n  Overflow: \"overflow\",\n} as const;\n","export default {}","import EventEmitter from \"events\";\nimport { BoundedEvent } from \"../types/boundedEvent\";\nimport { ValueOf } from \"../types/valueOf\";\n\nexport class CircularBase<T> {\n  /**\n   * The event emitter.\n   * @internal\n   */\n  protected _emitter: EventEmitter;\n\n  constructor(emitter = new EventEmitter()) {\n    this._emitter = emitter;\n  }\n\n  /**\n   * Appends the listener function to the listeners array for the\n   * {@link BoundedEvent.Overflow} event.\n   *\n   * * No checks are made to see if the listener has already been added.\n   * Multiple calls with the same of event + listener combination will\n   * result in the listener being added and called multiple times.\n   *\n   * * By default, event listeners are invoked in the order they are added.\n   * The `prependListener()` method can be used as an alternative to add\n   * the event listener to the beginning of the listeners array.\n   *\n   * @param event - The name of the event.\n   * @param listener - The callback function. It will\n   * receive an array of elements that have been removed due to overflow.\n   * This can happen when elements are added while the collection is at\n   * capacity, or when capacity is reduced below the current size.\n   *\n   * @returns the collection.\n   */\n  addListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this;\n  addListener(\n    event: ValueOf<typeof BoundedEvent>,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    listener: (...args: any[]) => void\n  ): this {\n    this._emitter.addListener(event, listener);\n    return this;\n  }\n\n  /**\n   * Appends the listener function to the listeners array for the\n   * {@link BoundedEvent.Overflow} event.\n   *\n   * * No checks are made to see if the listener has already been added.\n   * Multiple calls with the same of event + listener combination will\n   * result in the listener being added and called multiple times.\n   *\n   * * By default, event listeners are invoked in the order they are added.\n   * The `prependListener()` method can be used as an alternative to add\n   * the event listener to the beginning of the listeners array.\n   *\n   * @param event - The name of the event.\n   * @param listener - The callback function. It will\n   * receive an array of elements that have been removed due to overflow.\n   * This can happen when elements are added while the collection is at\n   * capacity, or when capacity is reduced below the current size.\n   *\n   * @returns the collection.\n   */\n  on(event: typeof BoundedEvent.Overflow, listener: (elems: T[]) => void): this;\n  on(\n    event: ValueOf<typeof BoundedEvent>,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    listener: (...args: any[]) => void\n  ): this {\n    this._emitter.on(event, listener);\n    return this;\n  }\n\n  /**\n   * Adds the listener function to the beginning of the listeners array for\n   * the {@link BoundedEvent.Overflow} event.\n   *\n   * * No checks are made to see if the listener has already been added.\n   * Multiple calls with the same of event + listener combination will\n   * result in the listener being added and called multiple times.\n   *\n   * * Alternatively, the `addListener()` method can be used to add\n   * the event listener to the end of the listeners array.\n   *\n   * @param event - The name of the event.\n   * @param listener - The callback function. It will\n   * receive an array of elements that have been removed due to overflow.\n   * This can happen when elements are added while the collection is at\n   * capacity, or when capacity is reduced below the current size.\n   *\n   * @returns the collection.\n   */\n  prependListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this;\n  prependListener(\n    event: ValueOf<typeof BoundedEvent>,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    listener: (...args: any[]) => void\n  ): this {\n    this._emitter.prependListener(event, listener);\n    return this;\n  }\n\n  /**\n   * Removes the specified listener from the listener array for the event.\n   *\n   * At most once instance of a listener will be removed. If a listener\n   * has been added multiple times for the same event, this method should\n   * be called once per instance.\n   *\n   * @param event - The name of the event.\n   * @param listener - The callback function.\n   *\n   * @returns the collection.\n   */\n  removeListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this;\n  removeListener(\n    event: ValueOf<typeof BoundedEvent>,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    listener: (...args: any[]) => void\n  ): this {\n    this._emitter.removeListener(event, listener);\n    return this;\n  }\n}\n","/**\n * The maximum number of arguments that can be passed to a function.\n *\n * While ECMAScript specifications do not explicitly limit the number of\n * function arguments, practical limits are imposed by JavaScript engine\n * implementations. Different engines can have different maximums, so a\n * conservative value is used to prevent runtime errors.\n *\n * For more details, see the\n * {@link https://262.ecma-international.org/14.0/#sec-list-and-record-specification-type | ECMAScript Specification},\n * section \"6.2.2 The List and Record Specification Types\".\n */\nexport const ARGS_MAX_LENGTH = 16383; // 2**14 - 1\n\n/**\n * The maximum length of an array.\n *\n * According to the ECMAScript specification, the length property of an array\n * is an unsigned 32-bit integer, so its range is 0 to 2**32 - 1, inclusive.\n * Beyond this, operations that modify the array length (e.g., `push`, `pop`,\n * `unshift`, `shift`) may fail or behave unexpectedly.\n *\n * For more details, see the\n * {@link https://262.ecma-international.org/14.0/#sec-arraycreate | ECMAScript Specification},\n * section \"10.4.2.2 ArrayCreate\".\n */\nexport const ARRAY_MAX_LENGTH = 4294967295; // 2**32 - 1\n\n/**\n * The maximum safe length for a linked structure.\n *\n * This constant is defined as the largest integer value that can be safely\n * represented in JavaScript (`Number.MAX_SAFE_INTEGER`), preventing integer\n * precision loss in length-related operations. Operations with values beyond\n * this number may not behave as expected due to limitations in JavaScript's\n * number representation.\n *\n * For more details, see the\n * {@link https://262.ecma-international.org/14.0/#sec-number.max_safe_integer | ECMAScript Specification},\n * section \"21.1.2.6 Number.MAX_SAFE_INTEGER\".\n */\nexport const LINKED_MAX_LENGTH = Number.MAX_SAFE_INTEGER; // 2**53 - 1\n","import { ARRAY_MAX_LENGTH, LINKED_MAX_LENGTH } from \"./constants\";\n\n/**\n * Checks if a given value is an integer within a valid array length range.\n *\n * This function is useful for validating array lengths before attempting operations\n * that could result in a `RangeError` due to invalid array size.\n *\n * @param value - The value to check.\n *\n * @returns `true` if the value is an integer within the `[0, ARRAY_MAX_LENGTH]` range, `false` otherwise.\n */\nexport function isArrayLength(value: unknown): value is number {\n  return (\n    Number.isInteger(value) &&\n    (value as number) >= 0 &&\n    (value as number) <= ARRAY_MAX_LENGTH\n  );\n}\n\n/**\n * Determines whether the provided value is a function.\n *\n * @param value - The value to check.\n *\n * @returns `true` if the value is a function, `false` otherwise.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isFunction(value: unknown): value is Function {\n  return typeof value === \"function\";\n}\n\n/**\n * Checks if a given value is positive infinity.\n *\n * @param value - The value to check.\n *\n * @returns `true` if the value is positive infinity, `false` otherwise.\n */\nexport function isInfinity(value: unknown): boolean {\n  return value === Number.POSITIVE_INFINITY;\n}\n\n/**\n * Determines whether the provided value is iterable.\n *\n * This is useful for determining if a value can be used\n * in a `for...of` loop or with spread syntax.\n *\n * @param value - The value to check.\n *\n * @returns `true` if the value implements the iterable protocol, `false` otherwise.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function isIterable(value: any): value is Iterable<unknown> {\n  return typeof value?.[Symbol.iterator] === \"function\";\n}\n\n/**\n * Checks if a given value is an integer within a valid linked length range.\n *\n * This function is useful for validating linked lengths before attempting operations\n * that could result in a `RangeError` due to invalid linked list size.\n *\n * @param value - The value to check.\n *\n * @returns `true` if the value is an integer within the `[0, LINKED_MAX_LENGTH]` range, `false` otherwise.\n */\nexport function isLinkedLength(value: unknown): value is number {\n  return (\n    Number.isInteger(value) &&\n    (value as number) >= 0 &&\n    (value as number) <= LINKED_MAX_LENGTH\n  );\n}\n\n/**\n * Determines whether the provided value is a number.\n *\n * This includes `NaN` and `Infinity`, so consider additional\n * checks if those values are not desirable.\n *\n * @param value - The value to check.\n *\n * @returns `true` if the value is of type number, `false` otherwise.\n */\nexport function isNumber(value: unknown): value is number {\n  return typeof value === \"number\";\n}\n\n/**\n * Checks if a given value is a safe integer greater than or equal to 0.\n *\n * This is useful for validating counts or sizes that must be within the safe\n * integer range to prevent precision loss.\n *\n * @param value - The value to check.\n *\n * @returns `true` if the value is a safe integer and non-negative, `false` otherwise.\n */\nexport function isSafeCount(value: unknown): value is number {\n  return Number.isSafeInteger(value) && (value as number) >= 0;\n}\n\n/**\n * Determines whether the provided value is a symbol.\n *\n * @param value - The value to check.\n *\n * @returns `true` if the value is a symbol, `false` otherwise.\n */\nexport function isSymbol(value: unknown): value is symbol {\n  return typeof value === \"symbol\";\n}\n","/**\n * Adds a specified addend to a value if the value is below a given target.\n *\n * @param value - The initial number.\n * @param addend - The number added if the value is below the target.\n * @param target - The target number for comparison. If the value is below this\n * number, the addend will be added. Defaults to 0 if not specified.\n */\nexport function addIfBelow(value: number, addend: number, target = 0): number {\n  return value >= target ? value : value + addend;\n}\n\n/**\n * Restricts a given numerical value within a specified range [min, max].\n *\n * If the provided value is less than the minimum, the minimum is returned.\n * If it is greater than the maximum, the maximum is returned. If the value\n * is within the range, the value itself is returned. An error is thrown if\n * the minimum range value is greater than the maximum range value, as this\n * represents an invalid range.\n *\n * @param value - The numerical value to clamp.\n * @param min - The minimum allowable value of the range.\n * @param max - The maximum allowable value of the range.\n *\n * @returns The clamped value within the specified range.\n *\n * @throws `RangeError` If `min` is greater than `max`.\n */\nexport function clamp(value: number, min: number, max: number): number {\n  if (min > max) {\n    throw new RangeError(\"Invalid clamp range; min must be <= max\");\n  }\n  if (value <= min) {\n    return min;\n  }\n  return value <= max ? value : max;\n}\n\n/**\n * Checks if a given numeric value falls within a specified range.\n *\n * @param value - The numeric value to check.\n * @param min - The inclusive lower bound of the range.\n * @param max - The exclusive upper bound of the range.\n *\n * @returns - `true` if `value` is within the range `[min, max)`, `false` otherwise.\n */\nexport function isInRange(value: number, min: number, max: number): boolean {\n  return value >= min && value < max;\n}\n\n/**\n * Calculates the logarithm of a given value with the specified base.\n *\n * This function uses natural logarithms (`Math.log`) for its calculations.\n * If either the value or the base is less than or equal to 0, `NaN` is returned\n * to indicate an invalid operation, as logarithms are not defined for non-positive\n * values and bases.\n *\n * @param value - The numerical value for which to calculate the logarithm. Must be positive.\n * @param base - The base of the logarithm. Must be positive.\n *\n * @returns The calculated logarithm of the value with the given base, or `NaN` for invalid inputs.\n */\nexport function log(value: number, base: number): number {\n  return value >= 0 && base > 0 ? Math.log(value) / Math.log(base) : NaN;\n}\n\n/**\n * Generates a number representing the length of a consecutive run based on a\n * probability threshold.\n *\n * This function iteratively increments a counter as long as the randomly\n * generated numbers from `randomFn` are less than the specified probability\n * threshold `p`, or until the counter reaches the maximum `max`.\n *\n * The function is useful for simulations or models that require a random yet\n * probabilistically constrained sequence length, such as simulating streaks or\n * runs in games of chance.\n *\n * @param probability - The probability threshold. Defaults to 0.5.\n * @param max - The maximum value the of the run. Defaults to Infinity.\n * @param min - The starting value of the run. Defaults to 0.\n * @param randomFn - A function that generates a random number. Defaults to `Math.random`.\n *\n * @returns The length of the run.\n */\nexport function randomRun(\n  probability = 0.5,\n  min = 0,\n  max = Infinity,\n  randomFn = Math.random\n): number {\n  while (min < max && randomFn() < probability) {\n    ++min;\n  }\n  return min;\n}\n\n/**\n * Attempts to convert a given value to an integer.\n *\n * The function first tries to convert the value to a number. If the result\n * is not valid (i.e. `NaN`), the given `defaultValue` is returned. Otherwise,\n * the function truncates the number to an integer using `Math.trunc`.\n *\n * This is useful for ensuring numerical operations are performed on integers,\n * with a controllable fallback for invalid inputs.\n *\n * @param value - The value to convert to an integer. This can be of any type.\n * @param defaultValue - The fallback value to return if conversion fails. Defaults to 0.\n *\n * @returns The converted integer, or `defaultValue` if conversion is not possible.\n */\nexport function toInteger(value?: unknown, defaultValue = 0): number {\n  value = +value!;\n  return isNaN(value as number) ? defaultValue : Math.trunc(value as number);\n}\n","import { CircularBase } from \"./circularBase\";\nimport { BoundedEvent } from \"../types/boundedEvent\";\nimport { isArrayLength, isInfinity, isNumber } from \"../utils/is\";\nimport { Bounded } from \"../types/bounded\";\nimport { ARRAY_MAX_LENGTH } from \"../utils/constants\";\nimport { List } from \"../types/list\";\nimport { addIfBelow, clamp, isInRange, toInteger } from \"../utils/math\";\n\nexport class CircularArrayList<T>\n  extends CircularBase<T>\n  implements Bounded<T>, List<T>\n{\n  /**\n   * @internal\n   * The maximum number of elements that can be stored in the collection.\n   */\n  protected _capacity: number;\n\n  /**\n   * @internal\n   * The index representing the first element.\n   */\n  protected _head: number;\n\n  /**\n   * @internal\n   * Whether capacity is finite (true) or infinite (false).\n   */\n  protected _isFinite: boolean;\n\n  /**\n   * @internal\n   * The index one more than the last element.\n   */\n  protected _next: number;\n\n  /**\n   * @internal\n   * The number of elements.\n   */\n  protected _size: number;\n\n  /**\n   * @internal\n   * The stored values.\n   */\n  protected _vals: T[];\n\n  /**\n   * Creates a new list. Default `capacity` is `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new list with the given capacity.\n   *\n   * @param capacity - the list's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new list from the given items. `capacity` will equal the number of items.\n   *\n   * @param items - the initial values in the list.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    super();\n\n    // Initialize class variables\n    this._capacity = ARRAY_MAX_LENGTH;\n    this._head = 0;\n    this._isFinite = false;\n    this._size = 0;\n    this._next = 0;\n    this._vals = [];\n\n    // If capacity is null, undefined, or Infinity\n    if (capacity == null || isInfinity(capacity)) {\n      return;\n    }\n\n    // If capacity is a number\n    if (isNumber(capacity)) {\n      // If capacity is invalid\n      if (!isArrayLength(capacity)) {\n        throw new RangeError(\"Invalid capacity\");\n      }\n      // If capacity is valid\n      this._capacity = capacity;\n      this._isFinite = true;\n      return;\n    }\n\n    // If capacity is an iterable\n    this._vals = Array.from(capacity as Iterable<T>);\n    this._capacity = this._vals.length;\n    this._isFinite = true;\n    this._size = this._capacity;\n  }\n\n  get capacity(): number {\n    return this._isFinite ? this._capacity : Infinity;\n  }\n\n  get size(): number {\n    return this._size;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return CircularArrayList.name;\n  }\n\n  set capacity(capacity: number) {\n    // Convert capacity to a number\n    capacity = +capacity;\n\n    // Check capacity\n    if (isInfinity(capacity)) {\n      // If capacity is Infinity\n      capacity = ARRAY_MAX_LENGTH;\n      this._isFinite = false;\n    } else if (isArrayLength(capacity)) {\n      // If capacity is valid\n      this._isFinite = true;\n    } else {\n      // If capacity is invalid\n      throw new RangeError(\"Invalid capacity\");\n    }\n\n    // Update collection\n    if (this._size <= 0) {\n      // If collection is empty\n      this._capacity = capacity;\n      this.clear();\n    } else if (capacity < this._capacity) {\n      // If capacity is decreasing\n      this.shrink(capacity);\n    } else if (capacity > this._capacity) {\n      // If capacity is increasing\n      this.grow(capacity);\n    }\n  }\n\n  at(index?: number): T | undefined {\n    // Sanitize input\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return undefined;\n    }\n\n    // Return value\n    return this._vals[this.toIndex(index)];\n  }\n\n  clear(): void {\n    this._size = 0;\n    this._head = 0;\n    this._next = 0;\n    this._vals.length = 0;\n  }\n\n  /*\n  copyWithin(target: number, start: number, end?: number): this {\n    const size = this._size;\n\n    // Sanitize inputs\n    target = clamp(addIfBelow(toInteger(target, 0), size), 0, size);\n    start = clamp(addIfBelow(toInteger(start, 0), size), 0, size);\n    const temp = target > start ? target - start : 0;\n    end = clamp(addIfBelow(toInteger(end, size), size), start, size - temp);\n\n    // Copy within\n    this._copyWithin(target, start, end);\n\n    // Return list\n    return this;\n  }\n  */\n\n  /**\n   * @internal\n   */\n  protected _copyWithin(target: number, start: number, end: number): void {\n    // If copying in-place or nothing to copy\n    if (target == start || start >= end) {\n      return;\n    }\n\n    // Get source data segments\n    const capacity = this._capacity - 1;\n    const vals = this._vals;\n    const ranges = this.toRanges(start, end);\n\n    if (target <= start || end <= target) {\n      // Copy from left to right\n      target = this.toIndex(target);\n      for (const [min, max] of ranges) {\n        for (let i = min; i < max; ++i) {\n          vals[target] = vals[i];\n          target = target < capacity ? target + 1 : 0;\n        }\n      }\n    } else {\n      // Copy from right to left\n      target = this.toIndex(target + (end - start));\n      for (const [min, max] of ranges.reverse()) {\n        for (let i = max - 1; i >= min; --i) {\n          target = target > 0 ? target - 1 : capacity;\n          vals[target] = vals[i];\n        }\n      }\n    }\n  }\n\n  delete(index: number): boolean {\n    // Sanitize input\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return false;\n    }\n\n    // Delete value\n    this._delete(index, 1);\n\n    // Return success\n    return true;\n  }\n\n  /**\n   * @internal\n   */\n  protected _delete(index: number, deleteCount: number): void {\n    this._copyWithin(index, index + deleteCount, this._size);\n    this._pop(deleteCount);\n  }\n\n  *entries(): IterableIterator<[number, T]> {\n    for (let ext = 0; ext < this._size; ++ext) {\n      yield [ext, this._vals[this.toIndex(ext)]];\n    }\n  }\n\n  fill(value: T, start?: number, end?: number): this {\n    const size = this._size;\n\n    // Sanitize inputs\n    start = clamp(addIfBelow(toInteger(start, 0), size), 0, size);\n    end = clamp(addIfBelow(toInteger(end, size), size), start, size);\n\n    // Fill values\n    this._fill(value, start, end);\n\n    // Return list\n    return this;\n  }\n\n  /**\n   * @internal\n   */\n  protected _fill(value: T, start: number, end: number): void {\n    for (const [min, max] of this.toRanges(start, end)) {\n      this._vals.fill(value, min, max);\n    }\n  }\n\n  first(): T | undefined {\n    return this._size > 0 ? this._vals[this._head] : undefined;\n  }\n\n  forEach(\n    callbackfn: (value: T, index: number, collection: this) => void,\n    thisArg?: unknown\n  ): void {\n    const N = this._size;\n    for (let ext = 0; ext < N && ext < this._size; ++ext) {\n      const value = this._vals[this.toIndex(ext)];\n      callbackfn.call(thisArg, value, ext, this);\n    }\n  }\n\n  has(value: T): boolean {\n    const vals = this._vals;\n    for (const [min, max] of this.toRanges(0, this._size)) {\n      for (let i = min; i < max; ++i) {\n        if (value === vals[i]) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  *keys(): IterableIterator<number> {\n    for (let ext = 0; ext < this._size; ++ext) {\n      yield ext;\n    }\n  }\n\n  last(): T | undefined {\n    return this._size > 0\n      ? this._vals[this.toIndex(this._size - 1)]\n      : undefined;\n  }\n\n  pop(): T | undefined {\n    // If list is empty\n    if (this._size <= 0) {\n      return undefined;\n    }\n\n    // Get and remove first value\n    const value = this._vals[this.toIndex(this._size - 1)];\n    this._pop(1);\n\n    // Return value\n    return value;\n  }\n\n  /**\n   * @internal\n   */\n  protected _pop(N: number): void {\n    // Remove values\n    const newSize = this._size - N;\n    this._fill(undefined as T, newSize, this._size);\n\n    // Update state\n    this._next = this.toIndex(newSize);\n    this._size = newSize;\n  }\n\n  push(...items: T[]): number {\n    // If no items\n    if (items.length <= 0) {\n      return this._size;\n    }\n\n    // If no capacity\n    if (this._capacity <= 0) {\n      this._overflow(items);\n      return this._size;\n    }\n\n    // Push items\n    this._insert(this._size, items);\n\n    // Return new size\n    return this._size;\n  }\n\n  set(index: number, value: T): T | undefined {\n    // Sanitize input\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return undefined;\n    }\n\n    // Update value\n    index = this.toIndex(index);\n    const prevValue = this._vals[index];\n    this._vals[index] = value;\n\n    // Return previous value\n    return prevValue;\n  }\n\n  shift(): T | undefined {\n    // If list is empty\n    if (this._size <= 0) {\n      return undefined;\n    }\n\n    // Get and remove first value\n    const value = this._vals[this._head];\n    this._shift(1);\n\n    // Return value\n    return value;\n  }\n\n  /**\n   * @internal\n   */\n  protected _shift(N: number): void {\n    // Remove items\n    this._fill(undefined as T, 0, N);\n\n    // Update state\n    this._head = this.toIndex(N);\n    this._size -= N;\n  }\n\n  slice(start?: number, end?: number): CircularArrayList<T> {\n    const size = this._size;\n\n    // Sanitize inputs\n    start = clamp(addIfBelow(toInteger(start, 0), size), 0, size);\n    end = clamp(addIfBelow(toInteger(end, size), size), start, size);\n\n    // Return slice\n    return this.toList(this._slice(start, end));\n  }\n\n  /**\n   * @internal\n   */\n  protected _slice(start: number, end: number): T[] {\n    const from = this._vals;\n    const to = new Array<T>(end - start);\n\n    let j = 0;\n    for ([start, end] of this.toRanges(start, end)) {\n      for (let i = start; i < end; ++i) {\n        to[j++] = from[i];\n      }\n    }\n\n    return to;\n  }\n\n  splice(\n    start: number,\n    deleteCount?: number,\n    ...items: T[]\n  ): CircularArrayList<T> {\n    const size = this._size;\n\n    // Sanitize inputs\n    start = clamp(addIfBelow(toInteger(start, 0), size), 0, size);\n    deleteCount = clamp(toInteger(deleteCount, 0), 0, size - start);\n\n    // Create output\n    const out = this.toList(this._slice(start, start + deleteCount));\n\n    // Update list\n    this._splice(start, deleteCount, items);\n\n    // Return output\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  protected _splice(start: number, deleteCount: number, items: T[] = []): void {\n    const addCount = items.length;\n    const replaceCount = Math.min(deleteCount, addCount);\n    const vals = this._vals;\n\n    // Replace values\n    let j = 0;\n    for (const [a, b] of this.toRanges(start, start + replaceCount)) {\n      for (let i = a; i < b; ++i) {\n        vals[i] = items[j++];\n      }\n    }\n\n    // If done\n    if (deleteCount == addCount) {\n      return;\n    }\n\n    // Insert remaining values or finish deletions\n    start += replaceCount;\n    deleteCount < addCount\n      ? this._insert(start, items, replaceCount)\n      : this._delete(start, deleteCount - addCount);\n  }\n\n  /**\n   * @internal\n   */\n  protected _insert(\n    start: number,\n    items: T[],\n    min = 0,\n    max = items.length\n  ): void {\n    const N = max - min;\n\n    // Check free space\n    let free = this._capacity - this._size;\n    if (free >= N) {\n      this._safeInsert(start, items, min, max);\n      return;\n    }\n\n    // Check if \"infinite\" capacity yet not enough space\n    if (!this._isFinite) {\n      this._safeInsert(start, items, min, min + free);\n      throw new Error(\"Out of memory\");\n    }\n\n    // Remove from head\n    if (start > 0) {\n      const shifted = Math.min(start, N - free);\n      this._overflow(this._slice(0, shifted));\n      this._shift(shifted);\n      start -= shifted;\n      free += shifted;\n    }\n\n    // Check free space\n    if (free >= N) {\n      this._safeInsert(start, items, min, max);\n      return;\n    }\n\n    // Remove from items and insert remaining\n    const mid = max - free;\n    this._overflow(items.slice(min, mid));\n    this._safePresert(0, items, mid, max);\n  }\n\n  /**\n   * @internal\n   */\n  protected _safeInsert(\n    vIndex: number,\n    items: T[],\n    min = 0,\n    max = items.length\n  ): void {\n    const N = max - min;\n    const vals = this._vals;\n\n    // Make space\n    this._copyWithin(vIndex + N, vIndex, this._size);\n\n    // Insert into space\n    for (const [start, end] of this.toRanges(vIndex, vIndex + N)) {\n      for (let i = start; i < end; ++i) {\n        vals[i] = items[min++];\n      }\n    }\n\n    // Update state\n    this._size += N;\n    this._next = this.toIndex(this._size);\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.values();\n  }\n\n  unshift(...items: T[]): number {\n    // If no items\n    if (items.length <= 0) {\n      return this._size;\n    }\n\n    // If no capacity\n    if (this._capacity <= 0) {\n      this._overflow(items);\n      return this._size;\n    }\n\n    // Presert items\n    this._presert(0, items);\n\n    // Return new size\n    return this._size;\n  }\n\n  /**\n   * @internal\n   */\n  protected _presert(\n    end: number,\n    items: T[],\n    min = 0,\n    max = items.length\n  ): void {\n    const N = max - min;\n\n    // Check free space\n    let free = this._capacity - this._size;\n    if (free >= N) {\n      this._safePresert(end, items, min, max);\n      return;\n    }\n\n    // Check if \"infinite\" capacity yet not enough space\n    if (!this._isFinite) {\n      this._safePresert(end, items, max - free, max);\n      throw new Error(\"Out of memory\");\n    }\n\n    // Remove from tail\n    if (end < this._size) {\n      const popped = Math.min(this._size - end, N - free);\n      this._overflow(this._slice(this._size - popped, this._size));\n      this._pop(popped);\n      free += popped;\n    }\n\n    // Check free space\n    if (free >= N) {\n      this._safePresert(end, items, min, max);\n      return;\n    }\n\n    // Remove from items and insert remaining\n    const mid = min + free;\n    this._overflow(items.slice(mid, max));\n    this._safeInsert(this._size, items, min, mid);\n  }\n\n  /**\n   * @internal\n   */\n  protected _safePresert(\n    vIndex: number,\n    items: T[],\n    min = 0,\n    max = items.length\n  ): void {\n    const capacity = this._capacity;\n    const N = max - min;\n    const vals = this._vals;\n\n    // Make space\n    const newHead = capacity - N;\n    this._copyWithin(newHead, 0, vIndex);\n\n    // Insert into space\n    vIndex += newHead;\n    for (const [start, end] of this.toRanges(vIndex, vIndex + N)) {\n      for (let i = start; i < end; ++i) {\n        vals[i] = items[min++];\n      }\n    }\n\n    // Update state\n    this._size += N;\n    this._head = this.toIndex(newHead);\n  }\n\n  *values(): IterableIterator<T> {\n    for (let ext = 0; ext < this._size; ++ext) {\n      yield this._vals[this.toIndex(ext)];\n    }\n  }\n\n  /**\n   * @internal\n   *\n   * Emit an overflow event containing the items evicted from the collection.\n   *\n   * @param evicted - The items evicted from the collection.\n   */\n  protected _overflow(evicted: T[]): void {\n    this._emitter.emit(BoundedEvent.Overflow, evicted);\n  }\n\n  /**\n   * @internal\n   *\n   * Grow capacity.\n   *\n   * @param capacity - the new capacity\n   */\n  protected grow(capacity: number): void {\n    // Check if list is sequential: [    H123456T    ]\n    if (this.isSequential()) {\n      this.sequentialReset(capacity);\n      return;\n    }\n\n    // Queue is not sequential: [456T    H123]\n    if (this._size <= this._head) {\n      // [H123456T] = A + B = N\n      const temp = this._size - this._next;\n      this._vals.copyWithin(temp, 0, this._next);\n      this._vals.copyWithin(0, this._head, this._head + temp);\n      this._vals.length = this._size;\n      this._head = 0;\n      this._next = this._size;\n    } else if (this._head + this._size <= capacity) {\n      // [        H123456T] = 2B < 2N\n      this._vals.length = this._head + this._size;\n      this._vals.copyWithin(this._capacity, 0, this._next);\n      this._vals.fill(undefined as T, 0, this._next);\n      this._next = (this._head + this._size) % capacity;\n    } /* else if (this.next + this._size <= capacity) {\n      // [    H123456T] = A + 2B = N + B < 2N\n      const temp = this._capacity - this.head;\n      this.vals.length = capacity;\n      this.vals.copyWithin(this.next, this.head, this._capacity);\n      this.vals.copyWithin(this.next + temp, 0, this.next);\n      this.vals.fill(undefined as T, 0, this.next);\n      this.vals.length = this.next + this._size;\n      this.head = this.next;\n      this.next = (this.head + this._size) % capacity;\n    } */ else {\n      // [6T      H12345] = B + D < 2B < 2N\n      const diff = capacity - this._capacity;\n      this._vals.length = capacity;\n      this._vals.copyWithin(this._capacity, 0, diff);\n      this._vals.copyWithin(0, diff, this._next);\n      const temp = Math.max(diff, this._next - diff);\n      this._vals.fill(undefined as T, temp, this._next);\n      this._next -= diff;\n    }\n\n    // Update capacity\n    this._capacity = capacity;\n  }\n\n  /**\n   * @internal\n   *\n   * Returns whether the list is stored sequentially in memory.\n   *\n   * @returns `true` if the list is sequential in memory, `false` otherwise.\n   */\n  protected isSequential(): boolean {\n    return this._head < this._next || this._next <= 0;\n  }\n\n  /**\n   * @internal\n   *\n   * Adjusts the list to fit within the given capacity.\n   *\n   * Assumes the list:\n   * - is sequential in memory.\n   * - fits in the given capacity (size \\<= capacity).\n   *\n   * @param capacity - The new capacity.\n   *\n   * @returns `true` if the list was reset, `false` otherwise.\n   */\n  protected sequentialReset(capacity: number): boolean {\n    const tail = this._head + this._size;\n\n    // If list fits in current location: [    H------T    ]\n    if (tail <= capacity) {\n      this._vals.length = tail;\n      this._next = this._vals.length % capacity;\n\n      // If list must be fully moved: [H------T    ]\n    } else if (this._head >= capacity) {\n      this._vals.copyWithin(0, this._head, tail);\n      this._vals.length = this._size;\n      this._head = 0;\n      this._next = this._size % capacity;\n\n      // If list must be partially moved: [--T  H----]\n    } else {\n      this._vals.copyWithin(0, capacity, tail);\n      this._vals.length = capacity;\n      this._next = tail - capacity;\n    }\n\n    this._capacity = capacity;\n    return true;\n  }\n\n  /**\n   * @internal\n   *\n   * Shrink capacity.\n   *\n   * @param capacity - the new capacity\n   */\n  protected shrink(capacity: number): void {\n    // Handle overflow\n    if (this._size > capacity) {\n      const shifted = this._size - capacity;\n      this._overflow(this._slice(0, shifted));\n      this._shift(shifted);\n    }\n\n    // Check if list is sequential: [    H123456T    ]\n    if (this.isSequential()) {\n      this.sequentialReset(capacity);\n      return;\n    }\n\n    // Shift 1st half of list: [456T....H123] -> [456T..H123]\n    const diff = this._capacity - capacity;\n    this._vals.copyWithin(this._head - diff, this._head, this._capacity);\n    this._vals.length = capacity;\n    this._head -= diff;\n    this._capacity = capacity;\n  }\n\n  /**\n   * @internal\n   */\n  protected toIndex(externalIndex: number): number {\n    return (this._head + externalIndex) % this._capacity;\n  }\n\n  /**\n   * @internal\n   */\n  protected toList(items: T[]): CircularArrayList<T> {\n    const out = new CircularArrayList<T>(0);\n    out._vals = items;\n    out._size = items.length;\n    out._capacity = items.length;\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  protected toRanges(min: number, max: number): [number, number][] {\n    const head = this._head;\n    const mid = this._capacity - head;\n    if (max <= mid) {\n      return [[head + min, head + max]];\n    }\n    if (min >= mid) {\n      return [[min - mid, max - mid]];\n    }\n    return [\n      [head + min, this._capacity],\n      [0, max - mid],\n    ];\n  }\n}\n","import { BoundedEvent } from \"../types/boundedEvent\";\nimport { Bounded } from \"../types/bounded\";\nimport { Deque } from \"..\";\nimport { CircularArrayList } from \"./circularArrayList\";\n\n/**\n * A circular deque is similar to a traditional deque, but uses a fixed-size,\n * circular buffer. When the deque reaches its maximum capacity and a new\n * element is added, the oldest is discarded, thus maintaining its size.\n *\n * This structure efficiently utilizes memory for applications where only the\n * most recent additions are of interest and older data can be discarded.\n *\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularDeque<T> implements Bounded<T>, Deque<T> {\n  /**\n   * @internal\n   */\n  protected _list: CircularArrayList<T>;\n\n  /**\n   * Creates a new deque. Default `capacity` is `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new deque with the given capacity.\n   *\n   * @param capacity - the deque's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new deque from the given items. `capacity` will equal the number of items.\n   *\n   * @param items - the initial values in the deque.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    this._list = new CircularArrayList(capacity as number);\n  }\n\n  get capacity(): number {\n    return this._list.capacity;\n  }\n\n  get size(): number {\n    return this._list.size;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return CircularDeque.name;\n  }\n\n  set capacity(capacity: number) {\n    this._list.capacity = capacity;\n  }\n\n  clear(): void {\n    this._list.clear();\n  }\n\n  entries(): IterableIterator<[number, T]> {\n    return this._list.entries();\n  }\n\n  first(): T | undefined {\n    return this._list.first();\n  }\n\n  forEach(\n    callbackfn: (value: T, index: number, collection: this) => void,\n    thisArg?: unknown\n  ): void {\n    return this._list.forEach((v, i) => callbackfn.call(thisArg, v, i, this));\n  }\n\n  front(): T | undefined {\n    return this._list.first();\n  }\n\n  has(value: T): boolean {\n    return this._list.has(value);\n  }\n\n  keys(): IterableIterator<number> {\n    return this._list.keys();\n  }\n\n  last(): T | undefined {\n    return this._list.last();\n  }\n\n  pop(): T | undefined {\n    return this._list.pop();\n  }\n\n  push(...elems: T[]): number {\n    return this._list.push(...elems);\n  }\n\n  shift(): T | undefined {\n    return this._list.shift();\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return this._list.values();\n  }\n\n  top(): T | undefined {\n    return this._list.last();\n  }\n\n  unshift(...elems: T[]): number {\n    return this._list.unshift(...elems);\n  }\n\n  values(): IterableIterator<T> {\n    return this._list.values();\n  }\n\n  addListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.addListener(event, listener);\n    return this;\n  }\n\n  on(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.on(event, listener);\n    return this;\n  }\n\n  prependListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.prependListener(event, listener);\n    return this;\n  }\n\n  removeListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.removeListener(event, listener);\n    return this;\n  }\n}\n","import { LinkedNode } from \"../types/linkedNode\";\n\n/**\n * Removes and returns a segment of a linked list as a new list.\n *\n * This operation modifies the original list by removing the specified\n * range of nodes and returning the new list's head and tail as a tuple.\n * If `count` \\<= zero, the function returns [undefined, undefined].\n * If `count` \\> len(prev), a `TypeError` is thrown.\n *\n * @param prev - The node preceding the start of the section to be cut.\n * @param count - The number of nodes to include in the cut.\n *\n * @returns A tuple containing the head and tail of the removed segment,\n * or [undefined, undefined] if `count` \\<= zero.\n *\n * @throws - {@link TypeError}\n * thrown if `count` \\> `len(prev)`\n */\nexport function cut<N extends LinkedNode<unknown>>(\n  prev: N,\n  count: number\n): [N, N] | [undefined, undefined] {\n  if (count <= 0) {\n    return [undefined, undefined];\n  }\n  const head = prev.next!;\n  const tail = get(head, count - 1)!;\n  prev.next = tail.next;\n  tail.next = undefined;\n  return [head, tail];\n}\n\n/**\n * Iterates through a linked list, yielding each node's index\n * (position in the list) and value as a tuple.\n *\n * Iteration starts from the `node` node and continues until either the end\n * of the list, or the `end` node if provided.\n *\n * This generator function provides a convenient way to enumerate all nodes in\n * a linked list, similar to how `Array.prototype.entries()` works for arrays.\n *\n * @param node - The node at which to start iterating.\n * @param end - An optional node at which to end (exclusive).\n * If not provided, iteration continues until the end of the list.\n *\n * @throws - {@link TypeError}\n * thrown if an `end` node is provided but not encountered before the end of the list.\n */\nexport function* entries<T>(\n  node?: LinkedNode<T>,\n  end?: LinkedNode<T>\n): Generator<[number, T]> {\n  for (let i = 0; node != end; ++i) {\n    yield [i, node!.value];\n    node = node!.next;\n  }\n}\n\n/**\n * Retrieves the node at the specified distance from the given node.\n *\n * This function iterates through the linked list starting from the `node`\n * node, moving `index` nodes away in the list.\n *\n * @param node - The node from which to start.\n * @param index - The forward distance of the node to retrieve.\n *\n * @returns The node at the specified index,\n * or `undefined` if `index` does not exist.\n */\nexport function get<N extends LinkedNode<unknown>>(\n  node: N | undefined,\n  index: number\n): N | undefined {\n  if (index < 0) {\n    return undefined;\n  }\n  for (let i = 0; node != null && i < index; ++i) {\n    node = node.next;\n  }\n  return node;\n}\n\n/**\n * Determines whether a linked list contains a node with a specified value.\n *\n * Iteration starts from the `node` node and continues until either the end\n * of the list, or the `end` node if provided.\n *\n * @param node - The node from which to start searching.\n * @param value - The value to search for.\n * @param end - An optional node at which to end the search (exclusive).\n * If not provided, the search continues until the end of the list.\n *\n * @returns `true` if the specified value is found, `false` otherwise.\n *\n * @throws - {@link TypeError}\n * thrown if an `end` node is provided but not encountered before the end of the list.\n *\n */\nexport function has<T>(\n  node: LinkedNode<T> | undefined,\n  value: T,\n  end?: LinkedNode<T>\n): boolean {\n  while (node != end) {\n    if (node!.value === value) {\n      return true;\n    }\n    node = node!.next;\n  }\n  return false;\n}\n\n/**\n * Inserts a new sequence of values into a linked list right after a specified node.\n *\n * @param prev - The node in the linked list after which the new values will be inserted.\n * @param values - An iterable of values to be inserted.\n * @returns The last node that was inserted into the list, or `prev` if no values were inserted.\n */\nexport function insert<T>(\n  prev: LinkedNode<T>,\n  values: Iterable<T>\n): LinkedNode<T> {\n  // Convert values to list\n  const [head, tail, size] = toList(values);\n\n  // If no values\n  if (size <= 0) {\n    return prev;\n  }\n\n  // Add values\n  tail!.next = prev.next;\n  prev.next = head;\n\n  return tail!;\n}\n\n/**\n * Iterates through a linked list, yielding each node's index\n * (position in the list).\n *\n * Iteration starts from the `node` node and continues until either the end\n * of the list, or the `end` node if provided.\n *\n * This generator function provides a convenient way to enumerate all nodes in\n * a linked list, similar to how `Array.prototype.entries()` works for arrays.\n *\n * @param node - The node at which to start iterating.\n * @param end - An optional node at which to end (exclusive).\n * If not provided, iteration continues until the end of the list.\n *\n * @throws - {@link TypeError}\n * thrown if an `end` node is provided but not encountered before the end of the list.\n */\nexport function* keys<T>(\n  node?: LinkedNode<T>,\n  end?: LinkedNode<T>\n): Generator<number> {\n  for (let i = 0; node != end; ++i) {\n    yield i;\n    node = node!.next;\n  }\n}\n\n/**\n * Finds the tail of the linked list and the distance to it.\n *\n * This function iterates through the linked list starting from the `node`\n * node, counting each node until it reaches the tail of the list (\n * where node.next is null or undefined).\n *\n * @param node - The node from which to start counting.\n *\n * @returns a tuple with the tail and distance to it.\n */\nexport function getTail(node?: null): [undefined, -1];\nexport function getTail<N extends LinkedNode<unknown>>(node: N): [N, number];\nexport function getTail<N extends LinkedNode<unknown>>(\n  node?: N | null\n): [N, number] | [undefined, -1];\nexport function getTail<N extends LinkedNode<unknown>>(\n  node?: N | null\n): [N, number] | [undefined, -1] {\n  if (node == null) {\n    return [undefined, -1];\n  }\n  let count = 0;\n  while (node.next != null) {\n    node = node.next;\n    ++count;\n  }\n  return [node, count];\n}\n\n/**\n * Converts a linked list into an array of values.\n *\n * The conversion starts from the `node` node and includes all nodes up to the\n * end of the list, or the `end` node if provided.\n *\n * @param node - The node at which to start converting.\n * @param end - An optional node at which to end (exclusive).\n * If not provided, conversion continues until the end of the list.\n *\n * @returns An array with the values of the list from `node` to `end`.\n *\n * @throws - {@link TypeError}\n * thrown if an `end` node is provided but\n * not encountered before the end of the list.\n */\nexport function toArray<T>(node?: LinkedNode<T>, end?: LinkedNode<T>): T[] {\n  const array: T[] = [];\n\n  while (node != end) {\n    array.push(node!.value);\n    node = node!.next;\n  }\n\n  return array;\n}\n\n/**\n * Converts an iterable collection of values into a linked list and returns\n * the head, tail and size of the list.\n *\n * If the iterable is empty, the function returns a triple containing\n * `[undefined, undefined, 0]` to indicate that no list was created.\n *\n * @param values - The iterable collection of elements.\n *\n * @returns A triple containing the head, tail and size of the list.\n * Returns `[undefined, undefined, 0]` if the iterable is empty.\n */\nexport function toList<T>(\n  values: Iterable<T>\n): [LinkedNode<T>, LinkedNode<T>, number] | [undefined, undefined, 0] {\n  const root = {} as LinkedNode<T>;\n\n  let count = 0;\n  let tail = root;\n  for (const value of values) {\n    tail.next = { value };\n    tail = tail.next;\n    ++count;\n  }\n\n  return root.next === undefined\n    ? [undefined, undefined, 0]\n    : [root.next, tail, count];\n}\n\n/**\n * Iterates through a linked list, yielding each node's value.\n *\n * Iteration starts from the `node` node and continues until either the end\n * of the list, or the `end` node if provided.\n *\n * This generator function provides a convenient way to enumerate all nodes in\n * a linked list, similar to how `Array.prototype.entries()` works for arrays.\n *\n * @param node - The node at which to start iterating.\n * @param end - An optional node at which to end (exclusive).\n * If not provided, iteration continues until the end of the list.\n *\n * @throws - {@link TypeError}\n * thrown if an `end` node is provided but not encountered before the end of the list.\n */\nexport function* values<T>(\n  head?: LinkedNode<T>,\n  end?: LinkedNode<T>\n): Generator<T> {\n  for (let i = 0; head != end; ++i) {\n    yield head!.value;\n    head = head!.next;\n  }\n}\n","import { DoublyLinkedNode } from \"../types/doublyLinkedNode\";\n\nimport { get as singlyGet, cut as singlyCut } from \"./linkedNode\";\n\n/**\n * Removes and returns a segment of a linked list as a new list.\n *\n * This operation modifies the original list by removing the specified\n * range of nodes and returning the new list's head and tail as a tuple.\n * If `count` \\<= zero, the function returns [undefined, undefined].\n * If `count` \\> len(prev), a `TypeError` is thrown.\n *\n * @param prev - The node preceding the start of the section to be cut.\n * @param count - The number of nodes to include in the cut.\n *\n * @returns A tuple containing the head and tail of the removed segment,\n * or [undefined, undefined] if `count` \\<= zero.\n *\n * @throws - {@link TypeError}\n * thrown if `count` \\> `len(prev)`\n */\nexport function cut<N extends DoublyLinkedNode<unknown>>(\n  root: N,\n  count: number\n): [N, N] | [undefined, undefined] {\n  if (count <= 0) {\n    return [undefined, undefined];\n  }\n  const [head, tail] = singlyCut(root, count) as [N, N];\n  head.prev = undefined;\n  if (root.next != null) {\n    root.next.prev = root;\n  }\n  return [head, tail];\n}\n\n/**\n * Retrieves the node at the specified distance from the given node.\n *\n * This function iterates through the linked list starting from the `node`\n * node, moving `index` nodes away in the list.\n *\n * @param node - The node from which to start.\n * @param index - The forward distance of the node to retrieve.\n *\n * @returns The node at the specified index,\n * or `undefined` if `index` does not exist.\n */\nexport function get<N extends DoublyLinkedNode<unknown>>(\n  node: N | undefined,\n  index: number\n): N | undefined {\n  if (index >= 0) {\n    return singlyGet(node, index);\n  }\n  for (let i = 0; node != null && i > index; --i) {\n    node = node.prev;\n  }\n  return node;\n}\n\n/**\n * Inserts a new sequence of values into a linked list right after a specified node.\n *\n * @param prev - The node in the linked list after which the new values will be inserted.\n * @param values - An iterable of values to be inserted.\n *\n * @returns The last node that was inserted into the list, or `prev` if no values were inserted.\n */\nexport function insert<T>(\n  prev: DoublyLinkedNode<T>,\n  values: T[]\n): DoublyLinkedNode<T> {\n  // Convert values to list\n  const [head, tail, size] = toList(values);\n\n  // If no values\n  if (size <= 0) {\n    return prev;\n  }\n\n  // Add values\n  const next = prev.next;\n  prev.next = head;\n  head!.prev = prev;\n  tail!.next = next;\n  if (next != null) {\n    next.prev = tail;\n  }\n\n  return tail!;\n}\n\n/**\n * Converts an iterable collection of values into a linked list and returns\n * the head, tail and size of the list.\n *\n * If the iterable is empty, the function returns a triple containing\n * `[undefined, undefined, 0]` to indicate that no list was created.\n *\n * @param values - The iterable collection of elements.\n *\n * @returns A triple containing the head, tail and size of the list.\n * Returns `[undefined, undefined, 0]` if the iterable is empty.\n */\nexport function toList<T>(\n  values: Iterable<T>\n):\n  | [DoublyLinkedNode<T>, DoublyLinkedNode<T>, number]\n  | [undefined, undefined, 0] {\n  const root = {} as DoublyLinkedNode<T>;\n\n  let count = 0;\n  let tail = root;\n  for (const value of values) {\n    tail.next = { prev: tail, value } as DoublyLinkedNode<T>;\n    tail = tail.next;\n    ++count;\n  }\n\n  if (count <= 0) {\n    return [undefined, undefined, 0];\n  }\n\n  root.next!.prev = undefined;\n  return [root.next!, tail, count];\n}\n","import { Bounded, BoundedEvent } from \"..\";\nimport { DoublyLinkedNode as Node } from \"../types/doublyLinkedNode\";\nimport { List } from \"../types/list\";\nimport { cut, get, toList } from \"../utils/doublyLinkedNode\";\nimport { isInfinity, isNumber, isSafeCount } from \"../utils/is\";\nimport { entries, has, keys, toArray, values } from \"../utils/linkedNode\";\nimport { addIfBelow, clamp, isInRange, toInteger } from \"../utils/math\";\nimport { CircularBase } from \"./circularBase\";\n\nexport class CircularDoublyLinkedList<T>\n  extends CircularBase<T>\n  implements Bounded<T>, List<T>\n{\n  /**\n   * @internal\n   * The maximum number of elements that can be stored in the collection.\n   */\n  protected _capacity: number;\n\n  /**\n   * @internal\n   * The root of the linked list\n   */\n  protected _root: Node<T>;\n\n  /**\n   * @internal\n   * The current size of the list (0 \\<= size \\<= capacity)\n   */\n  protected _size!: number;\n\n  /**\n   * Creates a standard linked list (no capacity restriction).\n   */\n  constructor();\n  /**\n   * Creates a linked list with the given capacity.\n   *\n   * @param capacity - the list's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a linked list with the given items. Capacity is set to the number of items.\n   *\n   * @param items - the values to store in the list.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    super();\n\n    // Initialize class variables\n    this._capacity = Infinity;\n    this._root = { value: undefined } as Node<T>;\n    this.clear();\n\n    // Case 1: capacity is null, undefined or Infinity\n    capacity = capacity ?? Infinity;\n    if (isInfinity(capacity)) {\n      return;\n    }\n\n    // Case 2: capacity is zero or a positive safe integer\n    if (isNumber(capacity)) {\n      if (!isSafeCount(capacity)) {\n        throw new RangeError(\"Invalid capacity\");\n      }\n      this._capacity = capacity;\n      return;\n    }\n\n    // Case 3: capacity is iterable\n    const [head, tail, size] = toList(capacity as Iterable<T>);\n    this._capacity = size;\n    if (size > 0) {\n      this._root.next = head!;\n      this._root.prev = tail!;\n      head!.prev = this._root;\n      tail!.next = this._root;\n      this._size = size;\n    }\n  }\n\n  get capacity(): number {\n    return this._capacity;\n  }\n\n  get size(): number {\n    return this._size;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return CircularDoublyLinkedList.name;\n  }\n\n  set capacity(capacity: number) {\n    // Convert input to a number\n    capacity = +capacity;\n\n    // If input is NaN, below zero, or a non-integer\n    if (!isInfinity(capacity) && !isSafeCount(capacity)) {\n      throw new RangeError(\"Invalid capacity\");\n    }\n\n    // Update capacity\n    this._capacity = capacity;\n\n    // If current size fits within new capacity\n    if (this._size <= capacity) {\n      return;\n    }\n\n    // Shrink\n    const diff = this._size - capacity;\n    const [head, tail] = cut(this._root, diff);\n    this._size -= diff;\n\n    // Emit discarded items\n    this._emitter.emit(BoundedEvent.Overflow, toArray(head, tail!.next));\n  }\n\n  at(index: number): T | undefined {\n    // Check index\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return undefined;\n    }\n\n    // Return value\n    return this.get(index).value;\n  }\n\n  clear(): void {\n    this._size = 0;\n    this._root.next = this._root;\n    this._root.prev = this._root;\n  }\n\n  delete(index: number): boolean {\n    // Check index\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return false;\n    }\n\n    // Delete value\n    const node = this.get(index);\n    node.prev!.next = node.next;\n    node.next!.prev = node.prev;\n    --this._size;\n\n    return true;\n  }\n\n  entries(): IterableIterator<[number, T]> {\n    return entries(this._root.next, this._root);\n  }\n\n  fill(value: T, start?: number, end?: number): this {\n    // Sanitize start\n    start = toInteger(start, 0);\n    start = clamp(addIfBelow(start, this._size), 0, this._size);\n\n    // Sanitize end\n    end = toInteger(end, this._size);\n    end = clamp(addIfBelow(end, this._size), 0, this._size);\n\n    // Update values\n    let node = this.get(start);\n    while (start < end) {\n      node.value = value;\n      node = node.next!;\n      ++start;\n    }\n\n    return this;\n  }\n\n  forEach(\n    callbackfn: (value: T, index: number, list: this) => void,\n    thisArg?: unknown\n  ): void {\n    let node = this._root;\n    for (let i = 0; i < this._size; ++i) {\n      node = node.next!;\n      callbackfn.call(thisArg, node.value, i, this);\n    }\n  }\n\n  has(value: T): boolean {\n    return has(this._root.next, value, this._root);\n  }\n\n  keys(): IterableIterator<number> {\n    return keys(this._root.next, this._root);\n  }\n\n  pop(): T | undefined {\n    // Check if empty\n    if (this._size <= 0) {\n      return undefined;\n    }\n\n    // Remove tail\n    const node = this._root.prev!;\n    node.prev!.next = node.next;\n    node.next!.prev = node.prev;\n    --this._size;\n\n    // Return value\n    return node.value;\n  }\n\n  push(...values: T[]): number {\n    // Case 1: No values\n    const N = values.length;\n    if (N <= 0) {\n      return this._size;\n    }\n\n    // Case 2: Zero capacity\n    const capacity = this._capacity;\n    if (capacity <= 0) {\n      this._emitter.emit(BoundedEvent.Overflow, values);\n      return this._size;\n    }\n\n    // Add values\n    this.append(this._root.prev!, values);\n\n    // Return size\n    return this._size;\n  }\n\n  set(index: number, value: T): T | undefined {\n    // Check index\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return undefined;\n    }\n\n    // Update node\n    const node = this.get(index);\n    const prevValue = node.value;\n    node.value = value;\n\n    // Return previous value\n    return prevValue;\n  }\n\n  shift(): T | undefined {\n    // Check if empty\n    if (this._size <= 0) {\n      return undefined;\n    }\n\n    // Remove head\n    const head = this._root.next!;\n    head.prev!.next = head.next;\n    head.next!.prev = head.prev;\n    --this._size;\n\n    // Return value\n    return head.value;\n  }\n\n  slice(start?: number, end?: number): CircularDoublyLinkedList<T> {\n    const out = new CircularDoublyLinkedList<T>();\n\n    // Check if empty\n    if (this._size <= 0) {\n      return out;\n    }\n\n    // Sanitize start\n    start = toInteger(start, 0);\n    start = clamp(addIfBelow(start, this._size), 0, this._size);\n\n    // Sanitize end\n    end = toInteger(end, this._size);\n    end = clamp(addIfBelow(end, this._size), 0, this._size);\n\n    // Add values to output\n    let prev = this.get(start - 1);\n    while (start < end) {\n      prev = prev.next!;\n      out.push(prev.value);\n      ++start;\n    }\n\n    // Return new list\n    return out;\n  }\n\n  splice(\n    start: number,\n    deleteCount?: number,\n    ...items: T[]\n  ): CircularDoublyLinkedList<T> {\n    const out = new CircularDoublyLinkedList<T>();\n\n    // Sanitize start\n    start = toInteger(start, 0);\n    start = clamp(addIfBelow(start, this._size), 0, this._size);\n\n    // Sanitize deleteCount\n    deleteCount = toInteger(deleteCount, 0);\n    deleteCount = clamp(deleteCount, 0, this._size - start);\n\n    // Get prev node\n    const prev = this.get(start - 1);\n\n    // Delete values\n    if (deleteCount > 0) {\n      const [head, tail] = cut(prev, deleteCount);\n      this._size -= deleteCount;\n      head!.prev = out._root;\n      tail!.next = out._root;\n      out._root.next = head;\n      out._root.prev = tail;\n      out._size = deleteCount;\n    }\n\n    // Add values\n    this.append(prev, items);\n    return out;\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return values(this._root.next, this._root);\n  }\n\n  unshift(...values: T[]): number {\n    // Case 1: No values\n    const N = values.length;\n    if (N <= 0) {\n      return this._size;\n    }\n\n    // Case 2: Zero capacity\n    const capacity = this._capacity;\n    if (capacity <= 0) {\n      this._emitter.emit(BoundedEvent.Overflow, values);\n      return this._size;\n    }\n\n    // Add values\n    this.prepend(this._root.next!, values);\n\n    // Return size\n    return this._size;\n  }\n\n  values(): IterableIterator<T> {\n    return values(this._root.next, this._root);\n  }\n\n  /**\n   * @internal\n   */\n  protected append(tail: Node<T>, values: T[]): Node<T> {\n    const root = this._root;\n    const next = tail.next!;\n    const evicted: T[] = [];\n    const capacity = this._capacity;\n\n    // Add values\n    let size = this._size;\n    const N = values.length;\n    for (let i = 0; i < N; ++i) {\n      const curr = { prev: tail, value: values[i] } as Node<T>;\n      tail.next = curr;\n      tail = curr;\n      if (size < capacity) {\n        ++size;\n      } else {\n        evicted.push(root.next!.value);\n        root.next = root.next!.next;\n      }\n    }\n    tail.next = next;\n    next.prev = tail;\n    root.next!.prev = root;\n\n    // Emit evicted items\n    if (evicted.length > 0) {\n      this._emitter.emit(BoundedEvent.Overflow, evicted);\n    }\n\n    // Update size\n    this._size = size;\n\n    // Return last node\n    return tail;\n  }\n\n  /**\n   * @internal\n   */\n  protected get(index: number): Node<T> {\n    index -= index <= this._size / 2 ? -1 : this._size;\n    return get(this._root, index)!;\n  }\n\n  /**\n   * @internal\n   */\n  protected prepend(next: Node<T>, values: T[]): Node<T> {\n    const root = this._root;\n    const prev = next.prev!;\n    const evicted: T[] = [];\n    const capacity = this._capacity;\n\n    // Add values\n    let size = this._size;\n    for (let i = values.length - 1; i >= 0; --i) {\n      const curr = { next, value: values[i] } as Node<T>;\n      next.prev = curr;\n      next = curr;\n      if (size < capacity) {\n        ++size;\n      } else {\n        evicted.push(root.prev!.value);\n        root.prev = root.prev!.prev;\n      }\n    }\n    next.prev = prev;\n    prev.next = next;\n    root.prev!.next = root;\n\n    // Emit evicted items\n    if (evicted.length > 0) {\n      this._emitter.emit(BoundedEvent.Overflow, evicted.reverse());\n    }\n\n    // Update size\n    this._size = size;\n\n    // Return last node\n    return next;\n  }\n}\n","import { BoundedEvent } from \"../types/boundedEvent\";\nimport { Bounded } from \"../types/bounded\";\nimport { Deque } from \"../types/deque\";\n\nimport { CircularDoublyLinkedList } from \"./circularDoublyLinkedList\";\n\n/**\n * A circular deque is similar to a traditional deque, but uses a fixed-size,\n * circular buffer. When the deque reaches its maximum capacity and a new\n * element is added, the oldest is discarded, thus maintaining its size.\n *\n * This structure efficiently utilizes memory for applications where only the\n * most recent additions are of interest and older data can be discarded.\n *\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularLinkedDeque<T> implements Bounded<T>, Deque<T> {\n  /**\n   * @internal\n   */\n  protected _list: CircularDoublyLinkedList<T>;\n\n  /**\n   * Creates a new stack with `capacity` defaulted to `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new stack with the given capacity.\n   *\n   * @param capacity - the stack's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new stack. Initial capacity is the number of items given.\n   *\n   * @param items - the values to store in the stack.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    this._list = new CircularDoublyLinkedList(capacity as number);\n  }\n\n  get capacity(): number {\n    return this._list.capacity;\n  }\n\n  get size(): number {\n    return this._list.size;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return CircularLinkedDeque.name;\n  }\n\n  set capacity(capacity: number) {\n    this._list.capacity = capacity;\n  }\n\n  first(): T | undefined {\n    return this._list.at(0);\n  }\n\n  front(): T | undefined {\n    return this._list.at(0);\n  }\n\n  clear(): void {\n    this._list.clear();\n  }\n\n  entries(): IterableIterator<[number, T]> {\n    return this._list.entries();\n  }\n\n  forEach(\n    callbackfn: (value: T, index: number, collection: this) => void,\n    thisArg?: unknown\n  ): void {\n    this._list.forEach((v, i) => callbackfn.call(thisArg, v, i, this), thisArg);\n  }\n\n  has(value: T): boolean {\n    return this._list.has(value);\n  }\n\n  keys(): IterableIterator<number> {\n    return this._list.keys();\n  }\n\n  last(): T | undefined {\n    return this._list.at(-1);\n  }\n\n  pop(): T | undefined {\n    return this._list.pop();\n  }\n\n  push(...elems: T[]): number {\n    return this._list.push(...elems);\n  }\n\n  shift(): T | undefined {\n    return this._list.shift();\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.values();\n  }\n\n  top(): T | undefined {\n    return this._list.at(-1);\n  }\n\n  unshift(...elems: T[]): number {\n    return this._list.unshift(...elems);\n  }\n\n  values(): IterableIterator<T> {\n    return this._list.values();\n  }\n\n  addListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.addListener(event, listener);\n    return this;\n  }\n\n  on(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.on(event, listener);\n    return this;\n  }\n\n  prependListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.prependListener(event, listener);\n    return this;\n  }\n\n  removeListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.removeListener(event, listener);\n    return this;\n  }\n}\n","import { Bounded, BoundedEvent } from \"..\";\nimport { LinkedNode as Node } from \"../types/linkedNode\";\nimport { List } from \"../types/list\";\nimport { isInfinity, isNumber, isSafeCount } from \"../utils/is\";\nimport {\n  cut,\n  entries,\n  get,\n  has,\n  keys,\n  toArray,\n  toList,\n  values,\n} from \"../utils/linkedNode\";\nimport { addIfBelow, clamp, isInRange, toInteger } from \"../utils/math\";\nimport { CircularBase } from \"./circularBase\";\n\nexport class CircularLinkedList<T>\n  extends CircularBase<T>\n  implements Bounded<T>, List<T>\n{\n  /**\n   * @internal\n   * The maximum number of elements that can be stored in the collection.\n   */\n  protected _capacity: number;\n\n  /**\n   * @internal\n   * The root of the linked list\n   */\n  protected _root: Node<T>;\n\n  /**\n   * @internal\n   * The current size of the list (0 \\<= size \\<= capacity)\n   */\n  protected _size!: number;\n\n  /**\n   * @internal\n   * The last node in the linked list.\n   */\n  protected _tail!: Node<T>;\n\n  /**\n   * Creates a standard linked list (no capacity restriction).\n   */\n  constructor();\n  /**\n   * Creates a linked list with the given capacity.\n   *\n   * @param capacity - the list's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a linked list with the given items. Capacity is set to the number of items.\n   *\n   * @param items - the values to store in the list.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    super();\n\n    // Initialize class variables\n    this._capacity = Infinity;\n    this._root = { value: undefined } as Node<T>;\n    this.clear();\n\n    // Case 1: capacity is null, undefined or Infinity\n    capacity = capacity ?? Infinity;\n    if (isInfinity(capacity)) {\n      return;\n    }\n\n    // Case 2: capacity is zero or a positive safe integer\n    if (isNumber(capacity)) {\n      if (!isSafeCount(capacity)) {\n        throw new RangeError(\"Invalid capacity\");\n      }\n      this._capacity = capacity;\n      return;\n    }\n\n    // Case 3: capacity is iterable\n    const [head, tail, size] = toList(capacity as Iterable<T>);\n    this._capacity = size;\n    if (size > 0) {\n      this._root.next = head;\n      this._tail = tail!;\n      this._size = size;\n    }\n  }\n\n  get capacity(): number {\n    return this._capacity;\n  }\n\n  get size(): number {\n    return this._size;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return CircularLinkedList.name;\n  }\n\n  set capacity(capacity: number) {\n    // Convert input to a number\n    capacity = +capacity;\n\n    // If input is NaN, below zero, or a non-integer\n    if (!isInfinity(capacity) && !isSafeCount(capacity)) {\n      throw new RangeError(\"Invalid capacity\");\n    }\n\n    // Update capacity\n    this._capacity = capacity;\n\n    // If current size fits within new capacity\n    if (this._size <= capacity) {\n      return;\n    }\n\n    // Shrink\n    const diff = this._size - capacity;\n    const [head] = cut(this._root, diff);\n    this._size -= diff;\n\n    // Update tail, if needed\n    if (this._size <= 0) {\n      this._tail = this._root;\n    }\n\n    // Emit discarded items\n    this._emitter.emit(BoundedEvent.Overflow, toArray(head));\n  }\n\n  at(index?: number): T | undefined {\n    // Check index\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return undefined;\n    }\n\n    // If tail\n    if (++index == this._size) {\n      return this._tail.value;\n    }\n\n    // Return value\n    return get(this._root, index)!.value;\n  }\n\n  clear(): void {\n    this._size = 0;\n    this._root.next = undefined;\n    this._tail = this._root;\n  }\n\n  delete(index: number): boolean {\n    // Check index\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return false;\n    }\n\n    // Delete value\n    const prev = get(this._root, index)!;\n    prev.next = prev.next!.next;\n    --this._size;\n\n    // Update tail, if needed\n    if (index == this._size) {\n      this._tail = prev;\n    }\n\n    return true;\n  }\n\n  entries(): IterableIterator<[number, T]> {\n    return entries(this._root.next);\n  }\n\n  fill(value: T, start?: number, end?: number): this {\n    // Sanitize start\n    start = toInteger(start, 0);\n    start = clamp(addIfBelow(start, this._size), 0, this._size);\n\n    // Sanitize end\n    end = toInteger(end, this._size);\n    end = clamp(addIfBelow(end, this._size), 0, this._size);\n\n    // Update values\n    let node = get(this._root, start + 1);\n    while (start < end) {\n      node!.value = value;\n      node = node!.next;\n      ++start;\n    }\n\n    return this;\n  }\n\n  forEach(\n    callbackfn: (value: T, index: number, list: this) => void,\n    thisArg?: unknown\n  ): void {\n    let node = this._root;\n    for (let i = 0; i < this._size; ++i) {\n      node = node.next!;\n      callbackfn.call(thisArg, node.value, i, this);\n    }\n  }\n\n  has(value: T): boolean {\n    return has(this._root.next, value);\n  }\n\n  keys(): IterableIterator<number> {\n    return keys(this._root.next);\n  }\n\n  pop(): T | undefined {\n    // Check if empty\n    if (this._size <= 0) {\n      return undefined;\n    }\n\n    // Remove and update tail\n    const value = this._tail.value;\n    this._tail = get(this._root, --this._size)!;\n    this._tail.next = undefined;\n\n    // Return value\n    return value;\n  }\n\n  push(...values: T[]): number {\n    // If no values\n    const N = values.length;\n    if (N <= 0) {\n      return this._size;\n    }\n\n    // If no capacity\n    const capacity = this._capacity;\n    if (capacity <= 0) {\n      this._emitter.emit(BoundedEvent.Overflow, values);\n      return this._size;\n    }\n\n    // Add values\n    this._tail = this._append(this._tail, values);\n\n    // Return size\n    return this._size;\n  }\n\n  set(index: number, value: T): T | undefined {\n    // Check index\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return undefined;\n    }\n\n    // Update node\n    const node = get(this._root, index + 1)!;\n    const prevValue = node.value;\n    node.value = value;\n\n    // Return previous value\n    return prevValue;\n  }\n\n  shift(): T | undefined {\n    // Check if empty\n    if (this._size <= 0) {\n      return undefined;\n    }\n\n    // Remove head\n    const head = this._root.next!;\n    this._root.next = head.next;\n    --this._size;\n\n    // Update tail, if needed\n    if (this._size <= 0) {\n      this._tail = this._root;\n    }\n\n    // Return value\n    return head.value;\n  }\n\n  slice(start?: number, end?: number): CircularLinkedList<T> {\n    const out = new CircularLinkedList<T>();\n\n    // Check if empty\n    if (this._size <= 0) {\n      return out;\n    }\n\n    // Sanitize start\n    start = toInteger(start, 0);\n    start = clamp(addIfBelow(start, this._size), 0, this._size);\n\n    // Sanitize end\n    end = toInteger(end, this._size);\n    end = clamp(addIfBelow(end, this._size), 0, this._size);\n\n    // Add values to output\n    let node = get(this._root, start)!;\n    while (start < end) {\n      node = node.next!;\n      out.push(node.value);\n      ++start;\n    }\n\n    // Return new list\n    return out;\n  }\n\n  splice(\n    start: number,\n    deleteCount?: number,\n    ...items: T[]\n  ): CircularLinkedList<T> {\n    const out = new CircularLinkedList<T>();\n\n    // Sanitize start\n    start = toInteger(start, 0);\n    start = clamp(addIfBelow(start, this._size), 0, this._size);\n\n    // Sanitize deleteCount\n    deleteCount = toInteger(deleteCount, 0);\n    deleteCount = clamp(deleteCount, 0, this._size - start);\n\n    // Get prev node\n    let prev = get(this._root, start)!;\n\n    // Delete values\n    if (deleteCount > 0) {\n      const [head, tail] = cut(prev, deleteCount);\n      this._size -= deleteCount;\n      out._root.next = head;\n      out._tail = tail!;\n      out._size = deleteCount;\n    }\n\n    // Add values\n    prev = this._append(prev, items);\n\n    // Update tail, if needed\n    if (prev.next == null) {\n      this._tail = prev;\n    }\n\n    return out;\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return values(this._root.next);\n  }\n\n  unshift(...values: T[]): number {\n    // Case 1: No values\n    let N = values.length;\n    if (N <= 0) {\n      return this._size;\n    }\n\n    // Case 2: No capacity\n    const capacity = this._capacity;\n    if (capacity <= 0) {\n      this._emitter.emit(BoundedEvent.Overflow, values);\n      return this._size;\n    }\n\n    // Reduce input\n    const diff = N <= capacity ? 0 : N - capacity;\n    N -= diff;\n\n    // Case 3: Discard list overflow\n    if (this._size + N > capacity) {\n      this._size = capacity - N;\n      const prev = get(this._root, this._size)!;\n      this._emitter.emit(BoundedEvent.Overflow, toArray(prev.next));\n      prev.next = undefined;\n      this._tail = prev;\n    }\n\n    // Discard input overflow\n    if (diff > 0) {\n      this._emitter.emit(BoundedEvent.Overflow, values.slice(N));\n      values.length = N;\n    }\n\n    // Add values\n    const [head, tail] = toList(values);\n    tail!.next = this._root.next;\n    this._root.next = head;\n\n    // Update tail, if needed\n    if (this._size <= 0) {\n      this._tail = tail!;\n    }\n\n    // Update size\n    this._size += N;\n    return this._size;\n  }\n\n  values(): IterableIterator<T> {\n    return values(this._root.next);\n  }\n\n  /**\n   * @internal\n   */\n  protected _append(tail: Node<T>, values: T[], minIndex = 0): Node<T> {\n    const root = this._root;\n    const next = tail.next;\n    const evicted: T[] = [];\n    const capacity = this._capacity;\n\n    // Add values\n    let size = this._size;\n    const N = values.length;\n    for (let i = minIndex; i < N; ++i) {\n      const curr = { value: values[i] } as Node<T>;\n      tail.next = curr;\n      tail = curr;\n      if (size < capacity) {\n        ++size;\n      } else {\n        evicted.push(root.next!.value);\n        root.next = root.next!.next;\n      }\n    }\n    tail.next = next;\n\n    // Emit evicted items\n    if (evicted.length > 0) {\n      this._emitter.emit(BoundedEvent.Overflow, evicted);\n    }\n\n    // Update size\n    this._size = size;\n\n    // Return last node\n    return tail;\n  }\n}\n","import { Queue } from \"../types/queue\";\nimport { Bounded } from \"../types/bounded\";\n\nimport { CircularLinkedList } from \"./circularLinkedList\";\nimport { BoundedEvent } from \"..\";\n\n/**\n * A circular queue is similar to a traditional queue, but uses a fixed-size,\n * circular buffer. When the queue reaches its maximum capacity and a new\n * element is added, the oldest is discarded, thus maintaining its size.\n *\n * This structure efficiently utilizes memory for applications where only the\n * most recent additions are of interest and older data can be discarded.\n *\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularLinkedQueue<T> implements Bounded<T>, Queue<T> {\n  /**\n   * @internal\n   */\n  protected _list: CircularLinkedList<T>;\n\n  /**\n   * Creates a new stack with `capacity` defaulted to `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new stack with the given capacity.\n   *\n   * @param capacity - the stack's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new stack. Initial capacity is the number of items given.\n   *\n   * @param items - the values to store in the stack.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    this._list = new CircularLinkedList(capacity as number);\n  }\n\n  get capacity(): number {\n    return this._list.capacity;\n  }\n\n  get size(): number {\n    return this._list.size;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return CircularLinkedQueue.name;\n  }\n\n  set capacity(capacity: number) {\n    this._list.capacity = capacity;\n  }\n\n  clear(): void {\n    this._list.clear();\n  }\n\n  entries(): IterableIterator<[number, T]> {\n    return this._list.entries();\n  }\n\n  first(): T | undefined {\n    return this._list.at(0);\n  }\n\n  forEach(\n    callbackfn: (value: T, index: number, collection: this) => void,\n    thisArg?: unknown\n  ): void {\n    this._list.forEach((v, i) => callbackfn.call(thisArg, v, i, this), thisArg);\n  }\n\n  front(): T | undefined {\n    return this._list.at(0);\n  }\n\n  has(value: T): boolean {\n    return this._list.has(value);\n  }\n\n  keys(): IterableIterator<number> {\n    return this._list.keys();\n  }\n\n  push(...elems: T[]): number {\n    return this._list.push(...elems);\n  }\n\n  shift(): T | undefined {\n    return this._list.shift();\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.values();\n  }\n\n  values(): IterableIterator<T> {\n    return this._list.values();\n  }\n\n  addListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.addListener(event, listener);\n    return this;\n  }\n\n  on(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.on(event, listener);\n    return this;\n  }\n\n  prependListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.prependListener(event, listener);\n    return this;\n  }\n\n  removeListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.removeListener(event, listener);\n    return this;\n  }\n}\n","import { Stack } from \"../types/stack\";\nimport { Bounded } from \"../types/bounded\";\nimport { BoundedEvent, CircularDoublyLinkedList } from \"..\";\n\n/**\n * A circular stack is similar to a traditional stack, but uses a fixed-size,\n * circular buffer. When the stack reaches its maximum capacity and a new\n * element is added, the oldest is discarded, thus maintaining its size.\n *\n * This structure efficiently utilizes memory for applications where only the\n * most recent additions are of interest and older data can be discarded.\n *\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularLinkedStack<T> implements Bounded<T>, Stack<T> {\n  /**\n   * @internal\n   */\n  protected _list: CircularDoublyLinkedList<T>;\n\n  /**\n   * Creates a new stack with `capacity` defaulted to `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new stack with the given capacity.\n   *\n   * @param capacity - the stack's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new stack. Initial capacity is the number of items given.\n   *\n   * @param items - the values to store in the stack.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    this._list = new CircularDoublyLinkedList(capacity as number);\n  }\n\n  get capacity(): number {\n    return this._list.capacity;\n  }\n\n  get size(): number {\n    return this._list.size;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return CircularLinkedStack.name;\n  }\n\n  set capacity(capacity: number) {\n    this._list.capacity = capacity;\n  }\n\n  clear(): void {\n    this._list.clear();\n  }\n\n  entries(): IterableIterator<[number, T]> {\n    return this._list.entries();\n  }\n\n  forEach(\n    callbackfn: (value: T, index: number, collection: this) => void,\n    thisArg?: unknown\n  ): void {\n    this._list.forEach((v, i) => callbackfn.call(thisArg, v, i, this), thisArg);\n  }\n\n  has(value: T): boolean {\n    return this._list.has(value);\n  }\n\n  keys(): IterableIterator<number> {\n    return this._list.keys();\n  }\n\n  last(): T | undefined {\n    return this._list.at(-1);\n  }\n\n  pop(): T | undefined {\n    return this._list.pop();\n  }\n\n  push(...elems: T[]): number {\n    return this._list.push(...elems);\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.values();\n  }\n\n  top(): T | undefined {\n    return this._list.at(-1);\n  }\n\n  values(): IterableIterator<T> {\n    return this._list.values();\n  }\n\n  addListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.addListener(event, listener);\n    return this;\n  }\n\n  on(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.on(event, listener);\n    return this;\n  }\n\n  prependListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.prependListener(event, listener);\n    return this;\n  }\n\n  removeListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.removeListener(event, listener);\n    return this;\n  }\n}\n","import { Bounded } from \"../types/bounded\";\nimport { BoundedEvent } from \"../types/boundedEvent\";\nimport { Collection } from \"../types/collection\";\nimport { isInfinity, isNumber, isSafeCount } from \"../utils/is\";\n\nimport { CircularBase } from \"./circularBase\";\n\n/**\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularMap<K, V>\n  extends CircularBase<[K, V]>\n  implements Bounded<[K, V]>, Map<K, V>, Collection<K, V>\n{\n  /**\n   * @internal\n   * The maximum number of elements that can be stored in the collection.\n   */\n  protected _capacity: number;\n\n  /**\n   * @internal\n   * The internal map.\n   */\n  protected _map: Map<K, V>;\n\n  /**\n   * Creates a new map with `capacity` defaulted to `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new map with the given capacity.\n   *\n   * @param capacity - the map's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new map. Initial capacity is the number of unique items given.\n   *\n   * @param items - the values to store in the map.\n   */\n  constructor(items: Iterable<[K, V]>);\n  constructor(capacity?: number | null | Iterable<[K, V]>) {\n    super();\n\n    // Initialize class variables\n    this._capacity = Infinity;\n    this._map = new Map();\n\n    // Case 1: capacity is null, undefined or Infinity\n    capacity = capacity ?? Infinity;\n    if (isInfinity(capacity)) {\n      return;\n    }\n\n    // Case 2: capacity is zero or a safe positive integer\n    if (isNumber(capacity)) {\n      if (!isSafeCount(capacity)) {\n        throw new RangeError(\"Invalid capacity\");\n      }\n      this._capacity = capacity;\n      return;\n    }\n\n    // Case 3: capacity is iterable\n    this._map = new Map(capacity as Iterable<[K, V]>);\n    this._capacity = this._map.size;\n  }\n\n  /**\n   * @returns the maximum number of elements that can be stored.\n   */\n  get capacity(): number {\n    return this._capacity;\n  }\n\n  /**\n   * @returns the number of values in the map.\n   */\n  get size(): number {\n    return this._map.size;\n  }\n\n  /**\n   * Return the type of the object.\n   */\n  get [Symbol.toStringTag](): string {\n    return CircularMap.name;\n  }\n\n  /**\n   * The maximum number of elements that can be stored in the map.\n   */\n  set capacity(capacity: number) {\n    // Convert input to a number\n    capacity = +capacity;\n\n    // Check if input is valid\n    if (!isInfinity(capacity) && !isSafeCount(capacity)) {\n      throw new RangeError(\"Invalid capacity\");\n    }\n\n    // Check if capacity is changing\n    if (capacity === this._capacity) {\n      return;\n    }\n\n    // Update capacity\n    this._capacity = capacity;\n\n    // Check if size is within capacity\n    if (this.size <= capacity) {\n      return;\n    }\n\n    // Check if new capacity is zero\n    if (capacity === 0) {\n      const evicted = Array.from(this._map);\n      this.clear();\n      this._emitter.emit(BoundedEvent.Overflow, evicted);\n      return;\n    }\n\n    // Shrink down map.\n    const evicted: [K, V][] = [];\n    const iter = this._map.entries();\n    for (let n = this.size - capacity; n > 0; --n) {\n      const entry = iter.next().value;\n      this._map.delete(entry[0]);\n      evicted.push(entry);\n    }\n    this._emitter.emit(BoundedEvent.Overflow, evicted);\n  }\n\n  /**\n   * Removes all elements from the map.\n   */\n  clear(): void {\n    this._map.clear();\n  }\n\n  /**\n   * Deletes a specified value from the map.\n   *\n   * @returns `true` if the value existed in the map and has been removed, or `false` otherwise.\n   */\n  delete(key: K): boolean {\n    return this._map.delete(key);\n  }\n\n  /**\n   * Iterate through the map's entries.\n   *\n   * **Note:** Modifying the map during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of [key, value] pairs for every entry.\n   */\n  entries(): IterableIterator<[K, V]> {\n    return this._map.entries();\n  }\n\n  /**\n   * Performs the specified action for each value in the map.\n   *\n   * **Note:** Modifying the map during iteration may cause unexpected behavior.\n   *\n   * @param callbackfn - A function that accepts up to three arguments. It is called once per value.\n   * @param thisArg - An object to which the `this` keyword refers to in the `callbackfn` function. Defaults to `undefined`.\n   */\n  forEach(\n    callbackfn: (value: V, key: K, map: this) => void,\n    thisArg?: unknown\n  ): void {\n    for (const [key, value] of this._map.entries()) {\n      callbackfn.call(thisArg, value, key, this);\n    }\n  }\n\n  /**\n   * Returns the associated value of the given key from the map.\n   *\n   * If the associated value is an object, then you will get a reference to that object; any change made to the object will effectively modify it inside the map.\n   *\n   * @returns the value associated with the specified key, or `undefined` if no value is associated.\n   */\n  get(key: K): V | undefined {\n    return this._map.get(key);\n  }\n\n  /**\n   * Determines whether a given value is in the map.\n   *\n   * @param key - The key to search for.\n   *\n   * @returns `true` if the value was found, `false` otherwise.\n   */\n  has(key: K): boolean {\n    return this._map.has(key);\n  }\n\n  /**\n   * Iterate through the map's keys.\n   *\n   * **Note:** Modifying the map during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of the map's keys.\n   */\n  keys(): IterableIterator<K> {\n    return this._map.keys();\n  }\n\n  /**\n   * Sets the specified key-value pair in the map.\n   *\n   * @param key - the key to add\n   * @param value - the key's value.\n   */\n  set(key: K, value: V): this {\n    // Base case: map has no capacity.\n    if (this.capacity < 1) {\n      this._emitter.emit(BoundedEvent.Overflow, [[key, value]]);\n      return this;\n    }\n\n    // Evict excess items\n    const evicted: [K, V][] = [];\n    if (!this._map.delete(key) && this.size >= this.capacity) {\n      const entry = this._map.entries().next().value;\n      this._map.delete(entry[0]);\n      evicted.push(entry);\n    }\n\n    // Add value\n    this._map.set(key, value);\n\n    // Emit evicted\n    if (evicted.length > 0) {\n      this._emitter.emit(BoundedEvent.Overflow, evicted);\n    }\n\n    return this;\n  }\n\n  /**\n   * Iterate through the map's values.\n   *\n   * **Note:** Modifying the map during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of values.\n   */\n  [Symbol.iterator](): IterableIterator<[K, V]> {\n    return this._map.entries();\n  }\n\n  /**\n   * Iterate through the map's values.\n   *\n   * **Note:** Modifying the map during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of the map's values.\n   */\n  values(): IterableIterator<V> {\n    return this._map.values();\n  }\n}\n","import { BoundedEvent } from \"../types/boundedEvent\";\nimport { Queue } from \"../types/queue\";\nimport { Bounded } from \"../types/bounded\";\nimport { CircularArrayList } from \"./circularArrayList\";\n\n/**\n * A circular queue is similar to a traditional queue, but uses a fixed-size,\n * circular buffer. When the queue reaches its maximum capacity and a new\n * element is added, the oldest is discarded, thus maintaining its size.\n *\n * This structure efficiently utilizes memory for applications where only the\n * most recent additions are of interest and older data can be discarded.\n *\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularQueue<T> implements Bounded<T>, Queue<T> {\n  /**\n   * @internal\n   */\n  protected list: CircularArrayList<T>;\n\n  /**\n   * Creates a new queue. Default `capacity` is `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new queue with the given capacity.\n   *\n   * @param capacity - the queue's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new queue from the given items. `capacity` will equal the number of items.\n   *\n   * @param items - the initial values in the queue.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    this.list = new CircularArrayList(capacity as number);\n  }\n\n  get capacity(): number {\n    return this.list.capacity;\n  }\n\n  get size(): number {\n    return this.list.size;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return CircularQueue.name;\n  }\n\n  set capacity(capacity: number) {\n    this.list.capacity = capacity;\n  }\n\n  clear(): void {\n    this.list.clear();\n  }\n\n  entries(): IterableIterator<[number, T]> {\n    return this.list.entries();\n  }\n\n  first(): T | undefined {\n    return this.list.first();\n  }\n\n  forEach(\n    callbackfn: (value: T, index: number, collection: this) => void,\n    thisArg?: unknown\n  ): void {\n    return this.list.forEach((v, i) => callbackfn.call(thisArg, v, i, this));\n  }\n\n  front(): T | undefined {\n    return this.list.first();\n  }\n\n  has(value: T): boolean {\n    return this.list.has(value);\n  }\n\n  keys(): IterableIterator<number> {\n    return this.list.keys();\n  }\n\n  push(...elems: T[]): number {\n    return this.list.push(...elems);\n  }\n\n  shift(): T | undefined {\n    return this.list.shift();\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.list.values();\n  }\n\n  values(): IterableIterator<T> {\n    return this.list.values();\n  }\n\n  addListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.addListener(event, listener);\n    return this;\n  }\n\n  on(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.on(event, listener);\n    return this;\n  }\n\n  prependListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.prependListener(event, listener);\n    return this;\n  }\n\n  removeListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.removeListener(event, listener);\n    return this;\n  }\n}\n","import { Bounded } from \"../types/bounded\";\nimport { BoundedEvent } from \"../types/boundedEvent\";\nimport { Collection } from \"../types/collection\";\nimport { isInfinity, isNumber, isSafeCount } from \"../utils/is\";\n\nimport { CircularBase } from \"./circularBase\";\n\n/**\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularSet<T>\n  extends CircularBase<T>\n  implements Bounded<T>, Set<T>, Collection<T, T>\n{\n  /**\n   * @internal\n   * The maximum number of elements that can be stored in the collection.\n   */\n  protected _capacity: number;\n\n  /**\n   * @internal\n   * The internal set.\n   */\n  protected set: Set<T>;\n\n  /**\n   * Creates a new set with `capacity` defaulted to `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new set with the given capacity.\n   *\n   * @param capacity - the set's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new set. Initial capacity is the number of unique items given.\n   *\n   * @param items - the values to store in the set.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    super();\n\n    // Initialize class variables\n    this._capacity = Infinity;\n    this.set = new Set();\n\n    // Case 1: capacity is null, undefined or Infinity\n    capacity = capacity ?? Infinity;\n    if (isInfinity(capacity)) {\n      return;\n    }\n\n    // Case 2: capacity is zero or a safe positive integer\n    if (isNumber(capacity)) {\n      if (!isSafeCount(capacity)) {\n        throw new RangeError(\"Invalid capacity\");\n      }\n      this._capacity = capacity;\n      return;\n    }\n\n    // Case 3: capacity is iterable\n    this.set = new Set(capacity as Iterable<T>);\n    this._capacity = this.set.size;\n  }\n\n  /**\n   * @returns the maximum number of elements that can be stored.\n   */\n  get capacity(): number {\n    return this._capacity;\n  }\n\n  /**\n   * @returns the number of values in the set.\n   */\n  get size(): number {\n    return this.set.size;\n  }\n\n  /**\n   * Return the type of the object.\n   */\n  get [Symbol.toStringTag](): string {\n    return CircularSet.name;\n  }\n\n  /**\n   * The maximum number of elements that can be stored in the set.\n   */\n  set capacity(capacity: number) {\n    // Convert input to a number\n    capacity = +capacity;\n\n    // Check if input is valid\n    if (!isInfinity(capacity) && !isSafeCount(capacity)) {\n      throw new RangeError(\"Invalid capacity\");\n    }\n\n    // Check if capacity is changing\n    if (capacity === this._capacity) {\n      return;\n    }\n\n    // Update capacity\n    this._capacity = capacity;\n\n    // Check if set is within capacity\n    if (this.size <= capacity) {\n      return;\n    }\n\n    // Check if new capacity is zero\n    if (capacity === 0) {\n      const evicted = Array.from(this.set);\n      this.clear();\n      this._emitter.emit(BoundedEvent.Overflow, evicted);\n      return;\n    }\n\n    // Shrink down map.\n    const evicted: T[] = [];\n    const iter = this.set.values();\n    for (let n = this.size - capacity; n > 0; --n) {\n      const value = iter.next().value;\n      this.set.delete(value);\n      evicted.push(value);\n    }\n    this._emitter.emit(BoundedEvent.Overflow, evicted);\n  }\n\n  /**\n   * Adds the specified value to the set.\n   *\n   * @param value - the value to add.\n   */\n  add(value: T): this {\n    // Base case: set has no capacity.\n    if (this.capacity < 1) {\n      this._emitter.emit(BoundedEvent.Overflow, [value]);\n      return this;\n    }\n\n    // Evict excess items\n    const evicted: T[] = [];\n    if (!this.set.delete(value) && this.size >= this.capacity) {\n      const out = this.set.values().next().value;\n      this.set.delete(out);\n      evicted.push(out);\n    }\n\n    // Add value\n    this.set.add(value);\n\n    // Emit evicted\n    if (evicted.length > 0) {\n      this._emitter.emit(BoundedEvent.Overflow, evicted);\n    }\n\n    return this;\n  }\n\n  /**\n   * Removes all elements from the set.\n   */\n  clear(): void {\n    this.set.clear();\n  }\n\n  /**\n   * Deletes a specified value from the set.\n   *\n   * @returns `true` if the value existed in the set and has been removed, or `false` otherwise.\n   */\n  delete(value: T): boolean {\n    return this.set.delete(value);\n  }\n\n  /**\n   * Iterate through the set's entries.\n   *\n   * **Note:** Modifying the set during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of [key, value] pairs for every entry.\n   */\n  entries(): IterableIterator<[T, T]> {\n    return this.set.entries();\n  }\n\n  /**\n   * Performs the specified action for each value in the set.\n   *\n   * **Note:** Modifying the set during iteration may cause unexpected behavior.\n   *\n   * @param callbackfn - A function that accepts up to three arguments. It is called once per value.\n   * @param thisArg - An object to which the `this` keyword refers to in the `callbackfn` function. Defaults to `undefined`.\n   */\n  forEach(\n    callbackfn: (value: T, key: T, set: this) => void,\n    thisArg?: unknown\n  ): void {\n    for (const key of this.set.keys()) {\n      callbackfn.call(thisArg, key, key, this);\n    }\n  }\n\n  /**\n   * Determines whether a given value is in the set.\n   *\n   * @param value - The value to search for.\n   *\n   * @returns `true` if the value was found, `false` otherwise.\n   */\n  has(value: T): boolean {\n    return this.set.has(value);\n  }\n\n  /**\n   * Iterate through the set's keys.\n   *\n   * **Note:** Modifying the set during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of the set's keys.\n   */\n  keys(): IterableIterator<T> {\n    return this.set.keys();\n  }\n\n  /**\n   * Iterate through the set's values.\n   *\n   * **Note:** Modifying the set during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of the set's values.\n   */\n  values(): IterableIterator<T> {\n    return this.set.keys();\n  }\n\n  /**\n   * Iterate through the set's values.\n   *\n   * **Note:** Modifying the set during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of values.\n   */\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.set.values();\n  }\n}\n","/**\n * Generates an iterable that yields chunks (arrays) of elements from the input iterable,\n * with each chunk containing up to a specified maximum number of elements. This function\n * is useful for processing or handling large collections of items in smaller, more\n * manageable segments.\n *\n * `chunkSize` is truncated to an integer to ensure expected behavior.\n * If `chunkSize` is less than 1, an empty iterable is generated.\n *\n * Example usage:\n * ```typescript\n * const nums = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n * for (const chunk of chunk(nums, 3)) {\n *   console.log(chunk); // Outputs: [1, 2, 3], [4, 5, 6], [7, 8, 9]\n * }\n * ```\n *\n * @param source - The original iterable to be chunked. Can be any iterable object (e.g., Array, Set, or a custom iterable).\n * @param chunkSize - The maximum size of each chunk. Must be a positive integer; non-integer values are truncated.\n *\n * @returns An iterable iterator that yields each chunk as an array of elements.\n */\nexport function* chunk<T>(\n  source: Iterable<T>,\n  chunkSize: number\n): IterableIterator<T[]> {\n  if (chunkSize < 1) {\n    return;\n  }\n  let chunk: T[] = [];\n  chunkSize = Math.trunc(chunkSize);\n  for (const value of source) {\n    if (chunk.push(value) >= chunkSize) {\n      yield chunk;\n      chunk = [];\n    }\n  }\n  if (chunk.length > 0) {\n    yield chunk;\n  }\n}\n","import { SkipLevel, SkipNode } from \"../types/skipList\";\nimport { log } from \"./math\";\n\n/**\n * Calculates the maximum level for a skip list based on the given probability\n * factor and expected size.\n *\n * The maximum level determines how many forward pointers each element in the\n * skip list can have, which impacts the overall speed of search, insertion,\n * and deletion operations within the list.\n *\n * @param p - The probability factor used for determining the level. It should\n *          be a number between 0 and 1 (exclusive). The probability factor\n *          affects the sparsity of the skip list; a lower value results in a\n *          shorter, less dense list, while a higher value results in a\n *          taller, denser list.\n * @param expectedSize - The expected number of elements in the skip list. It\n *                     should be a positive integer. The expected size\n *                     influences the optimal maximum level for the list.\n *\n * @returns The calculated optimal maximum level for the skip list. Returns 1\n *          if the probability factor is less than or equal to 0 or the\n *          expected size is less than or equal to 1. Returns Infinity if the\n *          probability factor is 1 or more, indicating an unbounded number of\n *          levels, and likely an error in inputs.\n */\nexport function calcMaxLevel(p: number, expectedSize: number): number {\n  if (p <= 0 || expectedSize <= 1) {\n    return 1;\n  }\n  if (p >= 1) {\n    return Infinity;\n  }\n  return Math.ceil(log(expectedSize, 1 / p));\n}\n\n/**\n * Climbs up the skip list from the given node to find and return the first\n * node at or above the specified level.\n *\n * @param node - The starting {@link SkipNode} from which the climb begins.\n * @param level - The target level to reach.\n *\n * @returns The first {@link SkipNode} encountered at or above the specified level, or `undefined` if no such node\n *          exists in the portion of the list being traversed.\n */\nexport function climb<T>(\n  node: SkipNode<T> | undefined,\n  level: number\n): SkipNode<T> | undefined {\n  while (node != null && node.levels.length <= level) {\n    node = node.levels[node.levels.length - 1].next;\n  }\n  return node;\n}\n\n/**\n * Creates a copy of a segment from a skip list, starting at a specified\n * position and including a specified number of nodes.\n *\n * The copied segment is initialized with its own root node and returns\n * the new list's root, tail nodes at each level, and the total number\n * of nodes copied.\n *\n * @param root - The root {@link SkipNode} of the original skip list from\n *               which the copy operation begins.\n * @param start - The zero-based position in the original list from which to\n *                start copying nodes.\n * @param count - The number of nodes to copy from the start position. If the\n *                count exceeds the number of nodes available, only the\n *                available nodes are copied.\n * @returns A tuple containing:\n *          - The root {@link SkipNode} of the newly created skip list.\n *          - An array of {@link SkipNode}s representing the tail nodes at\n *            each level of the new skip list.\n *          - An integer representing the total number of nodes copied.\n */\nexport function copy<T>(\n  root: SkipNode<T>,\n  start: number,\n  count: number\n): [SkipNode<T>, SkipNode<T>[], number] {\n  // Create new root\n  let levels = root.levels.length;\n  const segRoot = gen(undefined as T, levels);\n\n  // Check count\n  if (count <= 0) {\n    return [segRoot, [segRoot], 0];\n  }\n\n  // Initialize new list\n  const tails = new Array<SkipNode<T>>(levels).fill(segRoot);\n  const indexes = new Array<number>(levels).fill(-1);\n\n  // Get initial node\n  let node: SkipNode<T> | undefined = getClosest(root, start)[0];\n  node = node.levels[0].next;\n\n  // For each node\n  levels = 1;\n  let size = 0;\n  let index = 0;\n  while (node != null && size < count) {\n    // Update maximum level\n    const L = node.levels.length;\n    levels = levels >= L ? levels : L;\n\n    // Create the duplicate node\n    const dupe = gen(node.value, L);\n\n    // Attach the duplicate at each level\n    for (let lvl = 0; lvl < L; ++lvl) {\n      tails[lvl].levels[lvl] = { next: dupe, span: index - indexes[lvl] };\n      tails[lvl] = dupe;\n      indexes[lvl] = index;\n    }\n\n    // Move to the next node\n    const { next, span } = node.levels[0];\n    index += span;\n    node = next;\n    ++size;\n  }\n\n  // Truncate the output list to the maximum level\n  tails.length = levels;\n  segRoot.levels.length = levels;\n\n  // Update the tail pointers\n  index = indexes[0] + 1;\n  for (let i = 0; i < levels; ++i) {\n    tails[i].levels[i] = { next: undefined, span: index - indexes[i] };\n  }\n\n  // Return the copy\n  return [segRoot, tails, size];\n}\n\n/**\n * Iterates through a skip list, yielding each node's index\n * (position in the list) and value as a tuple.\n *\n * Iteration starts from the `node` node and continues until either the end\n * of the list, or the `end` node if provided.\n *\n * This generator function provides a convenient way to enumerate all nodes in\n * a skip list, similar to how `Array.prototype.entries()` works for arrays.\n *\n * @param node - The node at which to start iterating.\n * @param end - An optional node at which to end (exclusive).\n * If not provided, iteration continues until the end of the list.\n */\nexport function* entries<T>(\n  node?: SkipNode<T>,\n  end?: SkipNode<T>\n): Generator<[number, T]> {\n  for (let i = 0; node != null && node != end; ++i) {\n    yield [i, node.value];\n    node = node.levels[0].next;\n  }\n}\n\n/**\n * Generates a new skip list node.\n *\n * @param value - The value to be stored in the new skip list node.\n * @param levels - The number of levels the node participates in within the skip list. Defaults to `1`.\n * @param span - The uniform distance to the next node at each level. Defaults to `1`.\n * @param next - The uniform next node at each level. Defaults to `undefined`.\n *\n * @returns A {@link SkipNode} object populated with the specified value and levels array. Each\n *          level in the array is initialized with a `next` pointer and `span` distance set to\n *          the specified values.\n */\nexport function gen<T>(\n  value: T,\n  levels = 1,\n  span = 1,\n  next?: SkipNode<T>\n): SkipNode<T> {\n  const array = new Array<SkipLevel<T>>(levels);\n  for (let i = 0; i < levels; ++i) {\n    array[i] = { next, span };\n  }\n  return { value, levels: array };\n}\n\n/**\n * Retrieves the node at the specified distance from the given node.\n *\n * @param node - The node from which to start.\n * @param distance - The forward distance of the node to retrieve.\n *\n * @returns The node at the specified index, or `undefined` if not found.\n */\nexport function get<T>(\n  node: SkipNode<T>,\n  distance: number\n): SkipNode<T> | undefined {\n  [node, distance] = getClosest(node, distance);\n  return distance === 0 ? node : undefined;\n}\n\n/**\n * Retrieves the node at the specified distance from the given node, or the\n * closest node within the intended distance.\n *\n * @param node - The node from which to start.\n * @param distance - The forward distance of the node to retrieve.\n *\n * @returns A tuple of the resulting node and any remaining distance. If the\n * intended node was found, the tuple would be `[intended node, 0]`.\n * Otherwise, the tuple would be `[closest node, distance remaining]`.\n */\nexport function getClosest<T>(\n  node: SkipNode<T>,\n  distance: number\n): [SkipNode<T>, number] {\n  // Check distance\n  if (distance <= 0) {\n    return [node, distance];\n  }\n\n  // Find node\n  let lvl = node.levels.length - 1;\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    const { next, span } = node.levels[lvl];\n    if (span <= distance && next != null) {\n      // Do nothing\n    } else if (--lvl < 0) {\n      return [node, distance];\n    } else {\n      continue;\n    }\n\n    if (span == distance) {\n      return [next, 0];\n    }\n\n    distance -= span;\n    node = next;\n  }\n}\n\n/**\n * Creates a generator that yields each node in a skip list at a specified level.\n *\n * Iteration begins from a given node up to, but not including, an optional end node. Defaults to level `0`.\n *\n * @param node - The starting {@link SkipNode} from which the iteration begins. If not defined, no nodes are yielded.\n * @param end - An optional {@link SkipNode} at which to end the iteration, exclusive. If provided, the iteration\n *              will halt before yielding this node. If `end` is `undefined`, the iteration will continue until\n *              the end of the list.\n * @param level - The level at which to traverse the skip list, starting from 0 for the base level. Defaults to `0`\n *                if not specified. If a negative value is given, or if the start `node` does not reach this level,\n *                no nodes are yielded.\n */\nexport function* getNodes<T>(\n  node?: SkipNode<T>,\n  end?: SkipNode<T>,\n  level = 0\n): Generator<SkipNode<T>> {\n  if (node == null || level < 0 || node.levels.length <= level) {\n    return;\n  }\n  while (node != null && node != end) {\n    yield node;\n    node = node.levels[level].next;\n  }\n}\n\n/**\n * Determines whether a skip list contains a node with a specified value.\n *\n * Iteration starts from the `node` node and continues until either the end\n * of the list, or the `end` node if provided.\n *\n * @param node - The node from which to start searching.\n * @param value - The value to search for.\n * @param end - An optional node at which to end the search (exclusive).\n * If not provided, the search continues until the end of the list.\n *\n * @returns `true` if the specified value is found, `false` otherwise.\n *\n * @throws - {@link TypeError}\n * thrown if an `end` node is provided but not encountered before the end of the list.\n *\n */\nexport function has<T>(\n  node: SkipNode<T> | undefined,\n  value: T,\n  end?: SkipNode<T>\n): boolean {\n  while (node != end) {\n    if (node!.value === value) {\n      return true;\n    }\n    node = node!.levels[0].next;\n  }\n  return false;\n}\n\n/**\n * Iterates through a skip list, yielding each node's index\n * (position in the list).\n *\n * Iteration starts from the `node` node and continues until either the end\n * of the list, or the `end` node if provided.\n *\n * This generator function provides a convenient way to enumerate all nodes in\n * a skip list, similar to how `Array.prototype.entries()` works for arrays.\n *\n * @param node - The node at which to start iterating.\n * @param end - An optional node at which to end (exclusive).\n * If not provided, iteration continues until the end of the list.\n *\n * @throws - {@link TypeError}\n * thrown if an `end` node is provided but not encountered before the end of the list.\n */\nexport function* keys<T>(\n  node?: SkipNode<T>,\n  end?: SkipNode<T>\n): Generator<number> {\n  for (let i = 0; node != end; ++i) {\n    yield i;\n    node = node!.levels[0].next;\n  }\n}\n\n/**\n * Converts a skip list into an array of values.\n *\n * The conversion starts from the `node` node and includes all nodes up to the\n * end of the list, or the `end` node if provided.\n *\n * @param node - The node at which to start converting.\n * @param end - An optional node at which to end (exclusive).\n * If not provided, conversion continues until the end of the list.\n * @param level - The level at which to traverse the skip list. Defaults to `0`\n * (the base level). If negative, or if `node` does not reach this level, an\n * empty array is returned.\n *\n * @returns An array with the values of the list from `node` to `end` at the given level.\n */\nexport function toArray<T>(\n  node?: SkipNode<T>,\n  end?: SkipNode<T>,\n  level = 0\n): T[] {\n  if (level < 0 || (node != null && node.levels.length <= level)) {\n    return [];\n  }\n\n  const array: T[] = [];\n  while (node != null && node != end) {\n    array.push(node.value);\n    node = node.levels[level].next;\n  }\n\n  return array;\n}\n\n/**\n * Constructs a skip list from an array of levels and an array of values.\n *\n * @param levels - An array of integers that determines the number of\n *                 levels of the corresponding value in the `values` array.\n * @param values - An array of values to be stored in the skip list. Each\n *                 value is assigned to a new node in the list.\n *\n * @returns A tuple containing three elements:\n *          - The first element is the root {@link SkipNode} of the skip list. This is a dummy node immediately\n *            prior to the first value.\n *          - The second element is an array of {@link SkipNode}s representing the tail nodes at each level.\n *          - The third element is an integer `X` representing the number of nodes successfully added to the list,\n *            not including the root node.\n *\n * @remarks\n * - If the lengths of the input arrays do not match, the function operates on the smallest length.\n * - A dummy root node is created and updated to have up to the maximum level in the `levels` array.\n */\nexport function toList<T>(\n  levels: number[],\n  values: T[]\n): [SkipNode<T>, SkipNode<T>[], number] {\n  // Get # of values (X) and max level (Y)\n  let Y = -Infinity;\n  const X = Math.min(levels.length, values.length);\n  for (let x = 0; x < X; ++x) {\n    if (Y < levels[x]) {\n      Y = levels[x];\n    }\n  }\n\n  // Check inputs\n  if (Y <= 0 || X <= 0) {\n    const root = gen(undefined as T);\n    return [root, [root], 0];\n  }\n\n  // Create root node and tails array\n  const root: SkipNode<T> = gen(undefined as T, Y, X + 1);\n  const tails = new Array(Y).fill(root);\n\n  // For each value\n  for (let x = 0; x < X; ++x) {\n    // Create node\n    const span = X - x;\n    const nextY = levels[x];\n    const next = gen(values[x], nextY, span);\n\n    // Add node to list\n    for (let y = 0; y < nextY; ++y) {\n      const levels = tails[y].levels;\n      levels[y] = { next, span: levels[y].span - span };\n      tails[y] = next;\n    }\n  }\n\n  // Return root, tails and list length\n  return [root, tails, X];\n}\n\n/**\n * Truncates the levels of nodes in a skip list.\n *\n * Adjusts the `levels` array of each affected node by truncating it to the\n * specified level, reducing the height of the list for the segment.\n *\n * @param node - The node of the skip list from which level adjustment begins.\n *             This node will be the first node to have its level adjusted.\n * @param level - The target level to which the nodes' levels should be\n *              decreased if it's greater than this value.\n */\nexport function truncateLevels<T>(\n  node: SkipNode<T> | undefined,\n  level: number\n): void {\n  // Get first node at given level.\n  node = climb(node, level);\n\n  // Truncate nodes\n  while (node != null) {\n    const next = node!.levels[level].next;\n    node.levels.length = level;\n    node = next;\n  }\n}\n\n/**\n * Iterates through a skip list, yielding each node's value.\n *\n * Iteration starts from the `node` node and continues until either the end\n * of the list, or the `end` node if provided.\n *\n * This generator function provides a convenient way to enumerate all nodes in\n * a skip list, similar to how `Array.prototype.entries()` works for arrays.\n *\n * @param node - The node at which to start iterating.\n * @param end - An optional node at which to end (exclusive).\n * If not provided, iteration continues until the end of the list.\n *\n * @throws - {@link TypeError}\n * thrown if an `end` node is provided but not encountered before the end of the list.\n */\nexport function* values<T>(\n  node?: SkipNode<T>,\n  end?: SkipNode<T>\n): Generator<T> {\n  while (node != null && node != end) {\n    yield node.value;\n    node = node.levels[0].next;\n  }\n}\n","import { SkipNode, SkipStack } from \"../types/skipList\";\n\n/**\n * Creates a copy of the provided skip stack.\n *\n * @param stack - The {@link SkipStack} to be cloned.\n * @returns The copy of the input {@link SkipStack}.\n */\nexport function clone<T>(stack: SkipStack<T>): SkipStack<T> {\n  const N = stack.length;\n  const dupe: SkipStack<T> = new Array(N);\n  for (let i = 0; i < N; ++i) {\n    const { index, node } = stack[i];\n    dupe[i] = { index, node };\n  }\n  return dupe;\n}\n\n/**\n * Generates a skip stack filled with pointers to the given node and index.\n *\n * @param node - The {@link SkipNode} to which all pointers in the generated stack will point.\n * @param index - The index in the skip list at which the node is located. Defaults to `0`.\n *\n * @returns A {@link SkipStack} array, where each level points to `node` with index `index`.\n *          The length of this array is equal to the number of levels in the input node.\n */\nexport function gen<T>(node: SkipNode<T>, index = 0): SkipStack<T> {\n  const N = node.levels.length;\n  const stack: SkipStack<T> = new Array(N);\n  for (let i = 0; i < N; ++i) {\n    stack[i] = { index, node };\n  }\n  return stack;\n}\n\n/**\n * Moves the input stack to point to the nodes closest to a specified distance.\n *\n * @param stack - The {@link SkipStack} representing the current pointers at various levels of the skip list.\n * @param distance - The forward distance to travel. The starting point is based on `stack`'s lowest level.\n *\n * @returns A {@link SkipStack} with pointers to the nodes closest to the specified distance, based\n *          on the initial positions indicated by the input stack.\n *\n * @remarks\n * - If the specified distance is 0 or negative, the stack is not modified, as no traversal is needed.\n * - If the target distance exceeds the bounds of the skip list, the result will point to the furthest possible\n *   nodes within the list.\n */\nexport function getClosest<T>(\n  stack: SkipStack<T>,\n  distance: number\n): SkipStack<T> {\n  // Check inputs\n  if (distance <= 0 || stack.length <= 0) {\n    return stack;\n  }\n\n  let lvl = stack.length - 1;\n  let ptr = stack[lvl];\n  const target = stack[0].index + distance;\n\n  // Find node\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    const { next, span } = ptr.node.levels[lvl];\n    const nextIndex = ptr.index + span;\n\n    if (nextIndex <= target && next != null) {\n      // Do nothing\n    } else if (--lvl < 0) {\n      break;\n    } else {\n      ptr = stack[lvl];\n      continue;\n    }\n\n    ptr = { index: nextIndex, node: next };\n    stack[lvl] = ptr;\n\n    if (nextIndex == target) {\n      break;\n    }\n  }\n\n  for (let i = 0; i < lvl; ++i) {\n    stack[i] = { index: ptr.index, node: ptr.node };\n  }\n\n  return stack;\n}\n","import { BoundedEvent } from \"../types/boundedEvent\";\nimport { Bounded, BoundedConfig } from \"../types/bounded\";\nimport { ARGS_MAX_LENGTH, LINKED_MAX_LENGTH } from \"../utils/constants\";\nimport { SkipList, SkipListConfig, SkipNode } from \"../types/skipList\";\n\nimport {\n  isArrayLength,\n  isInfinity,\n  isIterable,\n  isLinkedLength,\n  isNumber,\n} from \"../utils/is\";\nimport { chunk } from \"../utils/iterable\";\nimport {\n  addIfBelow,\n  clamp,\n  isInRange,\n  randomRun,\n  toInteger,\n} from \"../utils/math\";\nimport * as NodeUtils from \"../utils/skipNode\";\nimport * as StackUtils from \"../utils/skipStack\";\n\nimport { CircularBase } from \"./circularBase\";\n\nexport interface CircularSkipListConfig extends BoundedConfig, SkipListConfig {}\n\nexport class CircularSkipList<T>\n  extends CircularBase<T>\n  implements Bounded<T>, SkipList<T>\n{\n  /**\n   * @internal\n   * The maximum number of elements that can be stored in the collection.\n   */\n  protected _capacity: number;\n\n  /**\n   * @internal\n   * Whether capacity is finite (true) or infinite (false).\n   */\n  protected _isFinite: boolean;\n\n  /**\n   * @internal\n   * The maximum number of levels in the skip list.\n   */\n  protected _maxLevel: number;\n\n  /**\n   * @internal\n   * The probability factor used to randomly determine the levels\n   * of new nodes. Should be a value between 0 and 1, where a lower\n   * value results in fewer levels on average.\n   */\n  protected _p: number;\n\n  /**\n   * @internal\n   * The root of the skip list\n   */\n  protected _root: SkipNode<T>;\n\n  /**\n   * @internal\n   * The current size of the list (0 \\<= size \\<= capacity)\n   */\n  protected _size: number;\n\n  /**\n   * @internal\n   * The last node in the linked list.\n   */\n  protected _tail: SkipNode<T>;\n\n  constructor();\n  constructor(capacity?: number | null);\n  constructor(config: CircularSkipListConfig);\n  constructor(items: Iterable<T>);\n  constructor(config?: CircularSkipListConfig | Iterable<T> | null | number) {\n    super();\n\n    // Initialize class variables\n    this._capacity = LINKED_MAX_LENGTH;\n    this._isFinite = false;\n    this._p = 0.5;\n    this._maxLevel = NodeUtils.calcMaxLevel(this._p, LINKED_MAX_LENGTH);\n    this._root = NodeUtils.gen(undefined as T);\n    this._size = 0;\n    this._tail = this._root;\n\n    // Case 1: input is null or undefined\n    if (config == null) {\n      return;\n    }\n\n    // Case 2: input is capacity\n    if (isNumber(config)) {\n      this.capacity = config;\n      return;\n    }\n\n    // Case 3: input is config\n    if (!isIterable(config)) {\n      this.capacity = config.capacity ?? this._capacity;\n      this.p = config.p ?? this._p;\n      const size = config.expectedSize ?? this._capacity;\n      this.maxLevel = config.maxLevel ?? NodeUtils.calcMaxLevel(this._p, size);\n      return;\n    }\n\n    // Case 4: input is an iterable\n    for (const vals of chunk(config, ARGS_MAX_LENGTH)) {\n      this._insert(this._size, vals);\n    }\n    this._capacity = this._size;\n    this._isFinite = true;\n  }\n\n  get capacity(): number {\n    return this._isFinite ? this._capacity : Infinity;\n  }\n\n  get levels(): number {\n    return this._root.levels.length;\n  }\n\n  get maxLevel(): number {\n    return this._maxLevel;\n  }\n\n  get p(): number {\n    return this._p;\n  }\n\n  get size(): number {\n    return this._size;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return CircularSkipList.name;\n  }\n\n  set capacity(capacity: number) {\n    // Convert input to a number\n    capacity = +capacity;\n\n    // Check capacity\n    if (isInfinity(capacity)) {\n      // If capacity is Infinity\n      capacity = LINKED_MAX_LENGTH;\n      this._isFinite = false;\n    } else if (isLinkedLength(capacity)) {\n      // If capacity is valid\n      this._isFinite = true;\n    } else {\n      // If capacity is invalid\n      throw new RangeError(\"Invalid capacity\");\n    }\n\n    // Update capacity\n    this._capacity = capacity;\n\n    // If current size fits within new capacity\n    if (this._size <= capacity) {\n      return;\n    }\n\n    // Shrink list and emit discarded items\n    const [root] = this._delete(0, this._size - capacity);\n    this._overflow(NodeUtils.values(root.levels[0].next));\n  }\n\n  set maxLevel(maxLevel: number) {\n    // Convert input to number\n    maxLevel = +maxLevel;\n\n    // If input is invalid\n    if (!isArrayLength(maxLevel) || maxLevel <= 0) {\n      throw new RangeError(\"Invalid maxLevel\");\n    }\n\n    // Update\n    this._maxLevel = maxLevel;\n\n    // Remove excess levels\n    if (maxLevel < this.levels) {\n      NodeUtils.truncateLevels(this._root, maxLevel);\n    }\n  }\n\n  set p(p: number) {\n    // Convert input to number\n    p = +p;\n\n    // If input is invalid\n    if (isNaN(p) || p < 0 || p > 1) {\n      throw new RangeError(\"Invalid p\");\n    }\n\n    // Update\n    this._p = p;\n  }\n\n  at(index: number): T | undefined {\n    // Sanitize input\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return undefined;\n    }\n\n    // Return value\n    return NodeUtils.get(this._root, index + 1)!.value;\n  }\n\n  clear(): void {\n    this._size = 0;\n    this._tail = this._root;\n    this._root.levels.length = 1;\n    this._root.levels[0] = { next: undefined, span: 1 };\n  }\n\n  delete(index: number): boolean {\n    // Sanitize input\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return false;\n    }\n\n    // Delete value\n    this._delete(index, 1);\n\n    // Return success\n    return true;\n  }\n\n  entries(): IterableIterator<[number, T]> {\n    return NodeUtils.entries(this._root.levels[0].next);\n  }\n\n  fill(value: T, start?: number, end?: number): this {\n    const size = this._size;\n\n    // Sanitize inputs\n    start = clamp(addIfBelow(toInteger(start, 0), size), 0, size);\n    end = clamp(addIfBelow(toInteger(end, size), size), start, size);\n    if (start >= end) {\n      return this;\n    }\n\n    // Fill values\n    let node = NodeUtils.get(this._root, start + 1)!;\n    for (let i = start; i < end; ++i) {\n      node.value = value;\n      node = node.levels[0].next!;\n    }\n\n    // Return list\n    return this;\n  }\n\n  forEach(\n    callbackfn: (value: T, index: number, list: this) => void,\n    thisArg?: unknown\n  ): void {\n    let node = this._root;\n    for (let i = 0; i < this._size; ++i) {\n      node = node.levels[0].next!;\n      callbackfn.call(thisArg, node.value, i, this);\n    }\n  }\n\n  has(value: T): boolean {\n    return NodeUtils.has(this._root.levels[0].next, value);\n  }\n\n  keys(): IterableIterator<number> {\n    return NodeUtils.keys(this._root.levels[0].next);\n  }\n\n  pop(): T | undefined {\n    // If list is empty\n    if (this._size <= 0) {\n      return undefined;\n    }\n\n    // Remove last value\n    const [root] = this._delete(this._size - 1, 1);\n\n    // Return value\n    return root.levels[0].next!.value;\n  }\n\n  push(...values: T[]): number {\n    // If no values\n    if (values.length <= 0) {\n      return this._size;\n    }\n\n    // If no capacity\n    if (this._capacity <= 0) {\n      this._overflow(values);\n      return this._size;\n    }\n\n    // Push values\n    this._insert(this._size, values);\n\n    // Return new size\n    return this._size;\n  }\n\n  set(index: number, value: T): T | undefined {\n    // Sanitize input\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return undefined;\n    }\n\n    // Set value\n    const node = NodeUtils.get(this._root, index + 1)!;\n    const prevValue = node.value;\n    node.value = value;\n\n    // Return previous value\n    return prevValue;\n  }\n\n  shift(): T | undefined {\n    // If list is empty\n    if (this._size <= 0) {\n      return undefined;\n    }\n\n    // Remove first value\n    const [root] = this._delete(0, 1);\n\n    // Return value\n    return root.levels[0].next!.value;\n  }\n\n  slice(start?: number, end?: number): CircularSkipList<T> {\n    const size = this._size;\n\n    // Sanitize inputs\n    start = clamp(addIfBelow(toInteger(start, 0), size), 0, size);\n    end = clamp(addIfBelow(toInteger(end, size), size), start, size);\n\n    // Return copied segment as a list\n    const [root, tails, length] = NodeUtils.copy(\n      this._root,\n      start,\n      end - start\n    );\n    const list = new CircularSkipList<T>({\n      capacity: length,\n      p: this._p,\n      maxLevel: this._maxLevel,\n    });\n    list._root = root;\n    list._tail = tails[0];\n    list._size = length;\n\n    return list;\n  }\n\n  splice(\n    start: number,\n    deleteCount?: number,\n    ...items: T[]\n  ): CircularSkipList<T> {\n    const size = this._size;\n\n    // Sanitize inputs\n    start = clamp(addIfBelow(toInteger(start, 0), size), 0, size);\n    deleteCount = clamp(toInteger(deleteCount, 0), 0, size - start);\n\n    // Remove deleted items\n    const [root, tails] = this._delete(start, deleteCount);\n\n    // Add new items\n    this._insert(start, items);\n\n    // Return deleted items as a list\n    const list = new CircularSkipList<T>({\n      capacity: deleteCount,\n      p: this._p,\n      maxLevel: this._maxLevel,\n    });\n    list._root = root;\n    list._tail = tails[0];\n    list._size = deleteCount;\n\n    return list;\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.values();\n  }\n\n  unshift(...values: T[]): number {\n    // If no values\n    if (values.length <= 0) {\n      return this._size;\n    }\n\n    // If no capacity\n    if (this._capacity <= 0) {\n      this._overflow(values);\n      return this._size;\n    }\n\n    // Presert values\n    this._presert(0, values);\n\n    // Return new size\n    return this._size;\n  }\n\n  values(): IterableIterator<T> {\n    return NodeUtils.values(this._root.levels[0].next);\n  }\n\n  /**\n   * @internal\n   */\n  protected _delete(\n    start: number,\n    count: number\n  ): [SkipNode<T>, SkipNode<T>[], number] {\n    // Initialize output list\n    const segRoot = NodeUtils.gen(undefined as T);\n    const segTails: SkipNode<T>[] = [segRoot];\n\n    // Check count\n    if (count <= 0) {\n      return [segRoot, segTails, 0];\n    }\n\n    // Initialize constants\n    const root = this._root;\n    const prevStack = StackUtils.getClosest(StackUtils.gen(root, -1), start);\n    const tailStack = StackUtils.getClosest(StackUtils.clone(prevStack), count);\n    const levels = this.levels;\n    const end = start + count;\n\n    // Detach deleted segment\n    let lvl: number;\n    for (lvl = 0; lvl < levels; ++lvl) {\n      const prev = prevStack[lvl];\n      const tail = tailStack[lvl];\n\n      // Check if segment exists at this level\n      if (prev.index >= tail.index) {\n        break;\n      }\n\n      // Connect segment start to new root\n      let edge = prev.node.levels[lvl];\n      let span = prev.index + edge.span - start;\n      segRoot.levels[lvl] = { next: edge.next, span };\n\n      // Remove segment from list\n      edge = tail.node.levels[lvl];\n      span = tail.index - prev.index + (edge.span - count);\n      prev.node.levels[lvl] = { next: edge.next, span };\n\n      // Detach segment end\n      tail.node.levels[lvl] = { next: undefined, span: end - tail.index };\n      segTails[lvl] = tail.node;\n    }\n\n    // Remove segment from remaining levels\n    while (lvl < levels) {\n      const prev = prevStack[lvl];\n      const tail = tailStack[lvl];\n      const { next, span } = tail.node.levels[lvl];\n\n      // If level is empty, truncate list height\n      if (prev.index < 0 && next === undefined) {\n        root.levels.length = lvl;\n        break;\n      }\n\n      const diff = tail.index - prev.index - count;\n      prev.node.levels[lvl] = { next: next, span: span + diff };\n      ++lvl;\n    }\n\n    // Update tail\n    if (end >= this._size) {\n      this._tail = prevStack[0].node;\n    }\n\n    // Update state\n    this._size -= count;\n\n    // Return removed list\n    return [segRoot, segTails, count];\n  }\n\n  /**\n   * @internal\n   */\n  protected _genLevels(N: number): number[] {\n    const levels = new Array<number>(N);\n    for (let i = 0; i < N; ++i) {\n      levels[i] = randomRun(this._p, 1, this._maxLevel);\n    }\n    return levels;\n  }\n\n  /**\n   * @internal\n   */\n  protected _insert(index: number, values: T[]): void {\n    const N = values.length;\n\n    // Check free space\n    let free = this._capacity - this._size;\n    if (free >= N) {\n      this._safeInsert(index, values);\n      return;\n    }\n\n    // Check if \"infinite\" capacity yet not enough space\n    if (!this._isFinite) {\n      this._safeInsert(index, values.slice(0, free));\n      throw new Error(\"Out of memory\");\n    }\n\n    // Remove from head\n    if (index > 0) {\n      const shifted = Math.min(index, N - free);\n      const [root] = this._delete(0, shifted);\n      this._overflow(NodeUtils.values(root.levels[0].next));\n      index -= shifted;\n      free += shifted;\n    }\n\n    // Check free space\n    if (free >= N) {\n      this._safeInsert(index, values);\n      return;\n    }\n\n    // Remove from items and insert remaining\n    const mid = values.length - free;\n    this._overflow(values.slice(0, mid));\n    this._safeInsert(0, values.slice(mid));\n  }\n\n  /**\n   * @internal\n   *\n   * Emit an overflow event containing the items evicted from the collection.\n   *\n   * @param evicted - The items evicted from the collection.\n   */\n  protected _overflow(evicted: Iterable<T>): void {\n    if (Array.isArray(evicted)) {\n      this._emitter.emit(BoundedEvent.Overflow, evicted);\n    } else {\n      for (const array of chunk(evicted, ARGS_MAX_LENGTH)) {\n        this._emitter.emit(BoundedEvent.Overflow, array);\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  protected _presert(index: number, values: T[]): void {\n    const N = values.length;\n\n    // Check free space\n    let free = this._capacity - this._size;\n    if (free >= N) {\n      this._safeInsert(index, values);\n      return;\n    }\n\n    // Check if \"infinite\" capacity yet not enough space\n    if (!this._isFinite) {\n      this._safeInsert(0, values.slice(values.length - free));\n      throw new Error(\"Out of memory\");\n    }\n\n    // Remove from tail\n    if (index < this._size) {\n      const popped = Math.min(this._size - index, N - free);\n      const [root] = this._delete(this._size - popped, popped);\n      this._overflow(NodeUtils.values(root.levels[0].next));\n      free += popped;\n    }\n\n    // Check free space\n    if (free >= N) {\n      this._safeInsert(index, values);\n      return;\n    }\n\n    // Remove from items and insert remaining\n    this._overflow(values.slice(free));\n    this._safeInsert(this._size, values.slice(0, free));\n  }\n\n  /**\n   * @internal\n   */\n  protected _safeInsert(index: number, values: T[]): void {\n    // Check values\n    if (values.length <= 0) {\n      return;\n    }\n\n    // Create inserting segment\n    const N = values.length;\n    const [root, tails] = NodeUtils.toList(this._genLevels(N), values);\n\n    // Increase list level if needed\n    const minY = tails.length;\n    for (let y = this.levels; y < minY; ++y) {\n      this._root.levels[y] = { next: undefined, span: this._size + 1 };\n    }\n\n    // Attach segment at given index\n    const prevs = StackUtils.getClosest(StackUtils.gen(this._root, -1), index);\n    for (let y = 0; y < minY; ++y) {\n      const prev = prevs[y].node;\n      const prevI = prevs[y].index;\n\n      const prevEdge = prev.levels[y];\n      const tail = tails[y];\n      const tailEdge = tail.levels[y];\n      const nextI = prevI + prevEdge.span;\n      const nextD = nextI - index;\n      const tailD = tailEdge.span;\n      tail.levels[y] = { next: prevEdge.next, span: nextD + tailD };\n\n      const rootEdge = root.levels[y];\n      const headD = rootEdge.span - 1;\n      const prevD = index - prevI;\n      prev.levels[y] = { next: rootEdge.next, span: prevD + headD };\n    }\n\n    // Update higher levels\n    const maxY = this.levels;\n    for (let y = minY; y < maxY; ++y) {\n      const levels = prevs[y].node.levels;\n      const { next, span } = levels[y];\n      levels[y] = { next, span: span + N };\n    }\n\n    // Update tail\n    if (index === this._size) {\n      this._tail = tails[0];\n    }\n\n    // Update size\n    this._size += N;\n  }\n}\n","import { BoundedEvent } from \"../types/boundedEvent\";\nimport { Stack } from \"../types/stack\";\nimport { Bounded } from \"../types/bounded\";\nimport { CircularArrayList } from \"./circularArrayList\";\n\n/**\n * A circular stack is similar to a traditional stack, but uses a fixed-size,\n * circular buffer. When the stack reaches its maximum capacity and a new\n * element is added, the oldest is discarded, thus maintaining its size.\n *\n * This structure efficiently utilizes memory for applications where only the\n * most recent additions are of interest and older data can be discarded.\n *\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularStack<T> implements Bounded<T>, Stack<T> {\n  /**\n   * @internal\n   */\n  protected list: CircularArrayList<T>;\n\n  /**\n   * Creates a new stack. Default `capacity` is `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new stack with the given capacity.\n   *\n   * @param capacity - the stack's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new stack from the given items. `capacity` will equal the number of items.\n   *\n   * @param items - the initial values in the stack.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    this.list = new CircularArrayList(capacity as number);\n  }\n\n  get capacity(): number {\n    return this.list.capacity;\n  }\n\n  get size(): number {\n    return this.list.size;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return CircularStack.name;\n  }\n\n  set capacity(capacity: number) {\n    this.list.capacity = capacity;\n  }\n\n  clear(): void {\n    this.list.clear();\n  }\n\n  entries(): IterableIterator<[number, T]> {\n    return this.list.entries();\n  }\n\n  forEach(\n    callbackfn: (value: T, index: number, collection: this) => void,\n    thisArg?: unknown\n  ): void {\n    return this.list.forEach((v, i) => callbackfn.call(thisArg, v, i, this));\n  }\n\n  has(value: T): boolean {\n    return this.list.has(value);\n  }\n\n  keys(): IterableIterator<number> {\n    return this.list.keys();\n  }\n\n  last(): T | undefined {\n    return this.list.last();\n  }\n\n  pop(): T | undefined {\n    return this.list.pop();\n  }\n\n  push(...elems: T[]): number {\n    return this.list.push(...elems);\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.list.values();\n  }\n\n  top(): T | undefined {\n    return this.list.last();\n  }\n\n  values(): IterableIterator<T> {\n    return this.list.values();\n  }\n\n  addListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.addListener(event, listener);\n    return this;\n  }\n\n  on(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.on(event, listener);\n    return this;\n  }\n\n  prependListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.prependListener(event, listener);\n    return this;\n  }\n\n  removeListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.removeListener(event, listener);\n    return this;\n  }\n}\n"],"names":["cut","get","entries","has","keys","toList","values","singlyCut","singlyGet","evicted","chunk","gen","getClosest","root","levels","NodeUtils.calcMaxLevel","NodeUtils.gen","NodeUtils.values","NodeUtils.truncateLevels","NodeUtils.get","NodeUtils.entries","NodeUtils.has","NodeUtils.keys","NodeUtils.copy","StackUtils.getClosest","StackUtils.gen","StackUtils.clone","NodeUtils.toList"],"mappings":"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"}