{"version":3,"file":"circle-ds.cjs","sources":["../../src/types/boundedEvent.ts","../../__vite-browser-external","../../src/circle/circularBase.ts","../../src/utils/constants.ts","../../src/utils/is.ts","../../src/circle/circularDeque.ts","../../src/circle/circularLinkedDeque.ts","../../src/circle/circularLinkedQueue.ts","../../src/circle/circularLinkedStack.ts","../../src/circle/circularMap.ts","../../src/circle/circularQueue.ts","../../src/circle/circularSet.ts","../../src/circle/circularStack.ts"],"sourcesContent":["export const BoundedEvent = {\n  Overflow: \"overflow\",\n} as const;\n","export default {}","import EventEmitter from \"events\";\nimport { BoundedEvent } from \"../types/boundedEvent\";\nimport { ValueOf } from \"../types/valueOf\";\n\nexport interface BoundedConstructor<T> {\n  new (capacity?: number | null): CircularBase<T>;\n}\n\nexport class CircularBase<T> {\n  /**\n   * The event emitter.\n   * @internal\n   */\n  protected emitter: EventEmitter;\n\n  constructor(emitter = new EventEmitter()) {\n    this.emitter = emitter;\n  }\n\n  /**\n   * Appends the listener function to the listeners array for the\n   * {@link BoundedEvent.Overflow} event.\n   *\n   * * No checks are made to see if the listener has already been added.\n   * Multiple calls with the same of event + listener combination will\n   * result in the listener being added and called multiple times.\n   *\n   * * By default, event listeners are invoked in the order they are added.\n   * The `prependListener()` method can be used as an alternative to add\n   * the event listener to the beginning of the listeners array.\n   *\n   * @param event - The name of the event.\n   * @param listener - The callback function. It will\n   * receive an array of elements that have been removed due to overflow.\n   * This can happen when elements are added while the collection is at\n   * capacity, or when capacity is reduced below the current size.\n   *\n   * @returns the collection.\n   */\n  addListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this;\n  addListener(\n    event: ValueOf<typeof BoundedEvent>,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    listener: (...args: any[]) => void\n  ): this {\n    this.emitter.addListener(event, listener);\n    return this;\n  }\n\n  /**\n   * Appends the listener function to the listeners array for the\n   * {@link BoundedEvent.Overflow} event.\n   *\n   * * No checks are made to see if the listener has already been added.\n   * Multiple calls with the same of event + listener combination will\n   * result in the listener being added and called multiple times.\n   *\n   * * By default, event listeners are invoked in the order they are added.\n   * The `prependListener()` method can be used as an alternative to add\n   * the event listener to the beginning of the listeners array.\n   *\n   * @param event - The name of the event.\n   * @param listener - The callback function. It will\n   * receive an array of elements that have been removed due to overflow.\n   * This can happen when elements are added while the collection is at\n   * capacity, or when capacity is reduced below the current size.\n   *\n   * @returns the collection.\n   */\n  on(event: typeof BoundedEvent.Overflow, listener: (elems: T[]) => void): this;\n  on(\n    event: ValueOf<typeof BoundedEvent>,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    listener: (...args: any[]) => void\n  ): this {\n    this.emitter.on(event, listener);\n    return this;\n  }\n\n  /**\n   * Adds the listener function to the beginning of the listeners array for\n   * the {@link BoundedEvent.Overflow} event.\n   *\n   * * No checks are made to see if the listener has already been added.\n   * Multiple calls with the same of event + listener combination will\n   * result in the listener being added and called multiple times.\n   *\n   * * Alternatively, the `addListener()` method can be used to add\n   * the event listener to the end of the listeners array.\n   *\n   * @param event - The name of the event.\n   * @param listener - The callback function. It will\n   * receive an array of elements that have been removed due to overflow.\n   * This can happen when elements are added while the collection is at\n   * capacity, or when capacity is reduced below the current size.\n   *\n   * @returns the collection.\n   */\n  prependListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this;\n  prependListener(\n    event: ValueOf<typeof BoundedEvent>,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    listener: (...args: any[]) => void\n  ): this {\n    this.emitter.prependListener(event, listener);\n    return this;\n  }\n\n  /**\n   * Removes the specified listener from the listener array for the event.\n   *\n   * At most once instance of a listener will be removed. If a listener\n   * has been added multiple times for the same event, this method should\n   * be called once per instance.\n   *\n   * @param event - The name of the event.\n   * @param listener - The callback function.\n   *\n   * @returns the collection.\n   */\n  removeListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this;\n  removeListener(\n    event: ValueOf<typeof BoundedEvent>,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    listener: (...args: any[]) => void\n  ): this {\n    this.emitter.removeListener(event, listener);\n    return this;\n  }\n}\n","/**\n * The maximum length of an array. The value is an unsigned 32-bit integer.\n *\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length}\n */\nexport const ARRAY_MAX_LENGTH = 4294967295; // 2**32 - 1;\n","import { ARRAY_MAX_LENGTH } from \"./constants\";\n\nexport function isArrayLength(value: unknown): value is number {\n  return (\n    Number.isInteger(value) &&\n    (value as number) >= 0 &&\n    (value as number) <= ARRAY_MAX_LENGTH\n  );\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isFunction(value: unknown): value is Function {\n  return typeof value === \"function\";\n}\n\nexport function isInfinity(value: unknown): boolean {\n  return value === Number.POSITIVE_INFINITY;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function isIterable(value: any): value is Iterable<unknown> {\n  return typeof value?.[Symbol.iterator] === \"function\";\n}\n\nexport function isNull(value: unknown): value is null {\n  return value === null;\n}\n\nexport function isNumber(value: unknown): value is number {\n  return typeof value === \"number\";\n}\n\nexport function isSafeCount(value: unknown): value is number {\n  return Number.isSafeInteger(value) && (value as number) >= 0;\n}\n\nexport function isSymbol(value: unknown): value is symbol {\n  return typeof value === \"symbol\";\n}\n\nexport function isUndefined(value: unknown): value is undefined {\n  return typeof value === \"undefined\";\n}\n","import { CircularBase } from \"./circularBase\";\nimport { BoundedEvent } from \"../types/boundedEvent\";\nimport { isArrayLength, isInfinity, isNumber } from \"../utils/is\";\nimport { Bounded } from \"../types/bounded\";\nimport { ARRAY_MAX_LENGTH } from \"../utils/constants\";\nimport { Deque } from \"..\";\n\n/**\n * A circular deque is similar to a traditional deque, but uses a fixed-size,\n * circular buffer. When the deque reaches its maximum capacity and a new\n * element is added, the oldest is discarded, thus maintaining its size.\n *\n * This structure efficiently utilizes memory for applications where only the\n * most recent additions are of interest and older data can be discarded.\n *\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularDeque<T>\n  extends CircularBase<T>\n  implements Bounded<T>, Deque<T>\n{\n  /**\n   * The maximum number of elements that can be stored in the collection.\n   */\n  protected _capacity: number;\n\n  /**\n   * The index representing the first element.\n   * @internal\n   */\n  protected head: number;\n\n  /**\n   * Whether capacity is finite (true) or infinite (false).\n   */\n  protected isFinite: boolean;\n\n  /**\n   * The index one more than the last element.\n   * @internal\n   */\n  protected next: number;\n\n  /**\n   * The number of elements.\n   * @internal\n   */\n  protected _size: number;\n\n  /**\n   * The stored values.\n   * @internal\n   */\n  protected vals: T[];\n\n  /**\n   * Creates a new deque. Default `capacity` is `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new deque with the given capacity.\n   *\n   * @param capacity - the deque's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new deque from the given items. `capacity` will equal the number of items.\n   *\n   * @param items - the initial values in the deque.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    super();\n\n    // Initialize class variables\n    this._capacity = ARRAY_MAX_LENGTH;\n    this.head = 0;\n    this.isFinite = false;\n    this._size = 0;\n    this.next = 0;\n    this.vals = [];\n\n    // If capacity is null, undefined, or Infinity\n    capacity = capacity ?? Infinity;\n    if (isInfinity(capacity)) {\n      return;\n    }\n\n    // If capacity is a number\n    if (isNumber(capacity)) {\n      // If capacity is invalid\n      if (!isArrayLength(capacity)) {\n        throw new RangeError(\"Invalid capacity\");\n      }\n      // If capacity is valid\n      this._capacity = capacity;\n      this.isFinite = true;\n      return;\n    }\n\n    // If capacity is an iterable\n    for (const value of capacity as Iterable<T>) {\n      this.vals.push(value);\n    }\n    this._capacity = this.vals.length;\n    this.isFinite = true;\n    this._size = this._capacity;\n  }\n\n  /**\n   * @returns the maximum number of elements that can be stored.\n   */\n  get capacity(): number {\n    return this.isFinite ? this._capacity : Infinity;\n  }\n\n  /**\n   *  @returns the number of elements in the collection.\n   */\n  get size(): number {\n    return this._size;\n  }\n\n  /**\n   * Return the type of the object.\n   */\n  get [Symbol.toStringTag](): string {\n    return CircularDeque.name;\n  }\n\n  /**\n   * Sets the maximum number of elements that can be stored.\n   */\n  set capacity(capacity: number) {\n    // Convert capacity to a number\n    capacity = +capacity;\n\n    // Check capacity\n    if (isInfinity(capacity)) {\n      // If capacity is Infinity\n      capacity = ARRAY_MAX_LENGTH;\n      this.isFinite = false;\n    } else if (isArrayLength(capacity)) {\n      // If capacity is valid\n      this.isFinite = true;\n    } else {\n      // If capacity is invalid\n      throw new RangeError(\"Invalid capacity\");\n    }\n\n    // Update collection\n    if (this._size < 1) {\n      // If collection is empty\n      this._capacity = capacity;\n      this.clear();\n    } else if (capacity < this._capacity) {\n      // If capacity is decreasing\n      this.shrink(capacity);\n    } else if (capacity > this._capacity) {\n      // If capacity is increasing\n      this.grow(capacity);\n    }\n  }\n\n  /**\n   * Remove all elements and resets the collection.\n   */\n  clear(): void {\n    this.head = 0;\n    this._size = 0;\n    this.next = 0;\n    this.vals.length = 0;\n  }\n\n  /**\n   * Iterate through the collection's entries.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @returns an iterable of [key, value] pairs for every entry.\n   */\n  *entries(): IterableIterator<[number, T]> {\n    for (let ext = 0; ext < this._size; ++ext) {\n      yield [ext, this.vals[(this.head + ext) % this._capacity]];\n    }\n  }\n\n  /**\n   * Get the first element in the deque.\n   *\n   * Alias for {@link front | front()}.\n   *\n   * @returns the first element, or `undefined` if empty.\n   */\n  first(): T | undefined {\n    return this.vals[this.head];\n  }\n\n  /**\n   * Performs the specified action for each element in the collection.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @param callbackfn - A function that accepts up to three arguments. It is called once per element.\n   * @param thisArg - An object to which the `this` keyword refers to in the `callbackfn` function. If omitted, `undefined` is used.\n   */\n  forEach(\n    callbackfn: (value: T, index: number, collection: this) => void,\n    thisArg?: unknown\n  ): void {\n    const N = this._size;\n    for (let ext = 0; ext < N && ext < this._size; ++ext) {\n      const value = this.vals[(this.head + ext) % this._capacity];\n      callbackfn.call(thisArg, value, ext, this);\n    }\n  }\n\n  /**\n   * Get the element at the front of the deque.\n   *\n   * Alias for {@link first | first()}.\n   *\n   * @returns the front element, or `undefined` if empty.\n   */\n  front(): T | undefined {\n    return this.vals[this.head];\n  }\n\n  /**\n   * Determines whether a given element is in the collection.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @param value - The element to search for\n   *\n   * @returns a boolean indicating if `value` was found or not\n   */\n  has(value: T): boolean {\n    const N = this._size;\n    for (let ext = 0; ext < N; ++ext) {\n      if (value === this.vals[(this.head + ext) % this._capacity]) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Iterate through the collection's keys.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @returns an iterable of keys.\n   */\n  *keys(): IterableIterator<number> {\n    for (let ext = 0; ext < this._size; ++ext) {\n      yield ext;\n    }\n  }\n\n  /**\n   * Get the last element in the deque.\n   *\n   * Alias for {@link top | top()}.\n   *\n   * @returns the last element, or `undefined` if empty.\n   */\n  last(): T | undefined {\n    return this.top();\n  }\n\n  /**\n   * Removes the last element from the deque.\n   *\n   * @returns the last element, or `undefined` if empty.\n   */\n  pop(): T | undefined {\n    if (this._size <= 0) {\n      return undefined;\n    }\n\n    const tail = this.next > 0 ? this.next - 1 : this.head + this._size - 1;\n\n    --this._size;\n    this.next = tail;\n    const value = this.vals[tail];\n    this.vals[tail] = undefined as T;\n    return value;\n  }\n\n  /**\n   * Inserts new elements at the end of the deque.\n   *\n   * @param elems - Elements to insert.\n   *\n   * @returns The new size of the deque.\n   */\n  push(...elems: T[]): number {\n    // Case 1: Zero inputs\n    const N = elems.length;\n    if (N < 1) {\n      return this._size;\n    }\n\n    // Case 2: Zero capacity\n    const capacity = this._capacity;\n    if (capacity < 1) {\n      this.emit(elems);\n      return this._size;\n    }\n\n    // Case 3: Enough free space\n    const free = capacity - this._size;\n    if (free >= N) {\n      this._push(elems, N);\n      return this._size;\n    }\n\n    // Case 4: \"Infinite\" capacity but out of space\n    if (!this.isFinite) {\n      this._push(elems, free);\n      throw new Error(\"Out of memory\");\n    }\n\n    // Remove old values\n    const diff = N - capacity;\n    this.evictHead(this.size + diff);\n    if (diff > 0) {\n      this.emit(elems.splice(0, diff));\n    }\n\n    // Add new values\n    else if (diff < 0) {\n      this._push(elems, N);\n      return this._size;\n    }\n    this.vals = elems;\n    this._size = capacity;\n    return this._size;\n  }\n\n  /**\n   * Removes the element at the front of the deque.\n   *\n   * @returns the front element, or `undefined` if empty.\n   */\n  shift(): T | undefined {\n    if (this._size <= 0) {\n      return undefined;\n    }\n\n    --this._size;\n    const value = this.vals[this.head];\n    this.vals[this.head] = undefined as T;\n    if (++this.head >= this._capacity) {\n      this.head = 0;\n      this.vals.length = this.next;\n    }\n    return value;\n  }\n\n  /**\n   * Iterate through the collection's values.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @returns an iterable of values.\n   */\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.values();\n  }\n\n  /**\n   * Inserts new elements at the end of the deque.\n   *\n   * @param elems - Elements to insert.\n   *\n   * @returns The new size of the deque.\n   */\n  unshift(...elems: T[]): number {\n    // Case 1: Zero inputs\n    const N = elems.length;\n    if (N < 1) {\n      return this._size;\n    }\n\n    // Case 2: Zero capacity\n    const capacity = this._capacity;\n    if (capacity < 1) {\n      this.emit(elems);\n      return this._size;\n    }\n\n    // Case 3: Enough free space\n    const free = capacity - this._size;\n    if (free >= N) {\n      this._unshift(elems, N);\n      return this._size;\n    }\n\n    // Case 4: \"Infinite\" capacity but out of space\n    if (!this.isFinite) {\n      this._unshift(elems, free);\n      throw new Error(\"Out of memory\");\n    }\n\n    // Remove old values\n    const diff = N - capacity;\n    this.evictTail(this.size + diff);\n    if (diff > 0) {\n      this.emit(elems.splice(N - diff, diff));\n    }\n\n    // Add new values\n    else if (diff < 0) {\n      this._unshift(elems, N);\n      return this._size;\n    }\n    this.vals = elems;\n    this._size = capacity;\n    return this._size;\n  }\n\n  /**\n   * Get the last element in the deque.\n   *\n   * Alias for {@link last | last()}.\n   *\n   * @returns the last element, or `undefined` if empty.\n   */\n  top(): T | undefined {\n    if (this._size < 1) {\n      return undefined;\n    }\n    return this.vals[(this.head + this._size - 1) % this._capacity];\n  }\n\n  /**\n   * Iterate through the collection's values.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @returns an iterable of values.\n   */\n  *values(): IterableIterator<T> {\n    for (let ext = 0; ext < this._size; ++ext) {\n      yield this.vals[(this.head + ext) % this._capacity];\n    }\n  }\n\n  /**\n   * Emit an event containing the items evicted from the collection.\n   *\n   * @param evicted - The items evicted from the collection.\n   */\n  protected emit(evicted: T[]): void {\n    this.emitter.emit(BoundedEvent.Overflow, evicted);\n  }\n\n  /**\n   * Removes a given number of elements from the deque.\n   * If elements are removed, the {@link BoundedEvent.Overflow} event\n   * is emitted one or more times.\n   *\n   * @param count - The number of elements to evict.\n   */\n  protected evictHead(count: number): void {\n    if (count <= 0) {\n      return;\n    }\n\n    const len = this._capacity - this.head;\n    const isNonsequential = !this.isSequential();\n\n    if (isNonsequential && len > count) {\n      this.emit(this.vals.slice(this.head, this.head + count));\n      this.vals.fill(undefined as T, this.head, this.head + count);\n      this.head += count;\n      this._size -= count;\n      return;\n    }\n\n    if (isNonsequential) {\n      this.emit(this.vals.slice(this.head, this.head + len));\n      this.vals.length = this.next;\n      this.head = 0;\n      this._size -= len;\n      if (count <= len) {\n        return;\n      }\n      count -= len;\n    }\n\n    if (count >= this._size) {\n      this.emit(this.vals.slice(this.head, this.head + this._size));\n      this.clear();\n      return;\n    }\n\n    this.emit(this.vals.slice(this.head, this.head + count));\n    this.vals.fill(undefined as T, this.head, this.head + count);\n    this.head += count;\n    this._size -= count;\n  }\n\n  /**\n   * Removes a given number of elements from the deque.\n   * If elements are removed, the {@link BoundedEvent.Overflow} event\n   * is emitted one or more times.\n   *\n   * @param count - The number of elements to evict.\n   */\n  protected evictTail(count: number): void {\n    if (count <= 0) {\n      return;\n    }\n\n    const isNonsequential = !this.isSequential();\n    if (isNonsequential && this.next > count) {\n      this.emit(this.vals.slice(this.next - count, this.next));\n      this.vals.fill(undefined as T, this.next - count, this.next);\n      this.next -= count;\n      this._size -= count;\n      return;\n    }\n\n    if (isNonsequential) {\n      this.emit(this.vals.slice(0, this.next));\n      this.vals.fill(undefined as T, 0, this.next);\n      this._size -= this.next;\n      count -= this.next;\n      this.next = 0;\n      if (count <= 0) {\n        return;\n      }\n    }\n\n    const tail = this.head + this._size;\n    if (count >= this._size) {\n      this.emit(this.vals.slice(this.head, tail));\n      this.clear();\n      return;\n    }\n\n    this.emit(this.vals.slice(tail - count, tail));\n    this.next = tail - count;\n    this.vals.length = this.next;\n    this._size -= count;\n  }\n\n  /**\n   * Grow capacity.\n   * @internal\n   *\n   * @param capacity - the new capacity\n   */\n  protected grow(capacity: number): void {\n    // Check if deque is sequential: [    H123456T    ]\n    if (this.isSequential()) {\n      this.sequentialReset(capacity);\n      return;\n    }\n\n    // Queue is not sequential: [456T    H123]\n\n    if (this._size <= this.head) {\n      // [H123456T] = A + B = N\n      const temp = this._size - this.next;\n      this.vals.copyWithin(temp, 0, this.next);\n      this.vals.copyWithin(0, this.head, this.head + temp);\n      this.vals.length = this._size;\n      this.head = 0;\n      this.next = this._size;\n    } else if (this.head + this._size <= capacity) {\n      // [        H123456T] = 2B < 2N\n      this.vals.length = this.head + this._size;\n      this.vals.copyWithin(this._capacity, 0, this.next);\n      this.vals.fill(undefined as T, 0, this.next);\n      this.next = (this.head + this._size) % capacity;\n    } /* else if (this.next + this._size <= capacity) {\n      // [    H123456T] = A + 2B = N + B < 2N\n      const temp = this._capacity - this.head;\n      this.vals.length = capacity;\n      this.vals.copyWithin(this.next, this.head, this._capacity);\n      this.vals.copyWithin(this.next + temp, 0, this.next);\n      this.vals.fill(undefined as T, 0, this.next);\n      this.vals.length = this.next + this._size;\n      this.head = this.next;\n      this.next = (this.head + this._size) % capacity;\n    } */ else {\n      // [6T      H12345] = B + D < 2B < 2N\n      const diff = capacity - this._capacity;\n      this.vals.length = capacity;\n      this.vals.copyWithin(this._capacity, 0, diff);\n      this.vals.copyWithin(0, diff, this.next);\n      const temp = Math.max(diff, this.next - diff);\n      this.vals.fill(undefined as T, temp, this.next);\n      this.next -= diff;\n    }\n\n    // Update capacity\n    this._capacity = capacity;\n  }\n\n  /**\n   * Returns whether the deque is stored sequentially in memory.\n   *\n   * @returns `true` if the deque is sequential in memory, `false` otherwise.\n   */\n  protected isSequential(): boolean {\n    return this.head < this.next || this.next < 1;\n  }\n\n  /**\n   * Append new elements to the collection.\n   *\n   * @param elems - The elements to append.\n   * @param max - The number of elements to append.\n   */\n  protected _push(elems: T[], max: number): void {\n    const capacity = this._capacity;\n    const vals = this.vals;\n\n    let tail = this.next;\n    for (let i = 0; i < max; ++i) {\n      vals[tail] = elems[i];\n      if (++tail >= capacity) {\n        tail = 0;\n      }\n    }\n\n    this.next = tail;\n    this._size += max;\n  }\n\n  /**\n   * Adjusts the deque to fit within the given capacity.\n   *\n   * Assumes the deque is A) sequential in memory and B) size \\<= capacity.\n   *\n   * @param capacity - The new capacity.\n   *\n   * @returns `true` if the deque was reset, `false` otherwise.\n   */\n  protected sequentialReset(capacity: number): boolean {\n    const tail = this.head + this._size;\n\n    // If deque fits in current location: [    H------T    ]\n    if (tail <= capacity) {\n      this.vals.length = tail;\n      this.next = this.vals.length % capacity;\n\n      // If deque must be fully moved: [H------T    ]\n    } else if (this.head >= capacity) {\n      this.vals.copyWithin(0, this.head, tail);\n      this.vals.length = this._size;\n      this.head = 0;\n      this.next = this._size % capacity;\n\n      // If deque must be partially moved: [--T  H----]\n    } else {\n      this.vals.copyWithin(0, capacity, tail);\n      this.vals.length = capacity;\n      this.next = tail - capacity;\n    }\n\n    this._capacity = capacity;\n    return true;\n  }\n\n  /**\n   * Shrink capacity.\n   * @internal\n   *\n   * @param capacity - the new capacity\n   */\n  protected shrink(capacity: number): void {\n    // Handle overflow\n    this.evictHead(this._size - capacity);\n\n    // Check if deque is sequential: [    H123456T    ]\n    if (this.isSequential()) {\n      this.sequentialReset(capacity);\n      return;\n    }\n\n    // Shift 1st half of deque: [456T....H123] -> [456T..H123]\n    const diff = this._capacity - capacity;\n    this.vals.copyWithin(this.head - diff, this.head, this._capacity);\n    this.vals.length = capacity;\n    this.head -= diff;\n    this._capacity = capacity;\n  }\n\n  /**\n   * Append new elements to the collection.\n   *\n   * @param elems - The elements to append.\n   * @param num - The number of elements to append.\n   */\n  protected _unshift(elems: T[], num: number): void {\n    const capacity = this._capacity;\n    const vals = this.vals;\n\n    let head = this.head;\n    const min = elems.length - num;\n    for (let i = elems.length - 1; i >= min; --i) {\n      if (--head < 0) {\n        head += capacity;\n      }\n      vals[head] = elems[i];\n    }\n\n    this.head = head;\n    this._size += num;\n  }\n}\n","import { CircularBase } from \"./circularBase\";\nimport { BoundedEvent } from \"../types/boundedEvent\";\nimport { Deque } from \"../types/deque\";\nimport { isInfinity, isNumber, isSafeCount } from \"../utils/is\";\nimport { Bounded } from \"../types/bounded\";\n\ninterface Node<T> {\n  next: Node<T>;\n  prev: Node<T>;\n  value: T;\n}\n\n/**\n * A circular stack is similar to a traditional stack, but uses a fixed-size,\n * circular buffer. When the stack reaches its maximum capacity and a new\n * element is added, the oldest is discarded, thus maintaining its size.\n *\n * This structure efficiently utilizes memory for applications where only the\n * most recent additions are of interest and older data can be discarded.\n *\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularLinkedDeque<T>\n  extends CircularBase<T>\n  implements Bounded<T>, Deque<T>\n{\n  /**\n   * The maximum number of elements that can be stored in the collection.\n   */\n  protected _capacity: number;\n\n  /**\n   * The root of the collection.\n   * @internal\n   */\n  protected root: Node<T>;\n\n  /**\n   * The number of elements in the collection.\n   * @internal\n   */\n  protected _size: number;\n\n  /**\n   * Creates a new stack with `capacity` defaulted to `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new stack with the given capacity.\n   *\n   * @param capacity - the stack's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new stack. Initial capacity is the number of items given.\n   *\n   * @param items - the values to store in the stack.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    super();\n\n    // Initialize class variables\n    this._capacity = Infinity;\n    this.root = { value: undefined } as Node<T>;\n    this.root.next = this.root;\n    this.root.prev = this.root;\n    this._size = 0;\n\n    // Case 1: capacity is null, undefined or Infinity\n    capacity = capacity ?? Infinity;\n    if (isInfinity(capacity)) {\n      return;\n    }\n\n    // Case 2: capacity is zero or a positive safe integer\n    if (isNumber(capacity)) {\n      if (!isSafeCount(capacity)) {\n        throw new RangeError(\"Invalid capacity\");\n      }\n      this._capacity = capacity;\n      return;\n    }\n\n    // Case 3: capacity is iterable\n    let tail = this.root.prev;\n    for (const value of capacity as Iterable<T>) {\n      tail.next = { next: this.root, prev: tail, value };\n      tail = tail.next;\n      this.root.prev = tail;\n      ++this._size;\n    }\n    this._capacity = this._size;\n  }\n\n  /**\n   * @returns the maximum number of elements that can be stored.\n   */\n  get capacity(): number {\n    return this._capacity;\n  }\n\n  /**\n   *  @returns the number of elements in the collection.\n   */\n  get size(): number {\n    return this._size;\n  }\n\n  /**\n   * Return the type of the object.\n   */\n  get [Symbol.toStringTag](): string {\n    return CircularLinkedDeque.name;\n  }\n\n  /**\n   * Sets the maximum number of elements that can be stored.\n   */\n  set capacity(capacity: number) {\n    // Convert input to a number\n    capacity = +capacity;\n\n    // If input is NaN, below zero, or a non-integer\n    if (!isInfinity(capacity) && !isSafeCount(capacity)) {\n      throw new RangeError(\"Invalid capacity\");\n    }\n\n    // If current size fits within new capacity\n    if (this._size <= capacity) {\n      this._capacity = capacity;\n      return;\n    }\n\n    // Shrink stack\n    const items: T[] = [];\n    let head = this.root.next;\n    do {\n      items.push(head.value);\n      head = head.next;\n    } while (--this._size > capacity);\n    this.root.next = head;\n    head.prev = this.root;\n\n    // Update capacity\n    this._capacity = capacity;\n\n    // Emit discarded items\n    this.emitter.emit(BoundedEvent.Overflow, items);\n  }\n\n  /**\n   * Remove all elements and resets the collection.\n   */\n  clear(): void {\n    this._size = 0;\n    this.root = { value: undefined } as Node<T>;\n    this.root.next = this.root;\n    this.root.prev = this.root;\n  }\n\n  /**\n   * Iterate through the collection's entries.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @returns an iterable of [key, value] pairs for every entry.\n   */\n  *entries(): IterableIterator<[number, T]> {\n    let node = this.root;\n    for (let i = 0; i < this._size; ++i) {\n      node = node.next;\n      yield [i, node.value];\n    }\n  }\n\n  /**\n   * Get the first element in the queue.\n   *\n   * Alias for {@link top | top()}.\n   *\n   * @returns the first element, or `undefined` if empty.\n   */\n  first(): T | undefined {\n    return this.root.next.value;\n  }\n\n  /**\n   * Performs the specified action for each element in the collection.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @param callbackfn - A function that accepts up to three arguments. It is called once per element.\n   * @param thisArg - An object to which the `this` keyword refers to in the `callbackfn` function. If omitted, `undefined` is used.\n   */\n  forEach(\n    callbackfn: (value: T, index: number, collection: this) => void,\n    thisArg?: unknown\n  ): void {\n    let node = this.root;\n    for (let i = 0; i < this._size; ++i) {\n      node = node.next;\n      callbackfn.call(thisArg, node.value, i, this);\n    }\n  }\n\n  /**\n   * Get the element at the front of the queue.\n   *\n   * Alias for {@link top | top()}.\n   *\n   * @returns the first element, or `undefined` if empty.\n   */\n  front(): T | undefined {\n    return this.root.next.value;\n  }\n\n  /**\n   * Determines whether a given element is in the collection.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @param value - The element to search for\n   *\n   * @returns a boolean indicating if `value` was found or not\n   */\n  has(value: T): boolean {\n    let node = this.root;\n    for (let i = 0; i < this._size; ++i) {\n      node = node.next;\n      if (node.value === value) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Iterate through the collection's keys.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @returns an iterable of keys.\n   */\n  *keys(): IterableIterator<number> {\n    for (let i = 0; i < this._size; ++i) {\n      yield i;\n    }\n  }\n\n  /**\n   * Get the last element pushed onto the stack.\n   *\n   * Alias for {@link top | top()}.\n   *\n   * @returns the last element, or `undefined` if empty.\n   */\n  last(): T | undefined {\n    return this.root.prev.value;\n  }\n\n  /**\n   * Removes the top element from the stack and returns it.\n   *\n   * @returns the top element, or `undefined` if empty.\n   */\n  pop(): T | undefined {\n    if (this._size < 1) {\n      return undefined;\n    }\n    const node = this.root.prev;\n    this.root.prev = node.prev;\n    node.prev.next = this.root;\n    --this._size;\n    return node.value;\n  }\n\n  /**\n   * Inserts new elements at the end of the stack.\n   *\n   * @param elems - Elements to insert.\n   *\n   * @returns The overwritten elements, if any.\n   */\n  push(...elems: T[]): number {\n    const capacity = this._capacity;\n    if (capacity < 1) {\n      this.emitter.emit(BoundedEvent.Overflow, elems);\n      return this._size;\n    }\n\n    const N = elems.length;\n    const root = this.root;\n    const evicted: T[] = [];\n\n    let tail = root.prev;\n    for (let i = 0; i < N; ++i) {\n      tail.next = { next: root, prev: tail, value: elems[i] };\n      tail = tail.next;\n      if (this._size < capacity) {\n        ++this._size;\n      } else {\n        evicted.push(root.next.value);\n        root.next = root.next.next;\n      }\n    }\n    root.prev = tail;\n    root.next.prev = root;\n\n    // Emit evicted items\n    if (evicted.length > 0) {\n      this.emitter.emit(BoundedEvent.Overflow, evicted);\n    }\n\n    return this._size;\n  }\n\n  /**\n   * Removes the element at the front of the queue.\n   *\n   * @returns the front element, or `undefined` if empty.\n   */\n  shift(): T | undefined {\n    if (this._size < 1) {\n      return undefined;\n    }\n    const head = this.root.next.next;\n    const value = head.prev.value;\n    this.root.next = head;\n    head.prev = this.root;\n    --this._size;\n    return value;\n  }\n\n  /**\n   * Iterate through the collection's values.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @returns an iterable of values.\n   */\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.values();\n  }\n\n  /**\n   * Get the last element pushed onto the stack.\n   *\n   * Alias for {@link top | top()}.\n   *\n   * @returns the last element, or `undefined` if empty.\n   */\n  top(): T | undefined {\n    return this.root.prev.value;\n  }\n\n  /**\n   * Inserts new elements at the front of the queue.\n   *\n   * @param elems - Elements to insert.\n   *\n   * @returns The overwritten elements, if any.\n   */\n  unshift(...elems: T[]): number {\n    const capacity = this._capacity;\n    if (capacity < 1) {\n      this.emitter.emit(BoundedEvent.Overflow, elems);\n      return this._size;\n    }\n\n    const root = this.root;\n    const evicted: T[] = [];\n\n    let head = root.next;\n    for (let i = elems.length - 1; i >= 0; --i) {\n      head = { next: head, prev: root, value: elems[i] };\n      head.next.prev = head;\n      if (this._size < capacity) {\n        ++this._size;\n      } else {\n        evicted.push(root.prev.value);\n        root.prev = root.prev.prev;\n      }\n    }\n    root.next = head;\n    root.prev.next = root;\n\n    // Emit evicted items\n    if (evicted.length > 0) {\n      this.emitter.emit(BoundedEvent.Overflow, evicted.reverse());\n    }\n\n    return this._size;\n  }\n\n  /**\n   * Iterate through the collection's values.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @returns an iterable of values.\n   */\n  *values(): IterableIterator<T> {\n    let node = this.root;\n    for (let i = 0; i < this._size; ++i) {\n      node = node.next;\n      yield node.value;\n    }\n  }\n}\n","import { CircularBase } from \"./circularBase\";\nimport { BoundedEvent } from \"../types/boundedEvent\";\nimport { Queue } from \"../types/queue\";\nimport { isInfinity, isNumber, isSafeCount } from \"../utils/is\";\nimport { Bounded } from \"../types/bounded\";\n\ninterface Node<T> {\n  next: Node<T>;\n  value: T;\n}\n\n/**\n * A circular queue is similar to a traditional queue, but uses a fixed-size,\n * circular buffer. When the queue reaches its maximum capacity and a new\n * element is added, the oldest is discarded, thus maintaining its size.\n *\n * This structure efficiently utilizes memory for applications where only the\n * most recent additions are of interest and older data can be discarded.\n *\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularLinkedQueue<T>\n  extends CircularBase<T>\n  implements Bounded<T>, Queue<T>\n{\n  /**\n   * The maximum number of elements that can be stored in the collection.\n   */\n  protected _capacity: number;\n\n  /**\n   * The root of the collection.\n   * @internal\n   */\n  protected root: Node<T>;\n\n  /**\n   * The number of elements in the collection.\n   * @internal\n   */\n  protected _size: number;\n\n  /**\n   * The tail of the collection.\n   * @internal\n   */\n  protected tail: Node<T>;\n\n  /**\n   * Creates a new stack with `capacity` defaulted to `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new stack with the given capacity.\n   *\n   * @param capacity - the stack's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new stack. Initial capacity is the number of items given.\n   *\n   * @param items - the values to store in the stack.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    super();\n\n    // Initialize class variables\n    this._capacity = Infinity;\n    this.root = { value: undefined } as Node<T>;\n    this.root.next = this.root;\n    this._size = 0;\n    this.tail = this.root;\n\n    // Case 1: capacity is null, undefined or Infinity\n    capacity = capacity ?? Infinity;\n    if (isInfinity(capacity)) {\n      return;\n    }\n\n    // Case 2: capacity is zero or a positive safe integer\n    if (isNumber(capacity)) {\n      if (!isSafeCount(capacity)) {\n        throw new RangeError(\"Invalid capacity\");\n      }\n      this._capacity = capacity;\n      return;\n    }\n\n    // Case 3: capacity is iterable\n    let tail = this.root;\n    for (const value of capacity as Iterable<T>) {\n      tail.next = { next: this.root, value } as Node<T>;\n      tail = tail.next;\n      ++this._size;\n    }\n    this.tail = tail;\n    tail.next = this.root;\n    this._capacity = this._size;\n  }\n\n  /**\n   * @returns the maximum number of elements that can be stored.\n   */\n  get capacity(): number {\n    return this._capacity;\n  }\n\n  /**\n   *  @returns the number of elements in the collection.\n   */\n  get size(): number {\n    return this._size;\n  }\n\n  /**\n   * Return the type of the object.\n   */\n  get [Symbol.toStringTag](): string {\n    return CircularLinkedQueue.name;\n  }\n\n  /**\n   * Sets the maximum number of elements that can be stored.\n   */\n  set capacity(capacity: number) {\n    // Convert input to a number\n    capacity = +capacity;\n\n    // If input is NaN, below zero, or a non-integer\n    if (!isInfinity(capacity) && !isSafeCount(capacity)) {\n      throw new RangeError(\"Invalid capacity\");\n    }\n\n    // If current size fits within new capacity\n    if (this._size <= capacity) {\n      this._capacity = capacity;\n      return;\n    }\n\n    // Shrink queue\n    const items: T[] = [];\n    let head = this.root.next;\n    do {\n      items.push(head.value);\n      head = head.next;\n    } while (--this._size > capacity);\n    this.root.next = head;\n    this.tail = this._size > 0 ? this.tail : this.root;\n\n    // Update capacity\n    this._capacity = capacity;\n\n    // Emit discarded items\n    this.emitter.emit(BoundedEvent.Overflow, items);\n  }\n\n  /**\n   * Remove all elements and resets the collection.\n   */\n  clear(): void {\n    this._size = 0;\n    this.root = { value: undefined } as Node<T>;\n    this.root.next = this.root;\n    this.tail = this.root;\n  }\n\n  /**\n   * Iterate through the collection's entries.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @returns an iterable of [key, value] pairs for every entry.\n   */\n  *entries(): IterableIterator<[number, T]> {\n    let node = this.root;\n    for (let i = 0; i < this._size; ++i) {\n      node = node.next;\n      yield [i, node.value];\n    }\n  }\n\n  /**\n   * Get the first element in the queue.\n   *\n   * Alias for {@link top | top()}.\n   *\n   * @returns the first element, or `undefined` if empty.\n   */\n  first(): T | undefined {\n    return this.root.next.value;\n  }\n\n  /**\n   * Performs the specified action for each element in the collection.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @param callbackfn - A function that accepts up to three arguments. It is called once per element.\n   * @param thisArg - An object to which the `this` keyword refers to in the `callbackfn` function. If omitted, `undefined` is used.\n   */\n  forEach(\n    callbackfn: (value: T, index: number, collection: this) => void,\n    thisArg?: unknown\n  ): void {\n    let node = this.root;\n    for (let i = 0; i < this._size; ++i) {\n      node = node.next;\n      callbackfn.call(thisArg, node.value, i, this);\n    }\n  }\n\n  /**\n   * Get the element at the front of the queue.\n   *\n   * Alias for {@link top | top()}.\n   *\n   * @returns the first element, or `undefined` if empty.\n   */\n  front(): T | undefined {\n    return this.root.next.value;\n  }\n\n  /**\n   * Determines whether a given element is in the collection.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @param value - The element to search for\n   *\n   * @returns a boolean indicating if `value` was found or not\n   */\n  has(value: T): boolean {\n    let node = this.root;\n    for (let i = 0; i < this._size; ++i) {\n      node = node.next;\n      if (node.value === value) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Iterate through the collection's keys.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @returns an iterable of keys.\n   */\n  *keys(): IterableIterator<number> {\n    for (let i = 0; i < this._size; ++i) {\n      yield i;\n    }\n  }\n\n  /**\n   * Inserts new elements at the end of the stack.\n   *\n   * @param elems - Elements to insert.\n   *\n   * @returns The overwritten elements, if any.\n   */\n  push(...elems: T[]): number {\n    const capacity = this._capacity;\n    if (capacity < 1) {\n      return this._size;\n    }\n\n    const N = elems.length;\n    const root = this.root;\n    const evicted: T[] = [];\n\n    for (let i = 0; i < N; ++i) {\n      this.tail.next = { next: root, value: elems[i] };\n      this.tail = this.tail.next;\n      if (this._size < capacity) {\n        ++this._size;\n      } else {\n        evicted.push(root.next.value);\n        root.next = root.next.next;\n      }\n    }\n\n    // Emit evicted items\n    if (evicted.length > 0) {\n      this.emitter.emit(BoundedEvent.Overflow, evicted);\n    }\n\n    return this._size;\n  }\n\n  /**\n   * Removes the element at the front of the queue.\n   *\n   * @returns the front element, or `undefined` if empty.\n   */\n  shift(): T | undefined {\n    if (this._size < 1) {\n      return undefined;\n    }\n    const head = this.root.next;\n    this.root.next = head.next;\n    if (--this._size < 1) {\n      this.tail = this.root;\n    }\n    return head.value;\n  }\n\n  /**\n   * Iterate through the collection's values.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @returns an iterable of values.\n   */\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.values();\n  }\n\n  /**\n   * Iterate through the collection's values.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @returns an iterable of values.\n   */\n  *values(): IterableIterator<T> {\n    let node = this.root;\n    for (let i = 0; i < this._size; ++i) {\n      node = node.next;\n      yield node.value;\n    }\n  }\n}\n","import { CircularBase } from \"./circularBase\";\nimport { Stack } from \"../types/stack\";\nimport { isInfinity, isNumber, isSafeCount } from \"../utils/is\";\nimport { BoundedEvent } from \"..\";\nimport { Bounded } from \"../types/bounded\";\n\ninterface Node<T> {\n  next: Node<T>;\n  prev: Node<T>;\n  value: T;\n}\n\n/**\n * A circular stack is similar to a traditional stack, but uses a fixed-size,\n * circular buffer. When the stack reaches its maximum capacity and a new\n * element is added, the oldest is discarded, thus maintaining its size.\n *\n * This structure efficiently utilizes memory for applications where only the\n * most recent additions are of interest and older data can be discarded.\n *\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularLinkedStack<T>\n  extends CircularBase<T>\n  implements Bounded<T>, Stack<T>\n{\n  /**\n   * The maximum number of elements that can be stored in the collection.\n   */\n  protected _capacity: number;\n\n  /**\n   * The root of the collection.\n   * @internal\n   */\n  protected root: Node<T>;\n\n  /**\n   * The number of elements in the collection.\n   * @internal\n   */\n  protected _size: number;\n\n  /**\n   * Creates a new stack with `capacity` defaulted to `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new stack with the given capacity.\n   *\n   * @param capacity - the stack's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new stack. Initial capacity is the number of items given.\n   *\n   * @param items - the values to store in the stack.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    super();\n\n    // Initialize class variables\n    this._capacity = Infinity;\n    this.root = { value: undefined } as Node<T>;\n    this.root.next = this.root;\n    this.root.prev = this.root;\n    this._size = 0;\n\n    // Case 1: capacity is null, undefined or Infinity\n    capacity = capacity ?? Infinity;\n    if (isInfinity(capacity)) {\n      return;\n    }\n\n    // Case 2: capacity is zero or a positive safe integer\n    if (isNumber(capacity)) {\n      if (!isSafeCount(capacity)) {\n        throw new RangeError(\"Invalid capacity\");\n      }\n      this._capacity = capacity;\n      return;\n    }\n\n    // Case 3: capacity is iterable\n    let tail = this.root;\n    for (const value of capacity as Iterable<T>) {\n      tail.next = { prev: tail, value } as Node<T>;\n      tail = tail.next;\n      ++this._size;\n    }\n    tail.next = this.root;\n    this.root.prev = tail;\n    this._capacity = this._size;\n  }\n\n  /**\n   * @returns the maximum number of elements that can be stored.\n   */\n  get capacity(): number {\n    return this._capacity;\n  }\n\n  /**\n   *  @returns the number of elements in the collection.\n   */\n  get size(): number {\n    return this._size;\n  }\n\n  /**\n   * Return the type of the object.\n   */\n  get [Symbol.toStringTag](): string {\n    return CircularLinkedStack.name;\n  }\n\n  /**\n   * Sets the maximum number of elements that can be stored.\n   */\n  set capacity(capacity: number) {\n    // Convert input to a number\n    capacity = +capacity;\n\n    // If input is NaN, below zero, or a non-integer\n    if (!isInfinity(capacity) && !isSafeCount(capacity)) {\n      throw new RangeError(\"Invalid capacity\");\n    }\n\n    // If current size fits within new capacity\n    if (this._size <= capacity) {\n      this._capacity = capacity;\n      return;\n    }\n\n    // Shrink stack\n    const items: T[] = [];\n    let head = this.root.next;\n    do {\n      items.push(head.value);\n      head = head.next;\n    } while (--this._size > capacity);\n    this.root.next = head;\n    head.prev = this.root;\n\n    // Update capacity\n    this._capacity = capacity;\n\n    // Emit discarded items\n    this.emitter.emit(BoundedEvent.Overflow, items);\n  }\n\n  /**\n   * Remove all elements and resets the collection.\n   */\n  clear(): void {\n    this._size = 0;\n    this.root = { value: undefined } as Node<T>;\n    this.root.next = this.root;\n    this.root.prev = this.root;\n  }\n\n  /**\n   * Iterate through the collection's entries.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @returns an iterable of [key, value] pairs for every entry.\n   */\n  *entries(): IterableIterator<[number, T]> {\n    let node = this.root;\n    for (let i = 0; i < this._size; ++i) {\n      node = node.next;\n      yield [i, node.value];\n    }\n  }\n\n  /**\n   * Performs the specified action for each element in the collection.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @param callbackfn - A function that accepts up to three arguments. It is called once per element.\n   * @param thisArg - An object to which the `this` keyword refers to in the `callbackfn` function. If omitted, `undefined` is used.\n   */\n  forEach(\n    callbackfn: (value: T, index: number, collection: this) => void,\n    thisArg?: unknown\n  ): void {\n    let node = this.root;\n    for (let i = 0; i < this._size; ++i) {\n      node = node.next;\n      callbackfn.call(thisArg, node.value, i, this);\n    }\n  }\n\n  /**\n   * Determines whether a given element is in the collection.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @param value - The element to search for\n   *\n   * @returns a boolean indicating if `value` was found or not\n   */\n  has(value: T): boolean {\n    let node = this.root;\n    for (let i = 0; i < this._size; ++i) {\n      node = node.next;\n      if (node.value === value) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Iterate through the collection's keys.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @returns an iterable of keys.\n   */\n  *keys(): IterableIterator<number> {\n    for (let i = 0; i < this._size; ++i) {\n      yield i;\n    }\n  }\n\n  /**\n   * Get the last element pushed onto the stack.\n   *\n   * Alias for {@link top | top()}.\n   *\n   * @returns the last element, or `undefined` if empty.\n   */\n  last(): T | undefined {\n    return this.root.prev.value;\n  }\n\n  /**\n   * Removes the top element from the stack and returns it.\n   *\n   * @returns the top element, or `undefined` if empty.\n   */\n  pop(): T | undefined {\n    if (this._size < 1) {\n      return undefined;\n    }\n    const node = this.root.prev;\n    this.root.prev = node.prev;\n    node.prev.next = this.root;\n    --this._size;\n    return node.value;\n  }\n\n  /**\n   * Inserts new elements at the end of the stack.\n   *\n   * @param elems - Elements to insert.\n   *\n   * @returns The overwritten elements, if any.\n   */\n  push(...elems: T[]): number {\n    const capacity = this._capacity;\n    if (capacity < 1) {\n      return this._size;\n    }\n\n    const N = elems.length;\n    const root = this.root;\n    const evicted: T[] = [];\n\n    let tail = root.prev;\n    for (let i = 0; i < N; ++i) {\n      tail.next = { next: root, prev: tail, value: elems[i] };\n      tail = tail.next;\n      if (this._size < capacity) {\n        ++this._size;\n      } else {\n        evicted.push(root.next.value);\n        root.next = root.next.next;\n      }\n    }\n    root.prev = tail;\n    root.next.prev = root;\n\n    // Emit evicted items\n    if (evicted.length > 0) {\n      this.emitter.emit(BoundedEvent.Overflow, evicted);\n    }\n\n    return this._size;\n  }\n\n  /**\n   * Iterate through the collection's values.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @returns an iterable of values.\n   */\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.values();\n  }\n\n  /**\n   * Get the last element pushed onto the stack.\n   *\n   * Alias for {@link top | top()}.\n   *\n   * @returns the last element, or `undefined` if empty.\n   */\n  top(): T | undefined {\n    return this.root.prev.value;\n  }\n\n  /**\n   * Iterate through the collection's values.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @returns an iterable of values.\n   */\n  *values(): IterableIterator<T> {\n    let node = this.root;\n    for (let i = 0; i < this._size; ++i) {\n      node = node.next;\n      yield node.value;\n    }\n  }\n}\n","import { Bounded } from \"../types/bounded\";\nimport { BoundedEvent } from \"../types/boundedEvent\";\nimport { Collection } from \"../types/collection\";\nimport { isInfinity, isNumber, isSafeCount } from \"../utils/is\";\n\nimport { CircularBase } from \"./circularBase\";\n\n/**\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularMap<K, V>\n  extends CircularBase<[K, V]>\n  implements Bounded<[K, V]>, Map<K, V>, Collection<K, V>\n{\n  /**\n   * The maximum number of elements that can be stored in the collection.\n   */\n  protected _capacity: number;\n\n  /**\n   * The internal map.\n   * @internal\n   */\n  protected map: Map<K, V>;\n\n  /**\n   * Creates a new map with `capacity` defaulted to `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new map with the given capacity.\n   *\n   * @param capacity - the map's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new map. Initial capacity is the number of unique items given.\n   *\n   * @param items - the values to store in the map.\n   */\n  constructor(items: Iterable<[K, V]>);\n  constructor(capacity?: number | null | Iterable<[K, V]>) {\n    super();\n\n    // Initialize class variables\n    this._capacity = Infinity;\n    this.map = new Map();\n\n    // Case 1: capacity is null, undefined or Infinity\n    capacity = capacity ?? Infinity;\n    if (isInfinity(capacity)) {\n      return;\n    }\n\n    // Case 2: capacity is zero or a safe positive integer\n    if (isNumber(capacity)) {\n      if (!isSafeCount(capacity)) {\n        throw new RangeError(\"Invalid capacity\");\n      }\n      this._capacity = capacity;\n      return;\n    }\n\n    // Case 3: capacity is iterable\n    for (const [key, value] of capacity as Iterable<[K, V]>) {\n      this.map.set(key, value);\n    }\n    this._capacity = this.map.size;\n  }\n\n  /**\n   * @returns the maximum number of elements that can be stored.\n   */\n  get capacity(): number {\n    return this._capacity;\n  }\n\n  /**\n   *  @returns the number of values in the map.\n   */\n  get size(): number {\n    return this.map.size;\n  }\n\n  /**\n   * Return the type of the object.\n   */\n  get [Symbol.toStringTag](): string {\n    return CircularMap.name;\n  }\n\n  /**\n   * The maximum number of elements that can be stored in the map.\n   */\n  set capacity(capacity: number) {\n    // Convert input to a number\n    capacity = +capacity;\n\n    // Check if input is valid\n    if (!isInfinity(capacity) && !isSafeCount(capacity)) {\n      throw new RangeError(\"Invalid capacity\");\n    }\n\n    // Check if capacity is changing\n    if (capacity === this._capacity) {\n      return;\n    }\n\n    // Update capacity\n    this._capacity = capacity;\n\n    // Check if size is within capacity\n    if (this.size <= capacity) {\n      return;\n    }\n\n    // Check if new capacity is zero\n    if (capacity === 0) {\n      const evicted = Array.from(this.map);\n      this.clear();\n      this.emitter.emit(BoundedEvent.Overflow, evicted);\n      return;\n    }\n\n    // Shrink down map.\n    const evicted: [K, V][] = [];\n    const iter = this.map.entries();\n    for (let n = this.size - capacity; n > 0; --n) {\n      const entry = iter.next().value;\n      this.map.delete(entry[0]);\n      evicted.push(entry);\n    }\n    this.emitter.emit(BoundedEvent.Overflow, evicted);\n  }\n\n  /**\n   * Removes all elements from the map.\n   */\n  clear(): void {\n    this.map.clear();\n  }\n\n  /**\n   * Deletes a specified value from the map.\n   *\n   * @returns `true` if the value existed in the map and has been removed, or `false` otherwise.\n   */\n  delete(key: K): boolean {\n    return this.map.delete(key);\n  }\n\n  /**\n   * Iterate through the map's entries.\n   *\n   * **Note:** Modifying the map during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of [key, value] pairs for every entry.\n   */\n  entries(): IterableIterator<[K, V]> {\n    return this.map.entries();\n  }\n\n  /**\n   * Performs the specified action for each value in the map.\n   *\n   * **Note:** Modifying the map during iteration may cause unexpected behavior.\n   *\n   * @param callbackfn - A function that accepts up to three arguments. It is called once per value.\n   * @param thisArg - An object to which the `this` keyword refers to in the `callbackfn` function. Defaults to `undefined`.\n   */\n  forEach(\n    callbackfn: (value: V, key: K, map: this) => void,\n    thisArg?: unknown\n  ): void {\n    for (const [key, value] of this.map.entries()) {\n      callbackfn.call(thisArg, value, key, this);\n    }\n  }\n\n  /**\n   * Returns the associated value of the given key from the map.\n   *\n   * If the associated value is an object, then you will get a reference to that object; any change made to the object will effectively modify it inside the map.\n   *\n   * @returns the value associated with the specified key, or `undefined` if no value is associated.\n   */\n  get(key: K): V | undefined {\n    return this.map.get(key);\n  }\n\n  /**\n   * Determines whether a given value is in the map.\n   *\n   * @param key - The key to search for.\n   *\n   * @returns `true` if the value was found, `false` otherwise.\n   */\n  has(key: K): boolean {\n    return this.map.has(key);\n  }\n\n  /**\n   * Iterate through the map's keys.\n   *\n   * **Note:** Modifying the map during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of the map's keys.\n   */\n  keys(): IterableIterator<K> {\n    return this.map.keys();\n  }\n\n  /**\n   * Sets the specified key-value pair in the map.\n   *\n   * @param key - the key to add\n   * @param value - the key's value.\n   */\n  set(key: K, value: V): this {\n    // Base case: map has no capacity.\n    if (this.capacity < 1) {\n      this.emitter.emit(BoundedEvent.Overflow, [[key, value]]);\n      return this;\n    }\n\n    // Evict excess items\n    const evicted: [K, V][] = [];\n    if (!this.map.delete(key) && this.size >= this.capacity) {\n      const entry = this.map.entries().next().value;\n      this.map.delete(entry[0]);\n      evicted.push(entry);\n    }\n\n    // Add value\n    this.map.set(key, value);\n\n    // Emit evicted\n    if (evicted.length > 0) {\n      this.emitter.emit(BoundedEvent.Overflow, evicted);\n    }\n\n    return this;\n  }\n\n  /**\n   * Iterate through the map's values.\n   *\n   * **Note:** Modifying the map during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of values.\n   */\n  [Symbol.iterator](): IterableIterator<[K, V]> {\n    return this.map.entries();\n  }\n\n  /**\n   * Iterate through the map's values.\n   *\n   * **Note:** Modifying the map during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of the map's values.\n   */\n  values(): IterableIterator<V> {\n    return this.map.values();\n  }\n}\n","import { CircularBase } from \"./circularBase\";\nimport { BoundedEvent } from \"../types/boundedEvent\";\nimport { Queue } from \"../types/queue\";\nimport { isArrayLength, isInfinity, isNumber } from \"../utils/is\";\nimport { Bounded } from \"../types/bounded\";\nimport { ARRAY_MAX_LENGTH } from \"../utils/constants\";\n\n/**\n * A circular queue is similar to a traditional queue, but uses a fixed-size,\n * circular buffer. When the queue reaches its maximum capacity and a new\n * element is added, the oldest is discarded, thus maintaining its size.\n *\n * This structure efficiently utilizes memory for applications where only the\n * most recent additions are of interest and older data can be discarded.\n *\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularQueue<T>\n  extends CircularBase<T>\n  implements Bounded<T>, Queue<T>\n{\n  /**\n   * The maximum number of elements that can be stored in the collection.\n   */\n  protected _capacity: number;\n\n  /**\n   * The index representing the first element.\n   * @internal\n   */\n  protected head: number;\n\n  /**\n   * Whether capacity is finite (true) or infinite (false).\n   */\n  protected isFinite: boolean;\n\n  /**\n   * The index one more than the last element.\n   * @internal\n   */\n  protected next: number;\n\n  /**\n   * The number of elements.\n   * @internal\n   */\n  protected _size: number;\n\n  /**\n   * The stored values.\n   * @internal\n   */\n  protected vals: T[];\n\n  /**\n   * Creates a new queue. Default `capacity` is `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new queue with the given capacity.\n   *\n   * @param capacity - the queue's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new queue from the given items. `capacity` will equal the number of items.\n   *\n   * @param items - the initial values in the queue.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    super();\n\n    // Initialize class variables\n    this._capacity = ARRAY_MAX_LENGTH;\n    this.head = 0;\n    this.isFinite = false;\n    this._size = 0;\n    this.next = 0;\n    this.vals = [];\n\n    // If capacity is null, undefined, or Infinity\n    capacity = capacity ?? Infinity;\n    if (isInfinity(capacity)) {\n      return;\n    }\n\n    // If capacity is a number\n    if (isNumber(capacity)) {\n      // If capacity is invalid\n      if (!isArrayLength(capacity)) {\n        throw new RangeError(\"Invalid capacity\");\n      }\n      // If capacity is valid\n      this._capacity = capacity;\n      this.isFinite = true;\n      return;\n    }\n\n    // If capacity is an iterable\n    for (const value of capacity as Iterable<T>) {\n      this.vals.push(value);\n    }\n    this._capacity = this.vals.length;\n    this.isFinite = true;\n    this._size = this._capacity;\n  }\n\n  /**\n   * @returns the maximum number of elements that can be stored.\n   */\n  get capacity(): number {\n    return this.isFinite ? this._capacity : Infinity;\n  }\n\n  /**\n   *  @returns the number of elements in the collection.\n   */\n  get size(): number {\n    return this._size;\n  }\n\n  /**\n   * Return the type of the object.\n   */\n  get [Symbol.toStringTag](): string {\n    return CircularQueue.name;\n  }\n\n  /**\n   * Sets the maximum number of elements that can be stored.\n   */\n  set capacity(capacity: number) {\n    // Convert capacity to a number\n    capacity = +capacity;\n\n    // Check capacity\n    if (isInfinity(capacity)) {\n      // If capacity is Infinity\n      capacity = ARRAY_MAX_LENGTH;\n      this.isFinite = false;\n    } else if (isArrayLength(capacity)) {\n      // If capacity is valid\n      this.isFinite = true;\n    } else {\n      // If capacity is invalid\n      throw new RangeError(\"Invalid capacity\");\n    }\n\n    // Update collection\n    if (this._size < 1) {\n      // If collection is empty\n      this._capacity = capacity;\n      this.clear();\n    } else if (capacity < this._capacity) {\n      // If capacity is decreasing\n      this.shrink(capacity);\n    } else if (capacity > this._capacity) {\n      // If capacity is increasing\n      this.grow(capacity);\n    }\n  }\n\n  /**\n   * Remove all elements and resets the collection.\n   */\n  clear(): void {\n    this.head = 0;\n    this._size = 0;\n    this.next = 0;\n    this.vals.length = 0;\n  }\n\n  /**\n   * Iterate through the collection's entries.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @returns an iterable of [key, value] pairs for every entry.\n   */\n  *entries(): IterableIterator<[number, T]> {\n    for (let ext = 0; ext < this._size; ++ext) {\n      yield [ext, this.vals[(this.head + ext) % this._capacity]];\n    }\n  }\n\n  /**\n   * Get the first element in the queue.\n   *\n   * Alias for {@link front | front()}.\n   *\n   * @returns the first element, or `undefined` if empty.\n   */\n  first(): T | undefined {\n    return this.vals[this.head];\n  }\n\n  /**\n   * Performs the specified action for each element in the collection.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @param callbackfn - A function that accepts up to three arguments. It is called once per element.\n   * @param thisArg - An object to which the `this` keyword refers to in the `callbackfn` function. If omitted, `undefined` is used.\n   */\n  forEach(\n    callbackfn: (value: T, index: number, collection: this) => void,\n    thisArg?: unknown\n  ): void {\n    const N = this._size;\n    for (let ext = 0; ext < N && ext < this._size; ++ext) {\n      const value = this.vals[(this.head + ext) % this._capacity];\n      callbackfn.call(thisArg, value, ext, this);\n    }\n  }\n\n  /**\n   * Get the element at the front of the queue.\n   *\n   * Alias for {@link first | first()}.\n   *\n   * @returns the front element, or `undefined` if empty.\n   */\n  front(): T | undefined {\n    return this.vals[this.head];\n  }\n\n  /**\n   * Determines whether a given element is in the collection.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @param value - The element to search for\n   *\n   * @returns a boolean indicating if `value` was found or not\n   */\n  has(value: T): boolean {\n    const N = this._size;\n    for (let ext = 0; ext < N; ++ext) {\n      if (value === this.vals[(this.head + ext) % this._capacity]) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Iterate through the collection's keys.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @returns an iterable of keys.\n   */\n  *keys(): IterableIterator<number> {\n    for (let ext = 0; ext < this._size; ++ext) {\n      yield ext;\n    }\n  }\n\n  /**\n   * Inserts new elements at the end of the queue.\n   *\n   * @param elems - Elements to insert.\n   *\n   * @returns The new size of the queue.\n   */\n  push(...elems: T[]): number {\n    // Case 1: Zero inputs\n    const N = elems.length;\n    if (N < 1) {\n      return this._size;\n    }\n\n    // Case 2: Zero capacity\n    const capacity = this._capacity;\n    if (capacity < 1) {\n      this.emit(elems);\n      return this._size;\n    }\n\n    // Case 3: Enough free space\n    const free = capacity - this._size;\n    if (free >= N) {\n      this._push(elems, N);\n      return this._size;\n    }\n\n    // Case 4: \"Infinite\" capacity but out of space\n    if (!this.isFinite) {\n      this._push(elems, free);\n      throw new Error(\"Out of memory\");\n    }\n\n    // Remove old values\n    const diff = N - capacity;\n    this.evict(this.size + diff);\n    if (diff > 0) {\n      this.emit(elems.splice(0, diff));\n    }\n\n    // Add new values\n    else if (diff < 0) {\n      this._push(elems, N);\n      return this._size;\n    }\n    this.vals = elems;\n    this._size = capacity;\n    return this._size;\n  }\n\n  /**\n   * Removes the element at the front of the queue.\n   *\n   * @returns the front element, or `undefined` if empty.\n   */\n  shift(): T | undefined {\n    if (this._size <= 0) {\n      return undefined;\n    }\n\n    --this._size;\n    const value = this.vals[this.head];\n    this.vals[this.head] = undefined as T;\n    if (++this.head >= this._capacity) {\n      this.head = 0;\n      this.vals.length = this.next;\n    }\n    return value;\n  }\n\n  /**\n   * Iterate through the collection's values.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @returns an iterable of values.\n   */\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.values();\n  }\n\n  /**\n   * Iterate through the collection's values.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @returns an iterable of values.\n   */\n  *values(): IterableIterator<T> {\n    for (let ext = 0; ext < this._size; ++ext) {\n      yield this.vals[(this.head + ext) % this._capacity];\n    }\n  }\n\n  /**\n   * Emit an event containing the items evicted from the collection.\n   *\n   * @param evicted - The items evicted from the collection.\n   */\n  protected emit(evicted: T[]): void {\n    this.emitter.emit(BoundedEvent.Overflow, evicted);\n  }\n\n  /**\n   * Removes a given number of elements from the queue.\n   * If elements are removed, the {@link BoundedEvent.Overflow} event\n   * is emitted one or more times.\n   *\n   * @param count - The number of elements to evict.\n   */\n  protected evict(count: number): void {\n    if (count <= 0) {\n      return;\n    }\n\n    const len = this._capacity - this.head;\n    const isNonsequential = !this.isSequential();\n\n    if (isNonsequential && len > count) {\n      this.emit(this.vals.slice(this.head, this.head + count));\n      this.vals.fill(undefined as T, this.head, this.head + count);\n      this.head += count;\n      this._size -= count;\n      return;\n    }\n\n    if (isNonsequential) {\n      this.emit(this.vals.slice(this.head, this.head + len));\n      this.vals.length = this.next;\n      this.head = 0;\n      this._size -= len;\n      if (count <= len) {\n        return;\n      }\n      count -= len;\n    }\n\n    if (count >= this._size) {\n      this.emit(this.vals.slice(this.head, this.head + this._size));\n      this.clear();\n      return;\n    }\n\n    this.emit(this.vals.slice(this.head, this.head + count));\n    this.vals.fill(undefined as T, this.head, this.head + count);\n    this.head += count;\n    this._size -= count;\n  }\n\n  /**\n   * Grow capacity.\n   * @internal\n   *\n   * @param capacity - the new capacity\n   */\n  protected grow(capacity: number): void {\n    // Check if queue is sequential: [    H123456T    ]\n    if (this.isSequential()) {\n      this.sequentialReset(capacity);\n      return;\n    }\n\n    // Queue is not sequential: [456T    H123]\n\n    if (this._size <= this.head) {\n      // [H123456T] = A + B = N\n      const temp = this._size - this.next;\n      this.vals.copyWithin(temp, 0, this.next);\n      this.vals.copyWithin(0, this.head, this.head + temp);\n      this.vals.length = this._size;\n      this.head = 0;\n      this.next = this._size;\n    } else if (this.head + this._size <= capacity) {\n      // [        H123456T] = 2B < 2N\n      this.vals.length = this.head + this._size;\n      this.vals.copyWithin(this._capacity, 0, this.next);\n      this.vals.fill(undefined as T, 0, this.next);\n      this.next = (this.head + this._size) % capacity;\n    } /* else if (this.next + this._size <= capacity) {\n      // [    H123456T] = A + 2B = N + B < 2N\n      const temp = this._capacity - this.head;\n      this.vals.length = capacity;\n      this.vals.copyWithin(this.next, this.head, this._capacity);\n      this.vals.copyWithin(this.next + temp, 0, this.next);\n      this.vals.fill(undefined as T, 0, this.next);\n      this.vals.length = this.next + this._size;\n      this.head = this.next;\n      this.next = (this.head + this._size) % capacity;\n    } */ else {\n      // [6T      H12345] = B + D < 2B < 2N\n      const diff = capacity - this._capacity;\n      this.vals.length = capacity;\n      this.vals.copyWithin(this._capacity, 0, diff);\n      this.vals.copyWithin(0, diff, this.next);\n      const temp = Math.max(diff, this.next - diff);\n      this.vals.fill(undefined as T, temp, this.next);\n      this.next -= diff;\n    }\n\n    // Update capacity\n    this._capacity = capacity;\n  }\n\n  /**\n   * Returns whether the queue is stored sequentially in memory.\n   *\n   * @returns `true` if the queue is sequential in memory, `false` otherwise.\n   */\n  protected isSequential(): boolean {\n    return this.head < this.next || this.next < 1;\n  }\n\n  /**\n   * Append new elements to the collection.\n   *\n   * @param elems - The elements to append.\n   * @param max - The number of elements to append.\n   */\n  protected _push(elems: T[], max: number): void {\n    const capacity = this._capacity;\n    const vals = this.vals;\n\n    let tail = this.next;\n    for (let i = 0; i < max; ++i) {\n      vals[tail] = elems[i];\n      if (++tail >= capacity) {\n        tail = 0;\n      }\n    }\n\n    this.next = tail;\n    this._size += max;\n  }\n\n  /**\n   * Adjusts the queue to fit within the given capacity.\n   *\n   * Assumes the queue is A) sequential in memory and B) size \\<= capacity.\n   *\n   * @param capacity - The new capacity.\n   *\n   * @returns `true` if the queue was reset, `false` otherwise.\n   */\n  protected sequentialReset(capacity: number): boolean {\n    const tail = this.head + this._size;\n\n    // If queue fits in current location: [    H------T    ]\n    if (tail <= capacity) {\n      this.vals.length = tail;\n      this.next = this.vals.length % capacity;\n\n      // If queue must be fully moved: [H------T    ]\n    } else if (this.head >= capacity) {\n      this.vals.copyWithin(0, this.head, tail);\n      this.vals.length = this._size;\n      this.head = 0;\n      this.next = this._size % capacity;\n\n      // If queue must be partially moved: [--T  H----]\n    } else {\n      this.vals.copyWithin(0, capacity, tail);\n      this.vals.length = capacity;\n      this.next = tail - capacity;\n    }\n\n    this._capacity = capacity;\n    return true;\n  }\n\n  /**\n   * Shrink capacity.\n   * @internal\n   *\n   * @param capacity - the new capacity\n   */\n  protected shrink(capacity: number): void {\n    // Handle overflow\n    this.evict(this._size - capacity);\n\n    // Check if queue is sequential: [    H123456T    ]\n    if (this.isSequential()) {\n      this.sequentialReset(capacity);\n      return;\n    }\n\n    // Shift 1st half of queue: [456T....H123] -> [456T..H123]\n    const diff = this._capacity - capacity;\n    this.vals.copyWithin(this.head - diff, this.head, this._capacity);\n    this.vals.length = capacity;\n    this.head -= diff;\n    this._capacity = capacity;\n  }\n}\n","import { Bounded } from \"../types/bounded\";\nimport { BoundedEvent } from \"../types/boundedEvent\";\nimport { Collection } from \"../types/collection\";\nimport { isInfinity, isNumber, isSafeCount } from \"../utils/is\";\n\nimport { CircularBase } from \"./circularBase\";\n\n/**\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularSet<T>\n  extends CircularBase<T>\n  implements Bounded<T>, Set<T>, Collection<T, T>\n{\n  /**\n   * The maximum number of elements that can be stored in the collection.\n   */\n  protected _capacity: number;\n\n  /**\n   * The internal set.\n   * @internal\n   */\n  protected set: Set<T>;\n\n  /**\n   * Creates a new set with `capacity` defaulted to `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new set with the given capacity.\n   *\n   * @param capacity - the set's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new set. Initial capacity is the number of unique items given.\n   *\n   * @param items - the values to store in the set.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    super();\n\n    // Initialize class variables\n    this._capacity = Infinity;\n    this.set = new Set();\n\n    // Case 1: capacity is null, undefined or Infinity\n    capacity = capacity ?? Infinity;\n    if (isInfinity(capacity)) {\n      return;\n    }\n\n    // Case 2: capacity is zero or a safe positive integer\n    if (isNumber(capacity)) {\n      if (!isSafeCount(capacity)) {\n        throw new RangeError(\"Invalid capacity\");\n      }\n      this._capacity = capacity;\n      return;\n    }\n\n    // Case 3: capacity is iterable\n    for (const value of capacity as Iterable<T>) {\n      this.set.add(value);\n    }\n    this._capacity = this.set.size;\n  }\n\n  /**\n   * @returns the maximum number of elements that can be stored.\n   */\n  get capacity(): number {\n    return this._capacity;\n  }\n\n  /**\n   *  @returns the number of values in the set.\n   */\n  get size(): number {\n    return this.set.size;\n  }\n\n  /**\n   * Return the type of the object.\n   */\n  get [Symbol.toStringTag](): string {\n    return CircularSet.name;\n  }\n\n  /**\n   * The maximum number of elements that can be stored in the set.\n   */\n  set capacity(capacity: number) {\n    // Convert input to a number\n    capacity = +capacity;\n\n    // Check if input is valid\n    if (!isInfinity(capacity) && !isSafeCount(capacity)) {\n      throw new RangeError(\"Invalid capacity\");\n    }\n\n    // Check if capacity is changing\n    if (capacity === this._capacity) {\n      return;\n    }\n\n    // Update capacity\n    this._capacity = capacity;\n\n    // Check if set is within capacity\n    if (this.size <= capacity) {\n      return;\n    }\n\n    // Check if new capacity is zero\n    if (capacity === 0) {\n      const evicted = Array.from(this.set);\n      this.clear();\n      this.emitter.emit(BoundedEvent.Overflow, evicted);\n      return;\n    }\n\n    // Shrink down map.\n    const evicted: T[] = [];\n    const iter = this.set.values();\n    for (let n = this.size - capacity; n > 0; --n) {\n      const value = iter.next().value;\n      this.set.delete(value);\n      evicted.push(value);\n    }\n    this.emitter.emit(BoundedEvent.Overflow, evicted);\n  }\n\n  /**\n   * Adds the specified value to the set.\n   *\n   * @param value - the value to add.\n   */\n  add(value: T): this {\n    // Base case: set has no capacity.\n    if (this.capacity < 1) {\n      this.emitter.emit(BoundedEvent.Overflow, [value]);\n      return this;\n    }\n\n    // Evict excess items\n    const evicted: T[] = [];\n    if (!this.set.delete(value) && this.size >= this.capacity) {\n      const out = this.set.values().next().value;\n      this.set.delete(out);\n      evicted.push(out);\n    }\n\n    // Add value\n    this.set.add(value);\n\n    // Emit evicted\n    if (evicted.length > 0) {\n      this.emitter.emit(BoundedEvent.Overflow, evicted);\n    }\n\n    return this;\n  }\n\n  /**\n   * Removes all elements from the set.\n   */\n  clear(): void {\n    this.set.clear();\n  }\n\n  /**\n   * Deletes a specified value from the set.\n   *\n   * @returns `true` if the value existed in the set and has been removed, or `false` otherwise.\n   */\n  delete(value: T): boolean {\n    return this.set.delete(value);\n  }\n\n  /**\n   * Iterate through the set's entries.\n   *\n   * **Note:** Modifying the set during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of [key, value] pairs for every entry.\n   */\n  entries(): IterableIterator<[T, T]> {\n    return this.set.entries();\n  }\n\n  /**\n   * Performs the specified action for each value in the set.\n   *\n   * **Note:** Modifying the set during iteration may cause unexpected behavior.\n   *\n   * @param callbackfn - A function that accepts up to three arguments. It is called once per value.\n   * @param thisArg - An object to which the `this` keyword refers to in the `callbackfn` function. Defaults to `undefined`.\n   */\n  forEach(\n    callbackfn: (value: T, key: T, set: this) => void,\n    thisArg?: unknown\n  ): void {\n    for (const key of this.set.keys()) {\n      callbackfn.call(thisArg, key, key, this);\n    }\n  }\n\n  /**\n   * Determines whether a given value is in the set.\n   *\n   * @param value - The value to search for.\n   *\n   * @returns `true` if the value was found, `false` otherwise.\n   */\n  has(value: T): boolean {\n    return this.set.has(value);\n  }\n\n  /**\n   * Iterate through the set's keys.\n   *\n   * **Note:** Modifying the set during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of the set's keys.\n   */\n  keys(): IterableIterator<T> {\n    return this.set.keys();\n  }\n\n  /**\n   * Iterate through the set's values.\n   *\n   * **Note:** Modifying the set during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of the set's values.\n   */\n  values(): IterableIterator<T> {\n    return this.set.keys();\n  }\n\n  /**\n   * Iterate through the set's values.\n   *\n   * **Note:** Modifying the set during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of values.\n   */\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.set.values();\n  }\n}\n","import { CircularBase } from \"./circularBase\";\nimport { BoundedEvent } from \"../types/boundedEvent\";\nimport { Stack } from \"../types/stack\";\nimport { isArrayLength, isInfinity, isNumber } from \"../utils/is\";\nimport { Bounded } from \"../types/bounded\";\nimport { ARRAY_MAX_LENGTH } from \"../utils/constants\";\n\n/**\n * A circular stack is similar to a traditional stack, but uses a fixed-size,\n * circular buffer. When the stack reaches its maximum capacity and a new\n * element is added, the oldest is discarded, thus maintaining its size.\n *\n * This structure efficiently utilizes memory for applications where only the\n * most recent additions are of interest and older data can be discarded.\n *\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularStack<T>\n  extends CircularBase<T>\n  implements Bounded<T>, Stack<T>\n{\n  /**\n   * The maximum number of elements that can be stored in the collection.\n   */\n  protected _capacity: number;\n\n  /**\n   * The index representing the first element.\n   * @internal\n   */\n  protected head: number;\n\n  /**\n   * Whether capacity is finite (true) or infinite (false).\n   */\n  protected isFinite: boolean;\n\n  /**\n   * The index one more than the last element.\n   * @internal\n   */\n  protected next: number;\n\n  /**\n   * The number of elements.\n   * @internal\n   */\n  protected _size: number;\n\n  /**\n   * The stored values.\n   * @internal\n   */\n  protected vals: T[];\n\n  /**\n   * Creates a new stack. Default `capacity` is `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new stack with the given capacity.\n   *\n   * @param capacity - the stack's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new stack from the given items. `capacity` will equal the number of items.\n   *\n   * @param items - the initial values in the stack.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    super();\n\n    // Initialize class variables\n    this._capacity = ARRAY_MAX_LENGTH;\n    this.head = 0;\n    this.isFinite = false;\n    this._size = 0;\n    this.next = 0;\n    this.vals = [];\n\n    // If capacity is null, undefined, or Infinity\n    capacity = capacity ?? Infinity;\n    if (isInfinity(capacity)) {\n      return;\n    }\n\n    // If capacity is a number\n    if (isNumber(capacity)) {\n      // If capacity is invalid\n      if (!isArrayLength(capacity)) {\n        throw new RangeError(\"Invalid capacity\");\n      }\n      // If capacity is valid\n      this._capacity = capacity;\n      this.isFinite = true;\n      return;\n    }\n\n    // If capacity is an iterable\n    for (const value of capacity as Iterable<T>) {\n      this.vals.push(value);\n    }\n    this._capacity = this.vals.length;\n    this.isFinite = true;\n    this._size = this._capacity;\n  }\n\n  /**\n   * @returns the maximum number of elements that can be stored.\n   */\n  get capacity(): number {\n    return this.isFinite ? this._capacity : Infinity;\n  }\n\n  /**\n   *  @returns the number of elements in the collection.\n   */\n  get size(): number {\n    return this._size;\n  }\n\n  /**\n   * Return the type of the object.\n   */\n  get [Symbol.toStringTag](): string {\n    return CircularStack.name;\n  }\n\n  /**\n   * Sets the maximum number of elements that can be stored.\n   */\n  set capacity(capacity: number) {\n    // Convert capacity to a number\n    capacity = +capacity;\n\n    // Check capacity\n    if (isInfinity(capacity)) {\n      // If capacity is Infinity\n      capacity = ARRAY_MAX_LENGTH;\n      this.isFinite = false;\n    } else if (isArrayLength(capacity)) {\n      // If capacity is valid\n      this.isFinite = true;\n    } else {\n      // If capacity is invalid\n      throw new RangeError(\"Invalid capacity\");\n    }\n\n    // Update collection\n    if (this._size < 1) {\n      // If collection is empty\n      this._capacity = capacity;\n      this.clear();\n    } else if (capacity < this._capacity) {\n      // If capacity is decreasing\n      this.shrink(capacity);\n    } else if (capacity > this._capacity) {\n      // If capacity is increasing\n      this.grow(capacity);\n    }\n  }\n\n  /**\n   * Remove all elements from the collection.\n   */\n  clear(): void {\n    this.head = 0;\n    this._size = 0;\n    this.next = 0;\n    this.vals.length = 0;\n  }\n\n  /**\n   * Iterate through the collection's entries.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @returns an iterable of [key, value] pairs for every entry.\n   */\n  *entries(): IterableIterator<[number, T]> {\n    for (let ext = 0; ext < this._size; ++ext) {\n      yield [ext, this.vals[(this.head + ext) % this._capacity]];\n    }\n  }\n\n  /**\n   * Performs the specified action for each element in the collection.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @param callbackfn - A function that accepts up to three arguments. It is called once per element.\n   * @param thisArg - An object to which the `this` keyword refers to in the `callbackfn` function. If omitted, `undefined` is used.\n   */\n  forEach(\n    callbackfn: (value: T, index: number, collection: this) => void,\n    thisArg?: unknown\n  ): void {\n    const N = this._size;\n    for (let ext = 0; ext < N && ext < this._size; ++ext) {\n      const value = this.vals[(this.head + ext) % this._capacity];\n      callbackfn.call(thisArg, value, ext, this);\n    }\n  }\n\n  /**\n   * Determines whether a given element is in the collection.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @param value - The element to search for\n   *\n   * @returns a boolean indicating if `value` was found or not\n   */\n  has(value: T): boolean {\n    const N = this._size;\n    for (let ext = 0; ext < N; ++ext) {\n      if (value === this.vals[(this.head + ext) % this._capacity]) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Iterate through the collection's keys.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @returns an iterable of keys.\n   */\n  *keys(): IterableIterator<number> {\n    for (let ext = 0; ext < this._size; ++ext) {\n      yield ext;\n    }\n  }\n\n  /**\n   * Get the last element in the stack.\n   *\n   * Alias for {@link top | top()}.\n   *\n   * @returns the last element, or `undefined` if empty.\n   */\n  last(): T | undefined {\n    return this.top();\n  }\n\n  /**\n   * Removes the element at the top of the stack.\n   *\n   * @returns the top element, or `undefined` if empty.\n   */\n  pop(): T | undefined {\n    if (this._size <= 0) {\n      return undefined;\n    }\n\n    const tail = this.next > 0 ? this.next - 1 : this.head + this._size - 1;\n\n    --this._size;\n    this.next = tail;\n    const value = this.vals[tail];\n    this.vals[tail] = undefined as T;\n    return value;\n  }\n\n  /**\n   * Inserts new elements at the end of the stack.\n   *\n   * @param elems - Elements to insert.\n   *\n   * @returns The new size of the stack.\n   */\n  push(...elems: T[]): number {\n    // Case 1: Zero inputs\n    const N = elems.length;\n    if (N < 1) {\n      return this._size;\n    }\n\n    // Case 2: Zero capacity\n    const capacity = this._capacity;\n    if (capacity < 1) {\n      this.emit(elems);\n      return this._size;\n    }\n\n    // Case 3: Enough free space\n    const free = capacity - this._size;\n    if (free >= N) {\n      this._push(elems, N);\n      return this._size;\n    }\n\n    // Case 4: \"Infinite\" capacity but out of space\n    if (!this.isFinite) {\n      this._push(elems, free);\n      throw new Error(\"Out of memory\");\n    }\n\n    // Remove old values\n    const diff = N - capacity;\n    this.evict(this.size + diff);\n    if (diff > 0) {\n      this.emit(elems.splice(0, diff));\n    }\n\n    // Add new values\n    else if (diff < 0) {\n      this._push(elems, N);\n      return this._size;\n    }\n    this.vals = elems;\n    this._size = capacity;\n    return this._size;\n  }\n\n  /**\n   * Iterate through the collection's values.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @returns an iterable of values.\n   */\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.values();\n  }\n\n  /**\n   * Get the last element in the stack.\n   *\n   * Alias for {@link last | last()}.\n   *\n   * @returns the last element, or `undefined` if empty.\n   */\n  top(): T | undefined {\n    if (this._size < 1) {\n      return undefined;\n    }\n    return this.vals[(this.head + this._size - 1) % this._capacity];\n  }\n\n  /**\n   * Iterate through the collection's values.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @returns an iterable of values.\n   */\n  *values(): IterableIterator<T> {\n    for (let ext = 0; ext < this._size; ++ext) {\n      yield this.vals[(this.head + ext) % this._capacity];\n    }\n  }\n\n  /**\n   * Emit an event containing the items evicted from the collection.\n   *\n   * @param evicted - The items evicted from the collection.\n   */\n  protected emit(evicted: T[]): void {\n    this.emitter.emit(BoundedEvent.Overflow, evicted);\n  }\n\n  /**\n   * Removes a given number of elements from the stack.\n   * If elements are removed, the {@link BoundedEvent.Overflow} event\n   * is emitted one or more times.\n   *\n   * @param count - The number of elements to evict.\n   */\n  protected evict(count: number): void {\n    if (count <= 0) {\n      return;\n    }\n\n    const len = this._capacity - this.head;\n    const isNonsequential = !this.isSequential();\n\n    if (isNonsequential && len > count) {\n      this.emit(this.vals.slice(this.head, this.head + count));\n      this.vals.fill(undefined as T, this.head, this.head + count);\n      this.head += count;\n      this._size -= count;\n      return;\n    }\n\n    if (isNonsequential) {\n      this.emit(this.vals.slice(this.head, this.head + len));\n      this.vals.length = this.next;\n      this.head = 0;\n      this._size -= len;\n      if (count <= len) {\n        return;\n      }\n      count -= len;\n    }\n\n    if (count >= this._size) {\n      this.emit(this.vals.slice(this.head, this.head + this._size));\n      this.clear();\n      return;\n    }\n\n    this.emit(this.vals.slice(this.head, this.head + count));\n    this.vals.fill(undefined as T, this.head, this.head + count);\n    this.head += count;\n    this._size -= count;\n  }\n\n  /**\n   * Grow capacity.\n   * @internal\n   *\n   * @param capacity - the new capacity\n   */\n  protected grow(capacity: number): void {\n    // Check if stack is sequential: [    H123456T    ]\n    if (this.isSequential()) {\n      this.sequentialReset(capacity);\n      return;\n    }\n\n    // stack is not sequential: [456T    H123]\n\n    if (this._size <= this.head) {\n      // [H123456T] = A + B = N\n      const temp = this._size - this.next;\n      this.vals.copyWithin(temp, 0, this.next);\n      this.vals.copyWithin(0, this.head, this.head + temp);\n      this.vals.length = this._size;\n      this.head = 0;\n      this.next = this._size;\n    } else if (this.head + this._size <= capacity) {\n      // [        H123456T] = 2B < 2N\n      this.vals.length = this.head + this._size;\n      this.vals.copyWithin(this._capacity, 0, this.next);\n      this.vals.fill(undefined as T, 0, this.next);\n      this.next = (this.head + this._size) % capacity;\n    } /* else if (this.next + this._size <= capacity) {\n      // [    H123456T] = A + 2B = N + B < 2N\n      const temp = this._capacity - this.head;\n      this.vals.length = capacity;\n      this.vals.copyWithin(this.next, this.head, this._capacity);\n      this.vals.copyWithin(this.next + temp, 0, this.next);\n      this.vals.fill(undefined as T, 0, this.next);\n      this.vals.length = this.next + this._size;\n      this.head = this.next;\n      this.next = (this.head + this._size) % capacity;\n    } */ else {\n      // [6T      H12345] = B + D < 2B < 2N\n      const diff = capacity - this._capacity;\n      this.vals.length = capacity;\n      this.vals.copyWithin(this._capacity, 0, diff);\n      this.vals.copyWithin(0, diff, this.next);\n      const temp = Math.max(diff, this.next - diff);\n      this.vals.fill(undefined as T, temp, this.next);\n      this.next -= diff;\n    }\n\n    // Update capacity\n    this._capacity = capacity;\n  }\n\n  /**\n   * Returns whether the stack is stored sequentially in memory.\n   *\n   * @returns `true` if the stack is sequential in memory, `false` otherwise.\n   */\n  protected isSequential(): boolean {\n    return this.head < this.next || this.next < 1;\n  }\n\n  /**\n   * Append new elements to the collection.\n   *\n   * @param elems - The elements to append.\n   * @param max - The number of elements to append.\n   */\n  protected _push(elems: T[], max: number): void {\n    const capacity = this._capacity;\n    const vals = this.vals;\n\n    let tail = this.next;\n    for (let i = 0; i < max; ++i) {\n      vals[tail] = elems[i];\n      if (++tail >= capacity) {\n        tail = 0;\n      }\n    }\n\n    this.next = tail;\n    this._size += max;\n  }\n\n  /**\n   * Adjusts the stack to fit within the given capacity.\n   *\n   * Assumes the stack is A) sequential in memory and B) size \\<= capacity.\n   *\n   * @param capacity - the new capacity.\n   *\n   * @returns `true` if the stack was reset, `false` otherwise.\n   */\n  protected sequentialReset(capacity: number): boolean {\n    const tail = this.head + this._size;\n\n    // If stack fits in current location: [    H------T    ]\n    if (tail <= capacity) {\n      this.vals.length = tail;\n      this.next = this.vals.length % capacity;\n\n      // If stack must be fully moved: [H------T    ]\n    } else if (this.head >= capacity) {\n      this.vals.copyWithin(0, this.head, tail);\n      this.vals.length = this._size;\n      this.head = 0;\n      this.next = this._size % capacity;\n\n      // If stack must be partially moved: [--T  H----]\n    } else {\n      this.vals.copyWithin(0, capacity, tail);\n      this.vals.length = capacity;\n      this.next = tail - capacity;\n    }\n\n    this._capacity = capacity;\n    return true;\n  }\n\n  /**\n   * Shrink capacity.\n   * @internal\n   *\n   * @param capacity - the new capacity\n   */\n  protected shrink(capacity: number): void {\n    this.evict(this._size - capacity);\n\n    // Check if stack is sequential: [    H123456T    ]\n    if (this.isSequential()) {\n      this.sequentialReset(capacity);\n      return;\n    }\n\n    // Shift 1st half of stack: [456T....H123] -> [456T..H123]\n    const diff = this._capacity - capacity;\n    this.vals.copyWithin(this.head - diff, this.head, this._capacity);\n    this.vals.length = capacity;\n    this.head -= diff;\n    this._capacity = capacity;\n  }\n}\n"],"names":["evicted"],"mappings":"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"}