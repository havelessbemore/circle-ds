{"version":3,"file":"circle-ds.mjs","sources":["../../src/types/boundedEvent.ts","../../__vite-browser-external","../../src/circle/circularBase.ts","../../src/utils/constants.ts","../../src/utils/is.ts","../../src/utils/math.ts","../../src/circle/circularArrayList.ts","../../src/circle/circularDeque.ts","../../src/utils/linkedNode.ts","../../src/utils/doublyLinkedNode.ts","../../src/circle/circularDoublyLinkedList.ts","../../src/circle/circularLinkedDeque.ts","../../src/circle/circularLinkedList.ts","../../src/circle/circularLinkedQueue.ts","../../src/circle/circularLinkedStack.ts","../../src/circle/circularMap.ts","../../src/circle/circularQueue.ts","../../src/circle/circularSet.ts","../../src/circle/circularStack.ts"],"sourcesContent":["/**\n * An enumeration of event types supported by {@link Bounded} collections.\n *\n * This object defines a set of constants representing event names that can\n * be emitted by instances of collections implementing the {@link Bounded} interface.\n * These events signify specific actions or changes in the state of the collection.\n *\n * Defined events include:\n * - `Overflow`: Indicates that the collection has reached its capacity, and\n *   as a result, one or more elements have been removed to accommodate new elements.\n *   This event is triggered during operations that add elements to the collection when\n *   it exceeds its capacity, or when capacity is updated below the collection's current\n *   size. Listeners attached to this event will receive an array of elements that were\n *   removed due to the overflow. Removed elements may be sent across 1 or more event\n *   instances.\n *\n * This object is marked as `const` to ensure that its properties are read-only,\n * preventing modification of event names which could lead to inconsistencies in\n * event handling across the application.\n */\nexport const BoundedEvent = {\n  Overflow: \"overflow\",\n} as const;\n","export default {}","import EventEmitter from \"events\";\nimport { BoundedEvent } from \"../types/boundedEvent\";\nimport { ValueOf } from \"../types/valueOf\";\n\nexport class CircularBase<T> {\n  /**\n   * The event emitter.\n   * @internal\n   */\n  protected emitter: EventEmitter;\n\n  constructor(emitter = new EventEmitter()) {\n    this.emitter = emitter;\n  }\n\n  /**\n   * Appends the listener function to the listeners array for the\n   * {@link BoundedEvent.Overflow} event.\n   *\n   * * No checks are made to see if the listener has already been added.\n   * Multiple calls with the same of event + listener combination will\n   * result in the listener being added and called multiple times.\n   *\n   * * By default, event listeners are invoked in the order they are added.\n   * The `prependListener()` method can be used as an alternative to add\n   * the event listener to the beginning of the listeners array.\n   *\n   * @param event - The name of the event.\n   * @param listener - The callback function. It will\n   * receive an array of elements that have been removed due to overflow.\n   * This can happen when elements are added while the collection is at\n   * capacity, or when capacity is reduced below the current size.\n   *\n   * @returns the collection.\n   */\n  addListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this;\n  addListener(\n    event: ValueOf<typeof BoundedEvent>,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    listener: (...args: any[]) => void\n  ): this {\n    this.emitter.addListener(event, listener);\n    return this;\n  }\n\n  /**\n   * Appends the listener function to the listeners array for the\n   * {@link BoundedEvent.Overflow} event.\n   *\n   * * No checks are made to see if the listener has already been added.\n   * Multiple calls with the same of event + listener combination will\n   * result in the listener being added and called multiple times.\n   *\n   * * By default, event listeners are invoked in the order they are added.\n   * The `prependListener()` method can be used as an alternative to add\n   * the event listener to the beginning of the listeners array.\n   *\n   * @param event - The name of the event.\n   * @param listener - The callback function. It will\n   * receive an array of elements that have been removed due to overflow.\n   * This can happen when elements are added while the collection is at\n   * capacity, or when capacity is reduced below the current size.\n   *\n   * @returns the collection.\n   */\n  on(event: typeof BoundedEvent.Overflow, listener: (elems: T[]) => void): this;\n  on(\n    event: ValueOf<typeof BoundedEvent>,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    listener: (...args: any[]) => void\n  ): this {\n    this.emitter.on(event, listener);\n    return this;\n  }\n\n  /**\n   * Adds the listener function to the beginning of the listeners array for\n   * the {@link BoundedEvent.Overflow} event.\n   *\n   * * No checks are made to see if the listener has already been added.\n   * Multiple calls with the same of event + listener combination will\n   * result in the listener being added and called multiple times.\n   *\n   * * Alternatively, the `addListener()` method can be used to add\n   * the event listener to the end of the listeners array.\n   *\n   * @param event - The name of the event.\n   * @param listener - The callback function. It will\n   * receive an array of elements that have been removed due to overflow.\n   * This can happen when elements are added while the collection is at\n   * capacity, or when capacity is reduced below the current size.\n   *\n   * @returns the collection.\n   */\n  prependListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this;\n  prependListener(\n    event: ValueOf<typeof BoundedEvent>,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    listener: (...args: any[]) => void\n  ): this {\n    this.emitter.prependListener(event, listener);\n    return this;\n  }\n\n  /**\n   * Removes the specified listener from the listener array for the event.\n   *\n   * At most once instance of a listener will be removed. If a listener\n   * has been added multiple times for the same event, this method should\n   * be called once per instance.\n   *\n   * @param event - The name of the event.\n   * @param listener - The callback function.\n   *\n   * @returns the collection.\n   */\n  removeListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this;\n  removeListener(\n    event: ValueOf<typeof BoundedEvent>,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    listener: (...args: any[]) => void\n  ): this {\n    this.emitter.removeListener(event, listener);\n    return this;\n  }\n}\n","/**\n * Represents the maximum number of arguments that can be passed to a function.\n *\n * While ECMAScript specifications do not explicitly limit the number of function arguments,\n * practical limits are imposed by JavaScript engine implementations. Different engines can\n * have different maximums, so a conservative value is used to prevent runtime errors.\n *\n * For more details, see the\n * {@link https://262.ecma-international.org/14.0/#sec-list-and-record-specification-type | ECMAScript Specification},\n * section \"6.2.2 The List and Record Specification Types\".\n */\nexport const ARGS_MAX_LENGTH = 16383; // 2**14 - 1\n\n/**\n * Defines the maximum allowable length of an array.\n *\n * According to the ECMAScript specification, the length property of an array is\n * an unsigned 32-bit integer, so its range is 0 to 2**32 - 1, inclusive. Beyond this,\n * operations that modify the array length (e.g., `push`, `pop`, `unshift`, `shift`)\n * may fail or behave unexpectedly.\n *\n * For more details, see the\n * {@link https://262.ecma-international.org/14.0/#sec-arraycreate | ECMAScript Specification},\n * section \"10.4.2.2 ArrayCreate\".\n */\nexport const ARRAY_MAX_LENGTH = 4294967295; // 2**32 - 1;\n","import { ARRAY_MAX_LENGTH } from \"./constants\";\n\n/**\n * Checks if a given value is an integer within a valid array length range.\n *\n * This function is useful for validating array lengths before attempting operations\n * that could result in a `RangeError` due to invalid array size.\n *\n * @param value - The value to check.\n *\n * @returns `true` if the value is an integer within the `[0, ARRAY_MAX_LENGTH]` range, `false` otherwise.\n */\nexport function isArrayLength(value: unknown): value is number {\n  return (\n    Number.isInteger(value) &&\n    (value as number) >= 0 &&\n    (value as number) <= ARRAY_MAX_LENGTH\n  );\n}\n\n/**\n * Determines whether the provided value is a function.\n *\n * @param value - The value to check.\n *\n * @returns `true` if the value is a function, `false` otherwise.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isFunction(value: unknown): value is Function {\n  return typeof value === \"function\";\n}\n\n/**\n * Checks if a given value is positive infinity.\n *\n * @param value - The value to check.\n *\n * @returns `true` if the value is positive infinity, `false` otherwise.\n */\nexport function isInfinity(value: unknown): boolean {\n  return value === Number.POSITIVE_INFINITY;\n}\n\n/**\n * Determines whether the provided value is iterable.\n *\n * This is useful for determining if a value can be used\n * in a `for...of` loop or with spread syntax.\n *\n * @param value - The value to check.\n *\n * @returns `true` if the value implements the iterable protocol, `false` otherwise.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function isIterable(value: any): value is Iterable<unknown> {\n  return typeof value?.[Symbol.iterator] === \"function\";\n}\n\n/**\n * Determines whether the provided value is a number.\n *\n * This includes `NaN` and `Infinity`, so consider additional\n * checks if those values are not desirable.\n *\n * @param value - The value to check.\n *\n * @returns `true` if the value is of type number, `false` otherwise.\n */\nexport function isNumber(value: unknown): value is number {\n  return typeof value === \"number\";\n}\n\n/**\n * Checks if a given value is a safe integer greater than or equal to 0.\n *\n * This is useful for validating counts or sizes that must be within the safe\n * integer range to prevent precision loss.\n *\n * @param value - The value to check.\n *\n * @returns `true` if the value is a safe integer and non-negative, `false` otherwise.\n */\nexport function isSafeCount(value: unknown): value is number {\n  return Number.isSafeInteger(value) && (value as number) >= 0;\n}\n\n/**\n * Determines whether the provided value is a symbol.\n *\n * @param value - The value to check.\n *\n * @returns `true` if the value is a symbol, `false` otherwise.\n */\nexport function isSymbol(value: unknown): value is symbol {\n  return typeof value === \"symbol\";\n}\n","/**\n * Adds a specified addend to a value if the value is below a given target.\n *\n * @param value - The initial number.\n * @param addend - The number added if the value is below the target.\n * @param target - The target number for comparison. If the value is below this\n * number, the addend will be added. Defaults to 0 if not specified.\n */\nexport function addIfBelow(value: number, addend: number, target = 0): number {\n  return value >= target ? value : value + addend;\n}\n\n/**\n * Restricts a given numerical value within a specified range [min, max].\n *\n * If the provided value is less than the minimum, the minimum is returned.\n * If it is greater than the maximum, the maximum is returned. If the value\n * is within the range, the value itself is returned. An error is thrown if\n * the minimum range value is greater than the maximum range value, as this\n * represents an invalid range.\n *\n * @param value - The numerical value to clamp.\n * @param min - The minimum allowable value of the range.\n * @param max - The maximum allowable value of the range.\n *\n * @returns The clamped value within the specified range.\n *\n * @throws `RangeError` If `min` is greater than `max`.\n */\nexport function clamp(value: number, min: number, max: number): number {\n  if (min > max) {\n    throw new RangeError(\"Invalid clamp range; min must be <= max\");\n  }\n  if (value <= min) {\n    return min;\n  }\n  return value <= max ? value : max;\n}\n\n/**\n * Checks if a given numeric value falls within a specified range.\n *\n * @param value - The numeric value to check.\n * @param min - The inclusive lower bound of the range.\n * @param max - The exclusive upper bound of the range.\n *\n * @returns - `true` if `value` is within the range `[min, max)`, `false` otherwise.\n */\nexport function isInRange(value: number, min: number, max: number): boolean {\n  return value >= min && value < max;\n}\n\n/**\n * Calculates the logarithm of a given value with the specified base.\n *\n * This function uses natural logarithms (`Math.log`) for its calculations.\n * If either the value or the base is less than or equal to 0, `NaN` is returned\n * to indicate an invalid operation, as logarithms are not defined for non-positive\n * values and bases.\n *\n * @param value - The numerical value for which to calculate the logarithm. Must be positive.\n * @param base - The base of the logarithm. Must be positive.\n *\n * @returns The calculated logarithm of the value with the given base, or `NaN` for invalid inputs.\n */\nexport function log(value: number, base: number): number {\n  return value >= 0 && base > 0 ? Math.log(value) / Math.log(base) : NaN;\n}\n\n/**\n * Generates a number representing the length of a consecutive run based on a\n * probability threshold.\n *\n * This function iteratively increments a counter as long as the randomly\n * generated numbers from `randomFn` are less than the specified probability\n * threshold `p`, or until the counter reaches the maximum `max`.\n *\n * The function is useful for simulations or models that require a random yet\n * probabilistically constrained sequence length, such as simulating streaks or\n * runs in games of chance.\n *\n * @param p - The probability threshold. Defaults to 0.5.\n * @param max - The maximum value the of the run. Defaults to Infinity.\n * @param min - The starting value of the run. Defaults to 0.\n * @param randomFn - A function that generates a random number. Defaults to `Math.random`.\n *\n * @returns The length of the run.\n */\nexport function randomRun(\n  p = 0.5,\n  max = Infinity,\n  min = 0,\n  randomFn = Math.random\n): number {\n  while (min < max && randomFn() < p) {\n    ++min;\n  }\n  return min;\n}\n\n/**\n * Attempts to convert a given value to an integer.\n *\n * The function first tries to convert the value to a number. If the result\n * is not valid (i.e. `NaN`), the given `defaultValue` is returned. Otherwise,\n * the function truncates the number to an integer using `Math.trunc`.\n *\n * This is useful for ensuring numerical operations are performed on integers,\n * with a controllable fallback for invalid inputs.\n *\n * @param value - The value to convert to an integer. This can be of any type.\n * @param defaultValue - The fallback value to return if conversion fails. Defaults to 0.\n *\n * @returns The converted integer, or `defaultValue` if conversion is not possible.\n */\nexport function toInteger(value?: unknown, defaultValue = 0): number {\n  value = +value!;\n  return isNaN(value as number) ? defaultValue : Math.trunc(value as number);\n}\n","import { CircularBase } from \"./circularBase\";\nimport { BoundedEvent } from \"../types/boundedEvent\";\nimport { isArrayLength, isInfinity, isNumber } from \"../utils/is\";\nimport { Bounded } from \"../types/bounded\";\nimport { ARRAY_MAX_LENGTH } from \"../utils/constants\";\nimport { List } from \"../types/list\";\nimport { addIfBelow, clamp, isInRange, toInteger } from \"../utils/math\";\n\nexport class CircularArrayList<T>\n  extends CircularBase<T>\n  implements Bounded<T>, List<T>\n{\n  /**\n   * The maximum number of elements that can be stored in the collection.\n   * @internal\n   */\n  protected _capacity: number;\n\n  /**\n   * The index representing the first element.\n   * @internal\n   */\n  protected head: number;\n\n  /**\n   * Whether capacity is finite (true) or infinite (false).\n   */\n  protected isFinite: boolean;\n\n  /**\n   * The index one more than the last element.\n   * @internal\n   */\n  protected next: number;\n\n  /**\n   * The number of elements.\n   * @internal\n   */\n  protected _size: number;\n\n  /**\n   * The stored values.\n   * @internal\n   */\n  protected vals: T[];\n\n  /**\n   * Creates a new list. Default `capacity` is `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new list with the given capacity.\n   *\n   * @param capacity - the list's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new list from the given items. `capacity` will equal the number of items.\n   *\n   * @param items - the initial values in the list.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    super();\n\n    // Initialize class variables\n    this._capacity = ARRAY_MAX_LENGTH;\n    this.head = 0;\n    this.isFinite = false;\n    this._size = 0;\n    this.next = 0;\n    this.vals = [];\n\n    // If capacity is null, undefined, or Infinity\n    if (capacity == null || isInfinity(capacity)) {\n      return;\n    }\n\n    // If capacity is a number\n    if (isNumber(capacity)) {\n      // If capacity is invalid\n      if (!isArrayLength(capacity)) {\n        throw new RangeError(\"Invalid capacity\");\n      }\n      // If capacity is valid\n      this._capacity = capacity;\n      this.isFinite = true;\n      return;\n    }\n\n    // If capacity is an iterable\n    this.vals = Array.from(capacity as Iterable<T>);\n    this._capacity = this.vals.length;\n    this.isFinite = true;\n    this._size = this._capacity;\n  }\n\n  get capacity(): number {\n    return this.isFinite ? this._capacity : Infinity;\n  }\n\n  get size(): number {\n    return this._size;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return CircularArrayList.name;\n  }\n\n  set capacity(capacity: number) {\n    // Convert capacity to a number\n    capacity = +capacity;\n\n    // Check capacity\n    if (isInfinity(capacity)) {\n      // If capacity is Infinity\n      capacity = ARRAY_MAX_LENGTH;\n      this.isFinite = false;\n    } else if (isArrayLength(capacity)) {\n      // If capacity is valid\n      this.isFinite = true;\n    } else {\n      // If capacity is invalid\n      throw new RangeError(\"Invalid capacity\");\n    }\n\n    // Update collection\n    if (this._size <= 0) {\n      // If collection is empty\n      this._capacity = capacity;\n      this.clear();\n    } else if (capacity < this._capacity) {\n      // If capacity is decreasing\n      this.shrink(capacity);\n    } else if (capacity > this._capacity) {\n      // If capacity is increasing\n      this.grow(capacity);\n    }\n  }\n\n  at(index?: number): T | undefined {\n    // Sanitize input\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return undefined;\n    }\n\n    // Return value\n    return this.vals[this.toIndex(index)];\n  }\n\n  clear(): void {\n    this._size = 0;\n    this.head = 0;\n    this.next = 0;\n    this.vals.length = 0;\n  }\n\n  /*\n  copyWithin(target: number, start: number, end?: number): this {\n    const size = this._size;\n\n    // Sanitize inputs\n    target = clamp(addIfBelow(toInteger(target, 0), size), 0, size);\n    start = clamp(addIfBelow(toInteger(start, 0), size), 0, size);\n    const temp = target > start ? target - start : 0;\n    end = clamp(addIfBelow(toInteger(end, size), size), start, size - temp);\n\n    // Copy within\n    this._copyWithin(target, start, end);\n\n    // Return list\n    return this;\n  }\n  */\n\n  /**\n   * @internal\n   */\n  protected _copyWithin(target: number, start: number, end: number): void {\n    // If copying in-place or nothing to copy\n    if (target == start || start >= end) {\n      return;\n    }\n\n    // Get source data segments\n    const capacity = this._capacity - 1;\n    const vals = this.vals;\n    const ranges = this.toRanges(start, end);\n\n    if (target <= start || end <= target) {\n      // Copy from left to right\n      target = this.toIndex(target);\n      for (const [min, max] of ranges) {\n        for (let i = min; i < max; ++i) {\n          vals[target] = vals[i];\n          target = target < capacity ? target + 1 : 0;\n        }\n      }\n    } else {\n      // Copy from right to left\n      target = this.toIndex(target + (end - start));\n      for (const [min, max] of ranges.reverse()) {\n        for (let i = max - 1; i >= min; --i) {\n          target = target > 0 ? target - 1 : capacity;\n          vals[target] = vals[i];\n        }\n      }\n    }\n  }\n\n  delete(index: number): boolean {\n    // Sanitize input\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return false;\n    }\n\n    // Delete value\n    this._delete(index, 1);\n\n    // Return success\n    return true;\n  }\n\n  /**\n   * @internal\n   */\n  protected _delete(index: number, deleteCount: number): void {\n    this._copyWithin(index, index + deleteCount, this._size);\n    this._pop(deleteCount);\n  }\n\n  *entries(): IterableIterator<[number, T]> {\n    for (let ext = 0; ext < this._size; ++ext) {\n      yield [ext, this.vals[this.toIndex(ext)]];\n    }\n  }\n\n  fill(value: T, start?: number, end?: number): this {\n    const size = this._size;\n\n    // Sanitize inputs\n    start = clamp(addIfBelow(toInteger(start, 0), size), 0, size);\n    end = clamp(addIfBelow(toInteger(end, size), size), start, size);\n\n    // Fill values\n    this._fill(value, start, end);\n\n    // Return list\n    return this;\n  }\n\n  /**\n   * @internal\n   */\n  protected _fill(value: T, start: number, end: number): void {\n    for (const [min, max] of this.toRanges(start, end)) {\n      this.vals.fill(value, min, max);\n    }\n  }\n\n  first(): T | undefined {\n    return this._size > 0 ? this.vals[this.head] : undefined;\n  }\n\n  forEach(\n    callbackfn: (value: T, index: number, collection: this) => void,\n    thisArg?: unknown\n  ): void {\n    const N = this._size;\n    for (let ext = 0; ext < N && ext < this._size; ++ext) {\n      const value = this.vals[this.toIndex(ext)];\n      callbackfn.call(thisArg, value, ext, this);\n    }\n  }\n\n  has(value: T): boolean {\n    const vals = this.vals;\n    for (const [min, max] of this.toRanges(0, this._size)) {\n      for (let i = min; i < max; ++i) {\n        if (value === vals[i]) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  *keys(): IterableIterator<number> {\n    for (let ext = 0; ext < this._size; ++ext) {\n      yield ext;\n    }\n  }\n\n  last(): T | undefined {\n    return this._size > 0 ? this.vals[this.toIndex(this._size - 1)] : undefined;\n  }\n\n  pop(): T | undefined {\n    // If list is empty\n    if (this._size <= 0) {\n      return undefined;\n    }\n\n    // Get and remove first value\n    const value = this.vals[this.toIndex(this._size - 1)];\n    this._pop(1);\n\n    // Return value\n    return value;\n  }\n\n  /**\n   * @internal\n   */\n  protected _pop(N: number): void {\n    // Remove values\n    const newSize = this._size - N;\n    this._fill(undefined as T, newSize, this._size);\n\n    // Update state\n    this.next = this.toIndex(newSize);\n    this._size = newSize;\n  }\n\n  push(...values: T[]): number {\n    // If no values\n    if (values.length <= 0) {\n      return this._size;\n    }\n\n    // If no capacity\n    if (this._capacity <= 0) {\n      this._overflow(values);\n      return this._size;\n    }\n\n    // Push values\n    this._insert(this._size, values);\n\n    // Return new size\n    return this._size;\n  }\n\n  set(index: number, value: T): T | undefined {\n    // Sanitize input\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return undefined;\n    }\n\n    // Update value\n    index = this.toIndex(index);\n    const prevValue = this.vals[index];\n    this.vals[index] = value;\n\n    // Return previous value\n    return prevValue;\n  }\n\n  shift(): T | undefined {\n    // If list is empty\n    if (this._size <= 0) {\n      return undefined;\n    }\n\n    // Get and remove last value\n    const value = this.vals[this.head];\n    this._shift(1);\n\n    // Return value\n    return value;\n  }\n\n  /**\n   * @internal\n   */\n  protected _shift(N: number): void {\n    // Remove values\n    this._fill(undefined as T, 0, N);\n\n    // Update state\n    this.head = this.toIndex(N);\n    this._size -= N;\n  }\n\n  slice(start?: number, end?: number): CircularArrayList<T> {\n    const size = this._size;\n\n    // Sanitize inputs\n    start = clamp(addIfBelow(toInteger(start, 0), size), 0, size);\n    end = clamp(addIfBelow(toInteger(end, size), size), start, size);\n\n    // Return slice\n    return this.toList(this._slice(start, end));\n  }\n\n  /**\n   * @internal\n   */\n  protected _slice(start: number, end: number): T[] {\n    const from = this.vals;\n    const to = new Array<T>(end - start);\n\n    let j = 0;\n    for ([start, end] of this.toRanges(start, end)) {\n      for (let i = start; i < end; ++i) {\n        to[j++] = from[i];\n      }\n    }\n\n    return to;\n  }\n\n  splice(\n    start: number,\n    deleteCount?: number,\n    ...items: T[]\n  ): CircularArrayList<T> {\n    const size = this._size;\n\n    // Sanitize inputs\n    start = clamp(addIfBelow(toInteger(start, 0), size), 0, size);\n    deleteCount = clamp(toInteger(deleteCount, 0), 0, size - start);\n\n    // Create output\n    const out = this.toList(this._slice(start, start + deleteCount));\n\n    // Update list\n    this._splice(start, deleteCount, items);\n\n    // Return output\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  protected _splice(start: number, deleteCount: number, items: T[] = []): void {\n    const addCount = items.length;\n    const replaceCount = Math.min(deleteCount, addCount);\n    const vals = this.vals;\n\n    // Replace values\n    let j = 0;\n    for (const [a, b] of this.toRanges(start, start + replaceCount)) {\n      for (let i = a; i < b; ++i) {\n        vals[i] = items[j++];\n      }\n    }\n\n    // If done\n    if (deleteCount == addCount) {\n      return;\n    }\n\n    // Insert remaining values or finish deletions\n    start += replaceCount;\n    deleteCount < addCount\n      ? this._insert(start, items, replaceCount)\n      : this._delete(start, deleteCount - addCount);\n  }\n\n  /**\n   * @internal\n   */\n  protected _insert(\n    start: number,\n    items: T[],\n    min = 0,\n    max = items.length\n  ): void {\n    const N = max - min;\n\n    // Check free space\n    let free = this._capacity - this._size;\n    if (free >= N) {\n      this._safeInsert(start, items, min, max);\n      return;\n    }\n\n    // Check if \"infinite\" capacity yet not enough space\n    if (!this.isFinite) {\n      this._safeInsert(start, items, min, min + free);\n      throw new Error(\"Out of memory\");\n    }\n\n    // Remove from head\n    if (start > 0) {\n      const shifted = Math.min(start, N - free);\n      this._overflow(this._slice(0, shifted));\n      this._shift(shifted);\n      start -= shifted;\n      free += shifted;\n    }\n\n    // Check free space\n    if (free >= N) {\n      this._safeInsert(start, items, min, max);\n      return;\n    }\n\n    // Remove from items and insert remaining\n    const mid = max - free;\n    this._overflow(items.slice(min, mid));\n    this._safePresert(0, items, mid, max);\n  }\n\n  /**\n   * @internal\n   */\n  protected _safeInsert(\n    vIndex: number,\n    items: T[],\n    min = 0,\n    max = items.length\n  ): void {\n    const N = max - min;\n    const vals = this.vals;\n\n    // Make space\n    this._copyWithin(vIndex + N, vIndex, this._size);\n\n    // Insert into space\n    for (const [start, end] of this.toRanges(vIndex, vIndex + N)) {\n      for (let i = start; i < end; ++i) {\n        vals[i] = items[min++];\n      }\n    }\n\n    // Update state\n    this._size += N;\n    this.next = this.toIndex(this._size);\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.values();\n  }\n\n  unshift(...values: T[]): number {\n    // If no values\n    if (values.length <= 0) {\n      return this._size;\n    }\n\n    // If no capacity\n    if (this._capacity <= 0) {\n      this._overflow(values);\n      return this._size;\n    }\n\n    // Presert values\n    this._presert(0, values);\n\n    // Return new size\n    return this._size;\n  }\n\n  /**\n   * @internal\n   */\n  protected _presert(\n    end: number,\n    items: T[],\n    min = 0,\n    max = items.length\n  ): void {\n    const N = max - min;\n\n    // Check free space\n    let free = this._capacity - this._size;\n    if (free >= N) {\n      this._safePresert(end, items, min, max);\n      return;\n    }\n\n    // Check if \"infinite\" capacity yet not enough space\n    if (!this.isFinite) {\n      this._safePresert(end, items, max - free, max);\n      throw new Error(\"Out of memory\");\n    }\n\n    // Remove from tail\n    if (end < this._size) {\n      const popped = Math.min(this._size - end, N - free);\n      this._overflow(this._slice(this._size - popped, this._size));\n      this._pop(popped);\n      free += popped;\n    }\n\n    // Check free space\n    if (free >= N) {\n      this._safePresert(end, items, min, max);\n      return;\n    }\n\n    // Remove from items and insert remaining\n    const mid = min + free;\n    this._overflow(items.slice(mid, max));\n    this._safeInsert(this._size, items, min, mid);\n  }\n\n  /**\n   * @internal\n   */\n  protected _safePresert(\n    vIndex: number,\n    items: T[],\n    min = 0,\n    max = items.length\n  ): void {\n    const capacity = this._capacity;\n    const N = max - min;\n    const vals = this.vals;\n\n    // Make space\n    const newHead = capacity - N;\n    this._copyWithin(newHead, 0, vIndex);\n\n    // Insert into space\n    vIndex += newHead;\n    for (const [start, end] of this.toRanges(vIndex, vIndex + N)) {\n      for (let i = start; i < end; ++i) {\n        vals[i] = items[min++];\n      }\n    }\n\n    // Update state\n    this._size += N;\n    this.head = this.toIndex(newHead);\n  }\n\n  *values(): IterableIterator<T> {\n    for (let ext = 0; ext < this._size; ++ext) {\n      yield this.vals[this.toIndex(ext)];\n    }\n  }\n\n  /**\n   * @internal\n   *\n   * Emit an overflow event containing the items evicted from the collection.\n   *\n   * @param evicted - The items evicted from the collection.\n   */\n  protected _overflow(evicted: T[]): void {\n    this.emitter.emit(BoundedEvent.Overflow, evicted);\n  }\n\n  /**\n   * @internal\n   *\n   * Grow capacity.\n   *\n   * @param capacity - the new capacity\n   */\n  protected grow(capacity: number): void {\n    // Check if list is sequential: [    H123456T    ]\n    if (this.isSequential()) {\n      this.sequentialReset(capacity);\n      return;\n    }\n\n    // Queue is not sequential: [456T    H123]\n    if (this._size <= this.head) {\n      // [H123456T] = A + B = N\n      const temp = this._size - this.next;\n      this.vals.copyWithin(temp, 0, this.next);\n      this.vals.copyWithin(0, this.head, this.head + temp);\n      this.vals.length = this._size;\n      this.head = 0;\n      this.next = this._size;\n    } else if (this.head + this._size <= capacity) {\n      // [        H123456T] = 2B < 2N\n      this.vals.length = this.head + this._size;\n      this.vals.copyWithin(this._capacity, 0, this.next);\n      this.vals.fill(undefined as T, 0, this.next);\n      this.next = (this.head + this._size) % capacity;\n    } /* else if (this.next + this._size <= capacity) {\n      // [    H123456T] = A + 2B = N + B < 2N\n      const temp = this._capacity - this.head;\n      this.vals.length = capacity;\n      this.vals.copyWithin(this.next, this.head, this._capacity);\n      this.vals.copyWithin(this.next + temp, 0, this.next);\n      this.vals.fill(undefined as T, 0, this.next);\n      this.vals.length = this.next + this._size;\n      this.head = this.next;\n      this.next = (this.head + this._size) % capacity;\n    } */ else {\n      // [6T      H12345] = B + D < 2B < 2N\n      const diff = capacity - this._capacity;\n      this.vals.length = capacity;\n      this.vals.copyWithin(this._capacity, 0, diff);\n      this.vals.copyWithin(0, diff, this.next);\n      const temp = Math.max(diff, this.next - diff);\n      this.vals.fill(undefined as T, temp, this.next);\n      this.next -= diff;\n    }\n\n    // Update capacity\n    this._capacity = capacity;\n  }\n\n  /**\n   * @internal\n   *\n   * Returns whether the list is stored sequentially in memory.\n   *\n   * @returns `true` if the list is sequential in memory, `false` otherwise.\n   */\n  protected isSequential(): boolean {\n    return this.head < this.next || this.next <= 0;\n  }\n\n  /**\n   * @internal\n   *\n   * Adjusts the list to fit within the given capacity.\n   *\n   * Assumes the list:\n   * - is sequential in memory.\n   * - fits in the given capacity (size \\<= capacity).\n   *\n   * @param capacity - The new capacity.\n   *\n   * @returns `true` if the list was reset, `false` otherwise.\n   */\n  protected sequentialReset(capacity: number): boolean {\n    const tail = this.head + this._size;\n\n    // If list fits in current location: [    H------T    ]\n    if (tail <= capacity) {\n      this.vals.length = tail;\n      this.next = this.vals.length % capacity;\n\n      // If list must be fully moved: [H------T    ]\n    } else if (this.head >= capacity) {\n      this.vals.copyWithin(0, this.head, tail);\n      this.vals.length = this._size;\n      this.head = 0;\n      this.next = this._size % capacity;\n\n      // If list must be partially moved: [--T  H----]\n    } else {\n      this.vals.copyWithin(0, capacity, tail);\n      this.vals.length = capacity;\n      this.next = tail - capacity;\n    }\n\n    this._capacity = capacity;\n    return true;\n  }\n\n  /**\n   * @internal\n   *\n   * Shrink capacity.\n   *\n   * @param capacity - the new capacity\n   */\n  protected shrink(capacity: number): void {\n    // Handle overflow\n    if (this._size > capacity) {\n      const shifted = this._size - capacity;\n      this._overflow(this._slice(0, shifted));\n      this._shift(shifted);\n    }\n\n    // Check if list is sequential: [    H123456T    ]\n    if (this.isSequential()) {\n      this.sequentialReset(capacity);\n      return;\n    }\n\n    // Shift 1st half of list: [456T....H123] -> [456T..H123]\n    const diff = this._capacity - capacity;\n    this.vals.copyWithin(this.head - diff, this.head, this._capacity);\n    this.vals.length = capacity;\n    this.head -= diff;\n    this._capacity = capacity;\n  }\n\n  /**\n   * @internal\n   */\n  protected toIndex(externalIndex: number): number {\n    return (this.head + externalIndex) % this._capacity;\n  }\n\n  /**\n   * @internal\n   */\n  protected toList(values: T[]): CircularArrayList<T> {\n    const out = new CircularArrayList<T>(0);\n    out.vals = values;\n    out._size = values.length;\n    out._capacity = values.length;\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  protected toRanges(min: number, max: number): [number, number][] {\n    const head = this.head;\n    const mid = this._capacity - head;\n    if (max <= mid) {\n      return [[head + min, head + max]];\n    }\n    if (min >= mid) {\n      return [[min - mid, max - mid]];\n    }\n    return [\n      [head + min, this._capacity],\n      [0, max - mid],\n    ];\n  }\n}\n","import { BoundedEvent } from \"../types/boundedEvent\";\nimport { Bounded } from \"../types/bounded\";\nimport { Deque } from \"..\";\nimport { CircularArrayList } from \"./circularArrayList\";\n\n/**\n * A circular deque is similar to a traditional deque, but uses a fixed-size,\n * circular buffer. When the deque reaches its maximum capacity and a new\n * element is added, the oldest is discarded, thus maintaining its size.\n *\n * This structure efficiently utilizes memory for applications where only the\n * most recent additions are of interest and older data can be discarded.\n *\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularDeque<T> implements Bounded<T>, Deque<T> {\n  /**\n   * @internal\n   */\n  protected list: CircularArrayList<T>;\n\n  /**\n   * Creates a new deque. Default `capacity` is `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new deque with the given capacity.\n   *\n   * @param capacity - the deque's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new deque from the given items. `capacity` will equal the number of items.\n   *\n   * @param items - the initial values in the deque.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    this.list = new CircularArrayList(capacity as number);\n  }\n\n  get capacity(): number {\n    return this.list.capacity;\n  }\n\n  get size(): number {\n    return this.list.size;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return CircularDeque.name;\n  }\n\n  set capacity(capacity: number) {\n    this.list.capacity = capacity;\n  }\n\n  clear(): void {\n    this.list.clear();\n  }\n\n  entries(): IterableIterator<[number, T]> {\n    return this.list.entries();\n  }\n\n  first(): T | undefined {\n    return this.list.first();\n  }\n\n  forEach(\n    callbackfn: (value: T, index: number, collection: this) => void,\n    thisArg?: unknown\n  ): void {\n    return this.list.forEach((v, i) => callbackfn.call(thisArg, v, i, this));\n  }\n\n  front(): T | undefined {\n    return this.list.first();\n  }\n\n  has(value: T): boolean {\n    return this.list.has(value);\n  }\n\n  keys(): IterableIterator<number> {\n    return this.list.keys();\n  }\n\n  last(): T | undefined {\n    return this.list.last();\n  }\n\n  pop(): T | undefined {\n    return this.list.pop();\n  }\n\n  push(...elems: T[]): number {\n    return this.list.push(...elems);\n  }\n\n  shift(): T | undefined {\n    return this.list.shift();\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.list.values();\n  }\n\n  top(): T | undefined {\n    return this.list.last();\n  }\n\n  unshift(...elems: T[]): number {\n    return this.list.unshift(...elems);\n  }\n\n  values(): IterableIterator<T> {\n    return this.list.values();\n  }\n\n  addListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.addListener(event, listener);\n    return this;\n  }\n\n  on(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.on(event, listener);\n    return this;\n  }\n\n  prependListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.prependListener(event, listener);\n    return this;\n  }\n\n  removeListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.removeListener(event, listener);\n    return this;\n  }\n}\n","import { LinkedNode } from \"../types/linkedNode\";\n\n/**\n * Removes and returns a segment of a linked list as a new list.\n *\n * This operation modifies the original list by removing the specified\n * range of nodes and returning the new list's head and tail as a tuple.\n * If `count` \\<= zero, the function returns [undefined, undefined].\n * If `count` \\> len(prev), a `TypeError` is thrown.\n *\n * @param prev - The node preceding the start of the section to be cut.\n * @param count - The number of nodes to include in the cut.\n *\n * @returns A tuple containing the head and tail of the removed segment,\n * or [undefined, undefined] if `count` \\<= zero.\n *\n * @throws - {@link TypeError}\n * thrown if `count` \\> `len(prev)`\n */\nexport function cut<N extends LinkedNode<unknown>>(\n  prev: N,\n  count: number\n): [N, N] | [undefined, undefined] {\n  if (count <= 0) {\n    return [undefined, undefined];\n  }\n  const head = prev.next!;\n  const tail = get(head, count - 1)!;\n  prev.next = tail.next;\n  tail.next = undefined;\n  return [head, tail];\n}\n\n/**\n * Iterates through a linked list, yielding each node's index\n * (position in the list) and value as a tuple.\n *\n * Iteration starts from the `node` node and continues until either the end\n * of the list, or the `end` node if provided.\n *\n * This generator function provides a convenient way to enumerate all nodes in\n * a linked list, similar to how `Array.prototype.entries()` works for arrays.\n *\n * @param node - The node at which to start iterating.\n * @param end - An optional node at which to end (exclusive).\n * If not provided, iteration continues until the end of the list.\n *\n * @throws - {@link TypeError}\n * thrown if an `end` node is provided but not encountered before the end of the list.\n */\nexport function* entries<T>(\n  node?: LinkedNode<T>,\n  end?: LinkedNode<T>\n): Generator<[number, T]> {\n  for (let i = 0; node != end; ++i) {\n    yield [i, node!.value];\n    node = node!.next;\n  }\n}\n\n/**\n * Retrieves the node at the specified distance from the given node.\n *\n * This function iterates through the linked list starting from the `node`\n * node, moving `index` nodes away in the list.\n *\n * @param node - The node from which to start.\n * @param index - The forward distance of the node to retrieve.\n *\n * @returns The node at the specified index,\n * or `undefined` if `index` does not exist.\n */\nexport function get<N extends LinkedNode<unknown>>(\n  node: N | undefined,\n  index: number\n): N | undefined {\n  if (index < 0) {\n    return undefined;\n  }\n  for (let i = 0; node != null && i < index; ++i) {\n    node = node.next;\n  }\n  return node;\n}\n\n/**\n * Determines whether a linked list contains a node with a specified value.\n *\n * Iteration starts from the `node` node and continues until either the end\n * of the list, or the `end` node if provided.\n *\n * @param node - The node from which to start searching.\n * @param value - The value to search for.\n * @param end - An optional node at which to end the search (exclusive).\n * If not provided, the search continues until the end of the list.\n *\n * @returns `true` if the specified value is found, `false` otherwise.\n *\n * @throws - {@link TypeError}\n * thrown if an `end` node is provided but not encountered before the end of the list.\n *\n */\nexport function has<T>(\n  node: LinkedNode<T> | undefined,\n  value: T,\n  end?: LinkedNode<T>\n): boolean {\n  while (node != end) {\n    if (node!.value === value) {\n      return true;\n    }\n    node = node!.next;\n  }\n  return false;\n}\n\n/**\n * Inserts a new sequence of values into a linked list right after a specified node.\n *\n * @param prev - The node in the linked list after which the new values will be inserted.\n * @param values - An iterable of values to be inserted.\n * @returns The last node that was inserted into the list, or `prev` if no values were inserted.\n */\nexport function insert<T>(\n  prev: LinkedNode<T>,\n  values: Iterable<T>\n): LinkedNode<T> {\n  // Convert values to list\n  const [head, tail, size] = toList(values);\n\n  // If no values\n  if (size <= 0) {\n    return prev;\n  }\n\n  // Add values\n  tail!.next = prev.next;\n  prev.next = head;\n\n  return tail!;\n}\n\n/**\n * Iterates through a linked list, yielding each node's index\n * (position in the list).\n *\n * Iteration starts from the `node` node and continues until either the end\n * of the list, or the `end` node if provided.\n *\n * This generator function provides a convenient way to enumerate all nodes in\n * a linked list, similar to how `Array.prototype.entries()` works for arrays.\n *\n * @param node - The node at which to start iterating.\n * @param end - An optional node at which to end (exclusive).\n * If not provided, iteration continues until the end of the list.\n *\n * @throws - {@link TypeError}\n * thrown if an `end` node is provided but not encountered before the end of the list.\n */\nexport function* keys<T>(\n  node?: LinkedNode<T>,\n  end?: LinkedNode<T>\n): Generator<number> {\n  for (let i = 0; node != end; ++i) {\n    yield i;\n    node = node!.next;\n  }\n}\n\n/**\n * Finds the tail of the linked list and the distance to it.\n *\n * This function iterates through the linked list starting from the `node`\n * node, counting each node until it reaches the tail of the list (\n * where node.next is null or undefined).\n *\n * @param node - The node from which to start counting.\n *\n * @returns a tuple with the tail and distance to it.\n */\nexport function getTail(node?: null): [undefined, -1];\nexport function getTail<N extends LinkedNode<unknown>>(node: N): [N, number];\nexport function getTail<N extends LinkedNode<unknown>>(\n  node?: N | null\n): [N, number] | [undefined, -1];\nexport function getTail<N extends LinkedNode<unknown>>(\n  node?: N | null\n): [N, number] | [undefined, -1] {\n  if (node == null) {\n    return [undefined, -1];\n  }\n  let count = 0;\n  while (node.next != null) {\n    node = node.next;\n    ++count;\n  }\n  return [node, count];\n}\n\n/**\n * Converts a linked list into an array of values.\n *\n * The conversion starts from the `node` node and includes all nodes up to the\n * end of the list, or the `end` node if provided.\n *\n * @param node - The node at which to start converting.\n * @param end - An optional node at which to end (exclusive).\n * If not provided, conversion continues until the end of the list.\n *\n * @returns An array with the values of the list from `node` to `end`.\n *\n * @throws - {@link TypeError}\n * thrown if an `end` node is provided but not encountered before the end of the list.\n */\nexport function toArray<T>(node?: LinkedNode<T>, end?: LinkedNode<T>): T[] {\n  const array: T[] = [];\n\n  while (node != end) {\n    array.push(node!.value);\n    node = node!.next;\n  }\n\n  return array;\n}\n\n/**\n * Converts an iterable collection of values into a linked list and returns\n * the head, tail and size of the list.\n *\n * If the iterable is empty, the function returns a triple containing\n * `[undefined, undefined, 0]` to indicate that no list was created.\n *\n * @param values - The iterable collection of elements.\n *\n * @returns A triple containing the head, tail and size of the list.\n * Returns `[undefined, undefined, 0]` if the iterable is empty.\n */\nexport function toList<T>(\n  values: Iterable<T>\n): [LinkedNode<T>, LinkedNode<T>, number] | [undefined, undefined, 0] {\n  const root = {} as LinkedNode<T>;\n\n  let count = 0;\n  let tail = root;\n  for (const value of values) {\n    tail.next = { value };\n    tail = tail.next;\n    ++count;\n  }\n\n  return root.next === undefined\n    ? [undefined, undefined, 0]\n    : [root.next, tail, count];\n}\n\n/**\n * Iterates through a linked list, yielding each node's value.\n *\n * Iteration starts from the `node` node and continues until either the end\n * of the list, or the `end` node if provided.\n *\n * This generator function provides a convenient way to enumerate all nodes in\n * a linked list, similar to how `Array.prototype.entries()` works for arrays.\n *\n * @param node - The node at which to start iterating.\n * @param end - An optional node at which to end (exclusive).\n * If not provided, iteration continues until the end of the list.\n *\n * @throws - {@link TypeError}\n * thrown if an `end` node is provided but not encountered before the end of the list.\n */\nexport function* values<T>(\n  head?: LinkedNode<T>,\n  end?: LinkedNode<T>\n): Generator<T> {\n  for (let i = 0; head != end; ++i) {\n    yield head!.value;\n    head = head!.next;\n  }\n}\n","import { DoublyLinkedNode } from \"../types/doublyLinkedNode\";\n\nimport { get as singlyGet, cut as singlyCut } from \"./linkedNode\";\n\n/**\n * Removes and returns a segment of a linked list as a new list.\n *\n * This operation modifies the original list by removing the specified\n * range of nodes and returning the new list's head and tail as a tuple.\n * If `count` \\<= zero, the function returns [undefined, undefined].\n * If `count` \\> len(prev), a `TypeError` is thrown.\n *\n * @param prev - The node preceding the start of the section to be cut.\n * @param count - The number of nodes to include in the cut.\n *\n * @returns A tuple containing the head and tail of the removed segment,\n * or [undefined, undefined] if `count` \\<= zero.\n *\n * @throws - {@link TypeError}\n * thrown if `count` \\> `len(prev)`\n */\nexport function cut<N extends DoublyLinkedNode<unknown>>(\n  root: N,\n  count: number\n): [N, N] | [undefined, undefined] {\n  if (count <= 0) {\n    return [undefined, undefined];\n  }\n  const [head, tail] = singlyCut(root, count) as [N, N];\n  head.prev = undefined;\n  if (root.next != null) {\n    root.next.prev = root;\n  }\n  return [head, tail];\n}\n\n/**\n * Retrieves the node at the specified distance from the given node.\n *\n * This function iterates through the linked list starting from the `node`\n * node, moving `index` nodes away in the list.\n *\n * @param node - The node from which to start.\n * @param index - The forward distance of the node to retrieve.\n *\n * @returns The node at the specified index,\n * or `undefined` if `index` does not exist.\n */\nexport function get<N extends DoublyLinkedNode<unknown>>(\n  node: N | undefined,\n  index: number\n): N | undefined {\n  if (index >= 0) {\n    return singlyGet(node, index);\n  }\n  for (let i = 0; node != null && i > index; --i) {\n    node = node.prev;\n  }\n  return node;\n}\n\n/**\n * Inserts a new sequence of values into a linked list right after a specified node.\n *\n * @param prev - The node in the linked list after which the new values will be inserted.\n * @param values - An iterable of values to be inserted.\n *\n * @returns The last node that was inserted into the list, or `prev` if no values were inserted.\n */\nexport function insert<T>(\n  prev: DoublyLinkedNode<T>,\n  values: T[]\n): DoublyLinkedNode<T> {\n  // Convert values to list\n  const [head, tail, size] = toList(values);\n\n  // If no values\n  if (size <= 0) {\n    return prev;\n  }\n\n  // Add values\n  const next = prev.next;\n  prev.next = head;\n  head!.prev = prev;\n  tail!.next = next;\n  if (next != null) {\n    next.prev = tail;\n  }\n\n  return tail!;\n}\n\n/**\n * Converts an iterable collection of values into a linked list and returns\n * the head, tail and size of the list.\n *\n * If the iterable is empty, the function returns a triple containing\n * `[undefined, undefined, 0]` to indicate that no list was created.\n *\n * @param values - The iterable collection of elements.\n *\n * @returns A triple containing the head, tail and size of the list.\n * Returns `[undefined, undefined, 0]` if the iterable is empty.\n */\nexport function toList<T>(\n  values: Iterable<T>\n):\n  | [DoublyLinkedNode<T>, DoublyLinkedNode<T>, number]\n  | [undefined, undefined, 0] {\n  const root = {} as DoublyLinkedNode<T>;\n\n  let count = 0;\n  let tail = root;\n  for (const value of values) {\n    tail.next = { prev: tail, value } as DoublyLinkedNode<T>;\n    tail = tail.next;\n    ++count;\n  }\n\n  if (count <= 0) {\n    return [undefined, undefined, 0];\n  }\n\n  root.next!.prev = undefined;\n  return [root.next!, tail, count];\n}\n","import { Bounded, BoundedEvent } from \"..\";\nimport { DoublyLinkedNode as Node } from \"../types/doublyLinkedNode\";\nimport { List } from \"../types/list\";\nimport { cut, get, toList } from \"../utils/doublyLinkedNode\";\nimport { isInfinity, isNumber, isSafeCount } from \"../utils/is\";\nimport { entries, has, keys, toArray, values } from \"../utils/linkedNode\";\nimport { addIfBelow, clamp, isInRange, toInteger } from \"../utils/math\";\nimport { CircularBase } from \"./circularBase\";\n\nexport class CircularDoublyLinkedList<T>\n  extends CircularBase<T>\n  implements Bounded<T>, List<T>\n{\n  /**\n   * The maximum number of elements that can be stored in the collection.\n   * @internal\n   */\n  protected _capacity: number;\n\n  /**\n   * The root of the linked list\n   * @internal\n   */\n  protected root: Node<T>;\n\n  /**\n   * The current size of the list (0 \\<= size \\<= capacity)\n   * @internal\n   */\n  protected _size!: number;\n\n  /**\n   * Creates a standard linked list (no capacity restriction).\n   */\n  constructor();\n  /**\n   * Creates a linked list with the given capacity.\n   *\n   * @param capacity - the list's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a linked list with the given items. Capacity is set to the number of items.\n   *\n   * @param items - the values to store in the list.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    super();\n\n    // Initialize class variables\n    this._capacity = Infinity;\n    this.root = { value: undefined } as Node<T>;\n    this.clear();\n\n    // Case 1: capacity is null, undefined or Infinity\n    capacity = capacity ?? Infinity;\n    if (isInfinity(capacity)) {\n      return;\n    }\n\n    // Case 2: capacity is zero or a positive safe integer\n    if (isNumber(capacity)) {\n      if (!isSafeCount(capacity)) {\n        throw new RangeError(\"Invalid capacity\");\n      }\n      this._capacity = capacity;\n      return;\n    }\n\n    // Case 3: capacity is iterable\n    const [head, tail, size] = toList(capacity as Iterable<T>);\n    this._capacity = size;\n    if (size > 0) {\n      this.root.next = head!;\n      this.root.prev = tail!;\n      head!.prev = this.root;\n      tail!.next = this.root;\n      this._size = size;\n    }\n  }\n\n  get capacity(): number {\n    return this._capacity;\n  }\n\n  get size(): number {\n    return this._size;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return CircularDoublyLinkedList.name;\n  }\n\n  set capacity(capacity: number) {\n    // Convert input to a number\n    capacity = +capacity;\n\n    // If input is NaN, below zero, or a non-integer\n    if (!isInfinity(capacity) && !isSafeCount(capacity)) {\n      throw new RangeError(\"Invalid capacity\");\n    }\n\n    // Update capacity\n    this._capacity = capacity;\n\n    // If current size fits within new capacity\n    if (this._size <= capacity) {\n      return;\n    }\n\n    // Shrink\n    const diff = this._size - capacity;\n    const [head, tail] = cut(this.root, diff);\n    this._size -= diff;\n\n    // Emit discarded items\n    this.emitter.emit(BoundedEvent.Overflow, toArray(head, tail!.next));\n  }\n\n  at(index: number): T | undefined {\n    // Check index\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return undefined;\n    }\n\n    // Return value\n    return this.get(index).value;\n  }\n\n  clear(): void {\n    this._size = 0;\n    this.root.next = this.root;\n    this.root.prev = this.root;\n  }\n\n  delete(index: number): boolean {\n    // Check index\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return false;\n    }\n\n    // Delete value\n    const node = this.get(index);\n    node.prev!.next = node.next;\n    node.next!.prev = node.prev;\n    --this._size;\n\n    return true;\n  }\n\n  entries(): IterableIterator<[number, T]> {\n    return entries(this.root.next, this.root);\n  }\n\n  fill(value: T, start?: number, end?: number): this {\n    // Sanitize start\n    start = toInteger(start, 0);\n    start = clamp(addIfBelow(start, this._size), 0, this._size);\n\n    // Sanitize end\n    end = toInteger(end, this._size);\n    end = clamp(addIfBelow(end, this._size), 0, this._size);\n\n    // Update values\n    let node = this.get(start);\n    while (start < end) {\n      node.value = value;\n      node = node.next!;\n      ++start;\n    }\n\n    return this;\n  }\n\n  forEach(\n    callbackfn: (value: T, index: number, list: this) => void,\n    thisArg?: unknown\n  ): void {\n    let node = this.root;\n    for (let i = 0; i < this._size; ++i) {\n      node = node.next!;\n      callbackfn.call(thisArg, node.value, i, this);\n    }\n  }\n\n  has(value: T): boolean {\n    return has(this.root.next, value, this.root);\n  }\n\n  keys(): IterableIterator<number> {\n    return keys(this.root.next, this.root);\n  }\n\n  pop(): T | undefined {\n    // Check if empty\n    if (this._size <= 0) {\n      return undefined;\n    }\n\n    // Remove tail\n    const node = this.root.prev!;\n    node.prev!.next = node.next;\n    node.next!.prev = node.prev;\n    --this._size;\n\n    // Return value\n    return node.value;\n  }\n\n  push(...values: T[]): number {\n    // Case 1: No values\n    const N = values.length;\n    if (N <= 0) {\n      return this._size;\n    }\n\n    // Case 2: Zero capacity\n    const capacity = this._capacity;\n    if (capacity <= 0) {\n      this.emitter.emit(BoundedEvent.Overflow, values);\n      return this._size;\n    }\n\n    // Add values\n    this.append(this.root.prev!, values);\n\n    // Return size\n    return this._size;\n  }\n\n  set(index: number, value: T): T | undefined {\n    // Check index\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return undefined;\n    }\n\n    // Update node\n    const node = this.get(index);\n    const prevValue = node.value;\n    node.value = value;\n\n    // Return previous value\n    return prevValue;\n  }\n\n  shift(): T | undefined {\n    // Check if empty\n    if (this._size <= 0) {\n      return undefined;\n    }\n\n    // Remove head\n    const head = this.root.next!;\n    head.prev!.next = head.next;\n    head.next!.prev = head.prev;\n    --this._size;\n\n    // Return value\n    return head.value;\n  }\n\n  slice(start?: number, end?: number): CircularDoublyLinkedList<T> {\n    const out = new CircularDoublyLinkedList<T>();\n\n    // Check if empty\n    if (this._size <= 0) {\n      return out;\n    }\n\n    // Sanitize start\n    start = toInteger(start, 0);\n    start = clamp(addIfBelow(start, this._size), 0, this._size);\n\n    // Sanitize end\n    end = toInteger(end, this._size);\n    end = clamp(addIfBelow(end, this._size), 0, this._size);\n\n    // Add values to output\n    let prev = this.get(start - 1);\n    while (start < end) {\n      prev = prev.next!;\n      out.push(prev.value);\n      ++start;\n    }\n\n    // Return new list\n    return out;\n  }\n\n  splice(\n    start: number,\n    deleteCount?: number,\n    ...items: T[]\n  ): CircularDoublyLinkedList<T> {\n    const out = new CircularDoublyLinkedList<T>();\n\n    // Sanitize start\n    start = toInteger(start, 0);\n    start = clamp(addIfBelow(start, this._size), 0, this._size);\n\n    // Sanitize deleteCount\n    deleteCount = toInteger(deleteCount, 0);\n    deleteCount = clamp(deleteCount, 0, this._size - start);\n\n    // Get prev node\n    const prev = this.get(start - 1);\n\n    // Delete values\n    if (deleteCount > 0) {\n      const [head, tail] = cut(prev, deleteCount);\n      this._size -= deleteCount;\n      head!.prev = out.root;\n      tail!.next = out.root;\n      out.root.next = head;\n      out.root.prev = tail;\n      out._size = deleteCount;\n    }\n\n    // Add values\n    this.append(prev, items);\n    return out;\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return values(this.root.next, this.root);\n  }\n\n  unshift(...values: T[]): number {\n    // Case 1: No values\n    const N = values.length;\n    if (N <= 0) {\n      return this._size;\n    }\n\n    // Case 2: Zero capacity\n    const capacity = this._capacity;\n    if (capacity <= 0) {\n      this.emitter.emit(BoundedEvent.Overflow, values);\n      return this._size;\n    }\n\n    // Add values\n    this.prepend(this.root.next!, values);\n\n    // Return size\n    return this._size;\n  }\n\n  values(): IterableIterator<T> {\n    return values(this.root.next, this.root);\n  }\n\n  /**\n   * @internal\n   */\n  protected append(tail: Node<T>, values: T[]): Node<T> {\n    const root = this.root;\n    const next = tail.next!;\n    const evicted: T[] = [];\n    const capacity = this._capacity;\n\n    // Add values\n    let size = this._size;\n    const N = values.length;\n    for (let i = 0; i < N; ++i) {\n      const curr = { prev: tail, value: values[i] } as Node<T>;\n      tail.next = curr;\n      tail = curr;\n      if (size < capacity) {\n        ++size;\n      } else {\n        evicted.push(root.next!.value);\n        root.next = root.next!.next;\n      }\n    }\n    tail.next = next;\n    next.prev = tail;\n    root.next!.prev = root;\n\n    // Emit evicted items\n    if (evicted.length > 0) {\n      this.emitter.emit(BoundedEvent.Overflow, evicted);\n    }\n\n    // Update size\n    this._size = size;\n\n    // Return last node\n    return tail;\n  }\n\n  /**\n   * @internal\n   */\n  protected get(index: number): Node<T> {\n    index -= index <= this._size / 2 ? -1 : this._size;\n    return get(this.root, index)!;\n  }\n\n  /**\n   * @internal\n   */\n  protected prepend(next: Node<T>, values: T[]): Node<T> {\n    const root = this.root;\n    const prev = next.prev!;\n    const evicted: T[] = [];\n    const capacity = this._capacity;\n\n    // Add values\n    let size = this._size;\n    for (let i = values.length - 1; i >= 0; --i) {\n      const curr = { next, value: values[i] } as Node<T>;\n      next.prev = curr;\n      next = curr;\n      if (size < capacity) {\n        ++size;\n      } else {\n        evicted.push(root.prev!.value);\n        root.prev = root.prev!.prev;\n      }\n    }\n    next.prev = prev;\n    prev.next = next;\n    root.prev!.next = root;\n\n    // Emit evicted items\n    if (evicted.length > 0) {\n      this.emitter.emit(BoundedEvent.Overflow, evicted.reverse());\n    }\n\n    // Update size\n    this._size = size;\n\n    // Return last node\n    return next;\n  }\n}\n","import { BoundedEvent } from \"../types/boundedEvent\";\nimport { Bounded } from \"../types/bounded\";\nimport { Deque } from \"../types/deque\";\n\nimport { CircularDoublyLinkedList } from \"./circularDoublyLinkedList\";\n\n/**\n * A circular deque is similar to a traditional deque, but uses a fixed-size,\n * circular buffer. When the deque reaches its maximum capacity and a new\n * element is added, the oldest is discarded, thus maintaining its size.\n *\n * This structure efficiently utilizes memory for applications where only the\n * most recent additions are of interest and older data can be discarded.\n *\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularLinkedDeque<T> implements Bounded<T>, Deque<T> {\n  /**\n   * @internal\n   */\n  protected list: CircularDoublyLinkedList<T>;\n\n  /**\n   * Creates a new stack with `capacity` defaulted to `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new stack with the given capacity.\n   *\n   * @param capacity - the stack's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new stack. Initial capacity is the number of items given.\n   *\n   * @param items - the values to store in the stack.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    this.list = new CircularDoublyLinkedList(capacity as number);\n  }\n\n  get capacity(): number {\n    return this.list.capacity;\n  }\n\n  get size(): number {\n    return this.list.size;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return CircularLinkedDeque.name;\n  }\n\n  set capacity(capacity: number) {\n    this.list.capacity = capacity;\n  }\n\n  first(): T | undefined {\n    return this.list.at(0);\n  }\n\n  front(): T | undefined {\n    return this.list.at(0);\n  }\n\n  clear(): void {\n    this.list.clear();\n  }\n\n  entries(): IterableIterator<[number, T]> {\n    return this.list.entries();\n  }\n\n  forEach(\n    callbackfn: (value: T, index: number, collection: this) => void,\n    thisArg?: unknown\n  ): void {\n    this.list.forEach((v, i) => callbackfn.call(thisArg, v, i, this), thisArg);\n  }\n\n  has(value: T): boolean {\n    return this.list.has(value);\n  }\n\n  keys(): IterableIterator<number> {\n    return this.list.keys();\n  }\n\n  last(): T | undefined {\n    return this.list.at(-1);\n  }\n\n  pop(): T | undefined {\n    return this.list.pop();\n  }\n\n  push(...elems: T[]): number {\n    return this.list.push(...elems);\n  }\n\n  shift(): T | undefined {\n    return this.list.shift();\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.values();\n  }\n\n  top(): T | undefined {\n    return this.list.at(-1);\n  }\n\n  unshift(...elems: T[]): number {\n    return this.list.unshift(...elems);\n  }\n\n  values(): IterableIterator<T> {\n    return this.list.values();\n  }\n\n  addListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.addListener(event, listener);\n    return this;\n  }\n\n  on(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.on(event, listener);\n    return this;\n  }\n\n  prependListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.prependListener(event, listener);\n    return this;\n  }\n\n  removeListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.removeListener(event, listener);\n    return this;\n  }\n}\n","import { Bounded, BoundedEvent } from \"..\";\nimport { LinkedNode as Node } from \"../types/linkedNode\";\nimport { List } from \"../types/list\";\nimport { isInfinity, isNumber, isSafeCount } from \"../utils/is\";\nimport {\n  cut,\n  entries,\n  get,\n  has,\n  keys,\n  toArray,\n  toList,\n  values,\n} from \"../utils/linkedNode\";\nimport { addIfBelow, clamp, isInRange, toInteger } from \"../utils/math\";\nimport { CircularBase } from \"./circularBase\";\n\nexport class CircularLinkedList<T>\n  extends CircularBase<T>\n  implements Bounded<T>, List<T>\n{\n  /**\n   * The maximum number of elements that can be stored in the collection.\n   * @internal\n   */\n  protected _capacity: number;\n\n  /**\n   * The root of the linked list\n   * @internal\n   */\n  protected root: Node<T>;\n\n  /**\n   * The current size of the list (0 \\<= size \\<= capacity)\n   * @internal\n   */\n  protected _size!: number;\n\n  /**\n   * The last node in the linked list.\n   * @internal\n   */\n  protected tail!: Node<T>;\n\n  /**\n   * Creates a standard linked list (no capacity restriction).\n   */\n  constructor();\n  /**\n   * Creates a linked list with the given capacity.\n   *\n   * @param capacity - the list's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a linked list with the given items. Capacity is set to the number of items.\n   *\n   * @param items - the values to store in the list.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    super();\n\n    // Initialize class variables\n    this._capacity = Infinity;\n    this.root = { value: undefined } as Node<T>;\n    this.clear();\n\n    // Case 1: capacity is null, undefined or Infinity\n    capacity = capacity ?? Infinity;\n    if (isInfinity(capacity)) {\n      return;\n    }\n\n    // Case 2: capacity is zero or a positive safe integer\n    if (isNumber(capacity)) {\n      if (!isSafeCount(capacity)) {\n        throw new RangeError(\"Invalid capacity\");\n      }\n      this._capacity = capacity;\n      return;\n    }\n\n    // Case 3: capacity is iterable\n    const [head, tail, size] = toList(capacity as Iterable<T>);\n    this._capacity = size;\n    if (size > 0) {\n      this.root.next = head;\n      this.tail = tail!;\n      this._size = size;\n    }\n  }\n\n  get capacity(): number {\n    return this._capacity;\n  }\n\n  get size(): number {\n    return this._size;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return CircularLinkedList.name;\n  }\n\n  set capacity(capacity: number) {\n    // Convert input to a number\n    capacity = +capacity;\n\n    // If input is NaN, below zero, or a non-integer\n    if (!isInfinity(capacity) && !isSafeCount(capacity)) {\n      throw new RangeError(\"Invalid capacity\");\n    }\n\n    // Update capacity\n    this._capacity = capacity;\n\n    // If current size fits within new capacity\n    if (this._size <= capacity) {\n      return;\n    }\n\n    // Shrink\n    const diff = this._size - capacity;\n    const [head] = cut(this.root, diff);\n    this._size -= diff;\n\n    // Update tail, if needed\n    if (this._size <= 0) {\n      this.tail = this.root;\n    }\n\n    // Emit discarded items\n    this.emitter.emit(BoundedEvent.Overflow, toArray(head));\n  }\n\n  at(index?: number): T | undefined {\n    // Check index\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return undefined;\n    }\n\n    // If tail\n    if (++index == this._size) {\n      return this.tail.value;\n    }\n\n    // Return value\n    return get(this.root, index)!.value;\n  }\n\n  clear(): void {\n    this._size = 0;\n    this.root.next = undefined;\n    this.tail = this.root;\n  }\n\n  delete(index: number): boolean {\n    // Check index\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return false;\n    }\n\n    // Delete value\n    const prev = get(this.root, index)!;\n    prev.next = prev.next!.next;\n    --this._size;\n\n    // Update tail, if needed\n    if (index == this._size) {\n      this.tail = prev;\n    }\n\n    return true;\n  }\n\n  entries(): IterableIterator<[number, T]> {\n    return entries(this.root.next);\n  }\n\n  fill(value: T, start?: number, end?: number): this {\n    // Sanitize start\n    start = toInteger(start, 0);\n    start = clamp(addIfBelow(start, this._size), 0, this._size);\n\n    // Sanitize end\n    end = toInteger(end, this._size);\n    end = clamp(addIfBelow(end, this._size), 0, this._size);\n\n    // Update values\n    let node = get(this.root, start + 1);\n    while (start < end) {\n      node!.value = value;\n      node = node!.next;\n      ++start;\n    }\n\n    return this;\n  }\n\n  forEach(\n    callbackfn: (value: T, index: number, list: this) => void,\n    thisArg?: unknown\n  ): void {\n    let node = this.root;\n    for (let i = 0; i < this._size; ++i) {\n      node = node.next!;\n      callbackfn.call(thisArg, node.value, i, this);\n    }\n  }\n\n  has(value: T): boolean {\n    return has(this.root.next, value);\n  }\n\n  keys(): IterableIterator<number> {\n    return keys(this.root.next);\n  }\n\n  pop(): T | undefined {\n    // Check if empty\n    if (this._size <= 0) {\n      return undefined;\n    }\n\n    // Remove and update tail\n    const value = this.tail.value;\n    this.tail = get(this.root, --this._size)!;\n    this.tail.next = undefined;\n\n    // Return value\n    return value;\n  }\n\n  push(...values: T[]): number {\n    // If no values\n    const N = values.length;\n    if (N <= 0) {\n      return this._size;\n    }\n\n    // If no capacity\n    const capacity = this._capacity;\n    if (capacity <= 0) {\n      this.emitter.emit(BoundedEvent.Overflow, values);\n      return this._size;\n    }\n\n    // Add values\n    this.tail = this.append(this.tail, values);\n\n    // Return size\n    return this._size;\n  }\n\n  set(index: number, value: T): T | undefined {\n    // Check index\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return undefined;\n    }\n\n    // Update node\n    const node = get(this.root, index + 1)!;\n    const prevValue = node.value;\n    node.value = value;\n\n    // Return previous value\n    return prevValue;\n  }\n\n  shift(): T | undefined {\n    // Check if empty\n    if (this._size <= 0) {\n      return undefined;\n    }\n\n    // Remove head\n    const head = this.root.next!;\n    this.root.next = head.next;\n    --this._size;\n\n    // Update tail, if needed\n    if (this._size <= 0) {\n      this.tail = this.root;\n    }\n\n    // Return value\n    return head.value;\n  }\n\n  slice(start?: number, end?: number): CircularLinkedList<T> {\n    const out = new CircularLinkedList<T>();\n\n    // Check if empty\n    if (this._size <= 0) {\n      return out;\n    }\n\n    // Sanitize start\n    start = toInteger(start, 0);\n    start = clamp(addIfBelow(start, this._size), 0, this._size);\n\n    // Sanitize end\n    end = toInteger(end, this._size);\n    end = clamp(addIfBelow(end, this._size), 0, this._size);\n\n    // Add values to output\n    let node = get(this.root, start)!;\n    while (start < end) {\n      node = node.next!;\n      out.push(node.value);\n      ++start;\n    }\n\n    // Return new list\n    return out;\n  }\n\n  splice(\n    start: number,\n    deleteCount?: number,\n    ...items: T[]\n  ): CircularLinkedList<T> {\n    const out = new CircularLinkedList<T>();\n\n    // Sanitize start\n    start = toInteger(start, 0);\n    start = clamp(addIfBelow(start, this._size), 0, this._size);\n\n    // Sanitize deleteCount\n    deleteCount = toInteger(deleteCount, 0);\n    deleteCount = clamp(deleteCount, 0, this._size - start);\n\n    // Get prev node\n    let prev = get(this.root, start)!;\n\n    // Delete values\n    if (deleteCount > 0) {\n      const [head, tail] = cut(prev, deleteCount);\n      this._size -= deleteCount;\n      out.root.next = head;\n      out.tail = tail!;\n      out._size = deleteCount;\n    }\n\n    // Add values\n    prev = this.append(prev, items);\n\n    // Update tail, if needed\n    if (prev.next == null) {\n      this.tail = prev;\n    }\n\n    return out;\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return values(this.root.next);\n  }\n\n  unshift(...values: T[]): number {\n    // Case 1: No values\n    let N = values.length;\n    if (N <= 0) {\n      return this._size;\n    }\n\n    // Case 2: No capacity\n    const capacity = this._capacity;\n    if (capacity <= 0) {\n      this.emitter.emit(BoundedEvent.Overflow, values);\n      return this._size;\n    }\n\n    // Reduce input\n    const diff = N <= capacity ? 0 : N - capacity;\n    N -= diff;\n\n    // Case 3: Discard list overflow\n    if (this._size + N > capacity) {\n      this._size = capacity - N;\n      const prev = get(this.root, this._size)!;\n      this.emitter.emit(BoundedEvent.Overflow, toArray(prev.next));\n      prev.next = undefined;\n      this.tail = prev;\n    }\n\n    // Discard input overflow\n    if (diff > 0) {\n      this.emitter.emit(BoundedEvent.Overflow, values.slice(N));\n      values.length = N;\n    }\n\n    // Add values\n    const [head, tail] = toList(values);\n    tail!.next = this.root.next;\n    this.root.next = head;\n\n    // Update tail, if needed\n    if (this._size <= 0) {\n      this.tail = tail!;\n    }\n\n    // Update size\n    this._size += N;\n    return this._size;\n  }\n\n  values(): IterableIterator<T> {\n    return values(this.root.next);\n  }\n\n  /**\n   * @internal\n   */\n  protected append(tail: Node<T>, values: T[], minIndex = 0): Node<T> {\n    const root = this.root;\n    const next = tail.next;\n    const evicted: T[] = [];\n    const capacity = this._capacity;\n\n    // Add values\n    let size = this._size;\n    const N = values.length;\n    for (let i = minIndex; i < N; ++i) {\n      const curr = { value: values[i] } as Node<T>;\n      tail.next = curr;\n      tail = curr;\n      if (size < capacity) {\n        ++size;\n      } else {\n        evicted.push(root.next!.value);\n        root.next = root.next!.next;\n      }\n    }\n    tail.next = next;\n\n    // Emit evicted items\n    if (evicted.length > 0) {\n      this.emitter.emit(BoundedEvent.Overflow, evicted);\n    }\n\n    // Update size\n    this._size = size;\n\n    // Return last node\n    return tail;\n  }\n}\n","import { Queue } from \"../types/queue\";\nimport { Bounded } from \"../types/bounded\";\n\nimport { CircularLinkedList } from \"./circularLinkedList\";\nimport { BoundedEvent } from \"..\";\n\n/**\n * A circular queue is similar to a traditional queue, but uses a fixed-size,\n * circular buffer. When the queue reaches its maximum capacity and a new\n * element is added, the oldest is discarded, thus maintaining its size.\n *\n * This structure efficiently utilizes memory for applications where only the\n * most recent additions are of interest and older data can be discarded.\n *\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularLinkedQueue<T> implements Bounded<T>, Queue<T> {\n  /**\n   * @internal\n   */\n  protected list: CircularLinkedList<T>;\n\n  /**\n   * Creates a new stack with `capacity` defaulted to `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new stack with the given capacity.\n   *\n   * @param capacity - the stack's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new stack. Initial capacity is the number of items given.\n   *\n   * @param items - the values to store in the stack.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    this.list = new CircularLinkedList(capacity as number);\n  }\n\n  get capacity(): number {\n    return this.list.capacity;\n  }\n\n  get size(): number {\n    return this.list.size;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return CircularLinkedQueue.name;\n  }\n\n  set capacity(capacity: number) {\n    this.list.capacity = capacity;\n  }\n\n  clear(): void {\n    this.list.clear();\n  }\n\n  entries(): IterableIterator<[number, T]> {\n    return this.list.entries();\n  }\n\n  first(): T | undefined {\n    return this.list.at(0);\n  }\n\n  forEach(\n    callbackfn: (value: T, index: number, collection: this) => void,\n    thisArg?: unknown\n  ): void {\n    this.list.forEach((v, i) => callbackfn.call(thisArg, v, i, this), thisArg);\n  }\n\n  front(): T | undefined {\n    return this.list.at(0);\n  }\n\n  has(value: T): boolean {\n    return this.list.has(value);\n  }\n\n  keys(): IterableIterator<number> {\n    return this.list.keys();\n  }\n\n  push(...elems: T[]): number {\n    return this.list.push(...elems);\n  }\n\n  shift(): T | undefined {\n    return this.list.shift();\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.values();\n  }\n\n  values(): IterableIterator<T> {\n    return this.list.values();\n  }\n\n  addListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.addListener(event, listener);\n    return this;\n  }\n\n  on(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.on(event, listener);\n    return this;\n  }\n\n  prependListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.prependListener(event, listener);\n    return this;\n  }\n\n  removeListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.removeListener(event, listener);\n    return this;\n  }\n}\n","import { Stack } from \"../types/stack\";\nimport { Bounded } from \"../types/bounded\";\nimport { BoundedEvent, CircularDoublyLinkedList } from \"..\";\n\n/**\n * A circular stack is similar to a traditional stack, but uses a fixed-size,\n * circular buffer. When the stack reaches its maximum capacity and a new\n * element is added, the oldest is discarded, thus maintaining its size.\n *\n * This structure efficiently utilizes memory for applications where only the\n * most recent additions are of interest and older data can be discarded.\n *\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularLinkedStack<T> implements Bounded<T>, Stack<T> {\n  /**\n   * @internal\n   */\n  protected list: CircularDoublyLinkedList<T>;\n\n  /**\n   * Creates a new stack with `capacity` defaulted to `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new stack with the given capacity.\n   *\n   * @param capacity - the stack's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new stack. Initial capacity is the number of items given.\n   *\n   * @param items - the values to store in the stack.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    this.list = new CircularDoublyLinkedList(capacity as number);\n  }\n\n  get capacity(): number {\n    return this.list.capacity;\n  }\n\n  get size(): number {\n    return this.list.size;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return CircularLinkedStack.name;\n  }\n\n  set capacity(capacity: number) {\n    this.list.capacity = capacity;\n  }\n\n  clear(): void {\n    this.list.clear();\n  }\n\n  entries(): IterableIterator<[number, T]> {\n    return this.list.entries();\n  }\n\n  forEach(\n    callbackfn: (value: T, index: number, collection: this) => void,\n    thisArg?: unknown\n  ): void {\n    this.list.forEach((v, i) => callbackfn.call(thisArg, v, i, this), thisArg);\n  }\n\n  has(value: T): boolean {\n    return this.list.has(value);\n  }\n\n  keys(): IterableIterator<number> {\n    return this.list.keys();\n  }\n\n  last(): T | undefined {\n    return this.list.at(-1);\n  }\n\n  pop(): T | undefined {\n    return this.list.pop();\n  }\n\n  push(...elems: T[]): number {\n    return this.list.push(...elems);\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.values();\n  }\n\n  top(): T | undefined {\n    return this.list.at(-1);\n  }\n\n  values(): IterableIterator<T> {\n    return this.list.values();\n  }\n\n  addListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.addListener(event, listener);\n    return this;\n  }\n\n  on(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.on(event, listener);\n    return this;\n  }\n\n  prependListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.prependListener(event, listener);\n    return this;\n  }\n\n  removeListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.removeListener(event, listener);\n    return this;\n  }\n}\n","import { Bounded } from \"../types/bounded\";\nimport { BoundedEvent } from \"../types/boundedEvent\";\nimport { Collection } from \"../types/collection\";\nimport { isInfinity, isNumber, isSafeCount } from \"../utils/is\";\n\nimport { CircularBase } from \"./circularBase\";\n\n/**\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularMap<K, V>\n  extends CircularBase<[K, V]>\n  implements Bounded<[K, V]>, Map<K, V>, Collection<K, V>\n{\n  /**\n   * The maximum number of elements that can be stored in the collection.\n   * @internal\n   */\n  protected _capacity: number;\n\n  /**\n   * The internal map.\n   * @internal\n   */\n  protected map: Map<K, V>;\n\n  /**\n   * Creates a new map with `capacity` defaulted to `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new map with the given capacity.\n   *\n   * @param capacity - the map's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new map. Initial capacity is the number of unique items given.\n   *\n   * @param items - the values to store in the map.\n   */\n  constructor(items: Iterable<[K, V]>);\n  constructor(capacity?: number | null | Iterable<[K, V]>) {\n    super();\n\n    // Initialize class variables\n    this._capacity = Infinity;\n    this.map = new Map();\n\n    // Case 1: capacity is null, undefined or Infinity\n    capacity = capacity ?? Infinity;\n    if (isInfinity(capacity)) {\n      return;\n    }\n\n    // Case 2: capacity is zero or a safe positive integer\n    if (isNumber(capacity)) {\n      if (!isSafeCount(capacity)) {\n        throw new RangeError(\"Invalid capacity\");\n      }\n      this._capacity = capacity;\n      return;\n    }\n\n    // Case 3: capacity is iterable\n    this.map = new Map(capacity as Iterable<[K, V]>);\n    this._capacity = this.map.size;\n  }\n\n  /**\n   * @returns the maximum number of elements that can be stored.\n   */\n  get capacity(): number {\n    return this._capacity;\n  }\n\n  /**\n   * @returns the number of values in the map.\n   */\n  get size(): number {\n    return this.map.size;\n  }\n\n  /**\n   * Return the type of the object.\n   */\n  get [Symbol.toStringTag](): string {\n    return CircularMap.name;\n  }\n\n  /**\n   * The maximum number of elements that can be stored in the map.\n   */\n  set capacity(capacity: number) {\n    // Convert input to a number\n    capacity = +capacity;\n\n    // Check if input is valid\n    if (!isInfinity(capacity) && !isSafeCount(capacity)) {\n      throw new RangeError(\"Invalid capacity\");\n    }\n\n    // Check if capacity is changing\n    if (capacity === this._capacity) {\n      return;\n    }\n\n    // Update capacity\n    this._capacity = capacity;\n\n    // Check if size is within capacity\n    if (this.size <= capacity) {\n      return;\n    }\n\n    // Check if new capacity is zero\n    if (capacity === 0) {\n      const evicted = Array.from(this.map);\n      this.clear();\n      this.emitter.emit(BoundedEvent.Overflow, evicted);\n      return;\n    }\n\n    // Shrink down map.\n    const evicted: [K, V][] = [];\n    const iter = this.map.entries();\n    for (let n = this.size - capacity; n > 0; --n) {\n      const entry = iter.next().value;\n      this.map.delete(entry[0]);\n      evicted.push(entry);\n    }\n    this.emitter.emit(BoundedEvent.Overflow, evicted);\n  }\n\n  /**\n   * Removes all elements from the map.\n   */\n  clear(): void {\n    this.map.clear();\n  }\n\n  /**\n   * Deletes a specified value from the map.\n   *\n   * @returns `true` if the value existed in the map and has been removed, or `false` otherwise.\n   */\n  delete(key: K): boolean {\n    return this.map.delete(key);\n  }\n\n  /**\n   * Iterate through the map's entries.\n   *\n   * **Note:** Modifying the map during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of [key, value] pairs for every entry.\n   */\n  entries(): IterableIterator<[K, V]> {\n    return this.map.entries();\n  }\n\n  /**\n   * Performs the specified action for each value in the map.\n   *\n   * **Note:** Modifying the map during iteration may cause unexpected behavior.\n   *\n   * @param callbackfn - A function that accepts up to three arguments. It is called once per value.\n   * @param thisArg - An object to which the `this` keyword refers to in the `callbackfn` function. Defaults to `undefined`.\n   */\n  forEach(\n    callbackfn: (value: V, key: K, map: this) => void,\n    thisArg?: unknown\n  ): void {\n    for (const [key, value] of this.map.entries()) {\n      callbackfn.call(thisArg, value, key, this);\n    }\n  }\n\n  /**\n   * Returns the associated value of the given key from the map.\n   *\n   * If the associated value is an object, then you will get a reference to that object; any change made to the object will effectively modify it inside the map.\n   *\n   * @returns the value associated with the specified key, or `undefined` if no value is associated.\n   */\n  get(key: K): V | undefined {\n    return this.map.get(key);\n  }\n\n  /**\n   * Determines whether a given value is in the map.\n   *\n   * @param key - The key to search for.\n   *\n   * @returns `true` if the value was found, `false` otherwise.\n   */\n  has(key: K): boolean {\n    return this.map.has(key);\n  }\n\n  /**\n   * Iterate through the map's keys.\n   *\n   * **Note:** Modifying the map during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of the map's keys.\n   */\n  keys(): IterableIterator<K> {\n    return this.map.keys();\n  }\n\n  /**\n   * Sets the specified key-value pair in the map.\n   *\n   * @param key - the key to add\n   * @param value - the key's value.\n   */\n  set(key: K, value: V): this {\n    // Base case: map has no capacity.\n    if (this.capacity < 1) {\n      this.emitter.emit(BoundedEvent.Overflow, [[key, value]]);\n      return this;\n    }\n\n    // Evict excess items\n    const evicted: [K, V][] = [];\n    if (!this.map.delete(key) && this.size >= this.capacity) {\n      const entry = this.map.entries().next().value;\n      this.map.delete(entry[0]);\n      evicted.push(entry);\n    }\n\n    // Add value\n    this.map.set(key, value);\n\n    // Emit evicted\n    if (evicted.length > 0) {\n      this.emitter.emit(BoundedEvent.Overflow, evicted);\n    }\n\n    return this;\n  }\n\n  /**\n   * Iterate through the map's values.\n   *\n   * **Note:** Modifying the map during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of values.\n   */\n  [Symbol.iterator](): IterableIterator<[K, V]> {\n    return this.map.entries();\n  }\n\n  /**\n   * Iterate through the map's values.\n   *\n   * **Note:** Modifying the map during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of the map's values.\n   */\n  values(): IterableIterator<V> {\n    return this.map.values();\n  }\n}\n","import { BoundedEvent } from \"../types/boundedEvent\";\nimport { Queue } from \"../types/queue\";\nimport { Bounded } from \"../types/bounded\";\nimport { CircularArrayList } from \"./circularArrayList\";\n\n/**\n * A circular queue is similar to a traditional queue, but uses a fixed-size,\n * circular buffer. When the queue reaches its maximum capacity and a new\n * element is added, the oldest is discarded, thus maintaining its size.\n *\n * This structure efficiently utilizes memory for applications where only the\n * most recent additions are of interest and older data can be discarded.\n *\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularQueue<T> implements Bounded<T>, Queue<T> {\n  /**\n   * @internal\n   */\n  protected list: CircularArrayList<T>;\n\n  /**\n   * Creates a new queue. Default `capacity` is `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new queue with the given capacity.\n   *\n   * @param capacity - the queue's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new queue from the given items. `capacity` will equal the number of items.\n   *\n   * @param items - the initial values in the queue.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    this.list = new CircularArrayList(capacity as number);\n  }\n\n  get capacity(): number {\n    return this.list.capacity;\n  }\n\n  get size(): number {\n    return this.list.size;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return CircularQueue.name;\n  }\n\n  set capacity(capacity: number) {\n    this.list.capacity = capacity;\n  }\n\n  clear(): void {\n    this.list.clear();\n  }\n\n  entries(): IterableIterator<[number, T]> {\n    return this.list.entries();\n  }\n\n  first(): T | undefined {\n    return this.list.first();\n  }\n\n  forEach(\n    callbackfn: (value: T, index: number, collection: this) => void,\n    thisArg?: unknown\n  ): void {\n    return this.list.forEach((v, i) => callbackfn.call(thisArg, v, i, this));\n  }\n\n  front(): T | undefined {\n    return this.list.first();\n  }\n\n  has(value: T): boolean {\n    return this.list.has(value);\n  }\n\n  keys(): IterableIterator<number> {\n    return this.list.keys();\n  }\n\n  push(...elems: T[]): number {\n    return this.list.push(...elems);\n  }\n\n  shift(): T | undefined {\n    return this.list.shift();\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.list.values();\n  }\n\n  values(): IterableIterator<T> {\n    return this.list.values();\n  }\n\n  addListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.addListener(event, listener);\n    return this;\n  }\n\n  on(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.on(event, listener);\n    return this;\n  }\n\n  prependListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.prependListener(event, listener);\n    return this;\n  }\n\n  removeListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.removeListener(event, listener);\n    return this;\n  }\n}\n","import { Bounded } from \"../types/bounded\";\nimport { BoundedEvent } from \"../types/boundedEvent\";\nimport { Collection } from \"../types/collection\";\nimport { isInfinity, isNumber, isSafeCount } from \"../utils/is\";\n\nimport { CircularBase } from \"./circularBase\";\n\n/**\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularSet<T>\n  extends CircularBase<T>\n  implements Bounded<T>, Set<T>, Collection<T, T>\n{\n  /**\n   * The maximum number of elements that can be stored in the collection.\n   * @internal\n   */\n  protected _capacity: number;\n\n  /**\n   * The internal set.\n   * @internal\n   */\n  protected set: Set<T>;\n\n  /**\n   * Creates a new set with `capacity` defaulted to `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new set with the given capacity.\n   *\n   * @param capacity - the set's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new set. Initial capacity is the number of unique items given.\n   *\n   * @param items - the values to store in the set.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    super();\n\n    // Initialize class variables\n    this._capacity = Infinity;\n    this.set = new Set();\n\n    // Case 1: capacity is null, undefined or Infinity\n    capacity = capacity ?? Infinity;\n    if (isInfinity(capacity)) {\n      return;\n    }\n\n    // Case 2: capacity is zero or a safe positive integer\n    if (isNumber(capacity)) {\n      if (!isSafeCount(capacity)) {\n        throw new RangeError(\"Invalid capacity\");\n      }\n      this._capacity = capacity;\n      return;\n    }\n\n    // Case 3: capacity is iterable\n    this.set = new Set(capacity as Iterable<T>);\n    this._capacity = this.set.size;\n  }\n\n  /**\n   * @returns the maximum number of elements that can be stored.\n   */\n  get capacity(): number {\n    return this._capacity;\n  }\n\n  /**\n   * @returns the number of values in the set.\n   */\n  get size(): number {\n    return this.set.size;\n  }\n\n  /**\n   * Return the type of the object.\n   */\n  get [Symbol.toStringTag](): string {\n    return CircularSet.name;\n  }\n\n  /**\n   * The maximum number of elements that can be stored in the set.\n   */\n  set capacity(capacity: number) {\n    // Convert input to a number\n    capacity = +capacity;\n\n    // Check if input is valid\n    if (!isInfinity(capacity) && !isSafeCount(capacity)) {\n      throw new RangeError(\"Invalid capacity\");\n    }\n\n    // Check if capacity is changing\n    if (capacity === this._capacity) {\n      return;\n    }\n\n    // Update capacity\n    this._capacity = capacity;\n\n    // Check if set is within capacity\n    if (this.size <= capacity) {\n      return;\n    }\n\n    // Check if new capacity is zero\n    if (capacity === 0) {\n      const evicted = Array.from(this.set);\n      this.clear();\n      this.emitter.emit(BoundedEvent.Overflow, evicted);\n      return;\n    }\n\n    // Shrink down map.\n    const evicted: T[] = [];\n    const iter = this.set.values();\n    for (let n = this.size - capacity; n > 0; --n) {\n      const value = iter.next().value;\n      this.set.delete(value);\n      evicted.push(value);\n    }\n    this.emitter.emit(BoundedEvent.Overflow, evicted);\n  }\n\n  /**\n   * Adds the specified value to the set.\n   *\n   * @param value - the value to add.\n   */\n  add(value: T): this {\n    // Base case: set has no capacity.\n    if (this.capacity < 1) {\n      this.emitter.emit(BoundedEvent.Overflow, [value]);\n      return this;\n    }\n\n    // Evict excess items\n    const evicted: T[] = [];\n    if (!this.set.delete(value) && this.size >= this.capacity) {\n      const out = this.set.values().next().value;\n      this.set.delete(out);\n      evicted.push(out);\n    }\n\n    // Add value\n    this.set.add(value);\n\n    // Emit evicted\n    if (evicted.length > 0) {\n      this.emitter.emit(BoundedEvent.Overflow, evicted);\n    }\n\n    return this;\n  }\n\n  /**\n   * Removes all elements from the set.\n   */\n  clear(): void {\n    this.set.clear();\n  }\n\n  /**\n   * Deletes a specified value from the set.\n   *\n   * @returns `true` if the value existed in the set and has been removed, or `false` otherwise.\n   */\n  delete(value: T): boolean {\n    return this.set.delete(value);\n  }\n\n  /**\n   * Iterate through the set's entries.\n   *\n   * **Note:** Modifying the set during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of [key, value] pairs for every entry.\n   */\n  entries(): IterableIterator<[T, T]> {\n    return this.set.entries();\n  }\n\n  /**\n   * Performs the specified action for each value in the set.\n   *\n   * **Note:** Modifying the set during iteration may cause unexpected behavior.\n   *\n   * @param callbackfn - A function that accepts up to three arguments. It is called once per value.\n   * @param thisArg - An object to which the `this` keyword refers to in the `callbackfn` function. Defaults to `undefined`.\n   */\n  forEach(\n    callbackfn: (value: T, key: T, set: this) => void,\n    thisArg?: unknown\n  ): void {\n    for (const key of this.set.keys()) {\n      callbackfn.call(thisArg, key, key, this);\n    }\n  }\n\n  /**\n   * Determines whether a given value is in the set.\n   *\n   * @param value - The value to search for.\n   *\n   * @returns `true` if the value was found, `false` otherwise.\n   */\n  has(value: T): boolean {\n    return this.set.has(value);\n  }\n\n  /**\n   * Iterate through the set's keys.\n   *\n   * **Note:** Modifying the set during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of the set's keys.\n   */\n  keys(): IterableIterator<T> {\n    return this.set.keys();\n  }\n\n  /**\n   * Iterate through the set's values.\n   *\n   * **Note:** Modifying the set during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of the set's values.\n   */\n  values(): IterableIterator<T> {\n    return this.set.keys();\n  }\n\n  /**\n   * Iterate through the set's values.\n   *\n   * **Note:** Modifying the set during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of values.\n   */\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.set.values();\n  }\n}\n","import { BoundedEvent } from \"../types/boundedEvent\";\nimport { Stack } from \"../types/stack\";\nimport { Bounded } from \"../types/bounded\";\nimport { CircularArrayList } from \"./circularArrayList\";\n\n/**\n * A circular stack is similar to a traditional stack, but uses a fixed-size,\n * circular buffer. When the stack reaches its maximum capacity and a new\n * element is added, the oldest is discarded, thus maintaining its size.\n *\n * This structure efficiently utilizes memory for applications where only the\n * most recent additions are of interest and older data can be discarded.\n *\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularStack<T> implements Bounded<T>, Stack<T> {\n  /**\n   * @internal\n   */\n  protected list: CircularArrayList<T>;\n\n  /**\n   * Creates a new stack. Default `capacity` is `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new stack with the given capacity.\n   *\n   * @param capacity - the stack's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new stack from the given items. `capacity` will equal the number of items.\n   *\n   * @param items - the initial values in the stack.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    this.list = new CircularArrayList(capacity as number);\n  }\n\n  get capacity(): number {\n    return this.list.capacity;\n  }\n\n  get size(): number {\n    return this.list.size;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return CircularStack.name;\n  }\n\n  set capacity(capacity: number) {\n    this.list.capacity = capacity;\n  }\n\n  clear(): void {\n    this.list.clear();\n  }\n\n  entries(): IterableIterator<[number, T]> {\n    return this.list.entries();\n  }\n\n  forEach(\n    callbackfn: (value: T, index: number, collection: this) => void,\n    thisArg?: unknown\n  ): void {\n    return this.list.forEach((v, i) => callbackfn.call(thisArg, v, i, this));\n  }\n\n  has(value: T): boolean {\n    return this.list.has(value);\n  }\n\n  keys(): IterableIterator<number> {\n    return this.list.keys();\n  }\n\n  last(): T | undefined {\n    return this.list.last();\n  }\n\n  pop(): T | undefined {\n    return this.list.pop();\n  }\n\n  push(...elems: T[]): number {\n    return this.list.push(...elems);\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.list.values();\n  }\n\n  top(): T | undefined {\n    return this.list.last();\n  }\n\n  values(): IterableIterator<T> {\n    return this.list.values();\n  }\n\n  addListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.addListener(event, listener);\n    return this;\n  }\n\n  on(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.on(event, listener);\n    return this;\n  }\n\n  prependListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.prependListener(event, listener);\n    return this;\n  }\n\n  removeListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.removeListener(event, listener);\n    return this;\n  }\n}\n"],"names":["values","cut","get","toList","singlyCut","singlyGet","evicted"],"mappings":"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"}