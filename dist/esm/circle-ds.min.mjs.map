{"version":3,"file":"circle-ds.min.mjs","sources":["../../src/types/boundedEvent.ts","../../node_modules/eventemitter3/index.js","../../src/collections/circularBase.ts","../../src/utils/constants.ts","../../src/utils/is.ts","../../src/utils/math.ts","../../src/utils/iterable.ts","../../src/collections/list/circularArrayList.ts","../../src/collections/deque/circularDeque.ts","../../src/utils/linkedNode.ts","../../src/utils/doublyLinkedNode.ts","../../src/collections/list/circularDoublyLinkedList.ts","../../src/collections/deque/circularLinkedDeque.ts","../../src/collections/list/circularLinkedList.ts","../../src/utils/skipList.ts","../../src/collections/list/circularSkipList.ts","../../src/collections/map/circularMap.ts","../../src/collections/queue/circularLinkedQueue.ts","../../src/collections/queue/circularQueue.ts","../../src/collections/set/circularSet.ts","../../src/collections/stack/circularLinkedStack.ts","../../src/collections/stack/circularStack.ts"],"sourcesContent":["/**\n * An enumeration of event types supported by {@link Bounded} collections.\n *\n * This object defines a set of constants representing event names that can\n * be emitted by instances of collections implementing the {@link Bounded} interface.\n * These events signify specific actions or changes in the state of the collection.\n *\n * Defined events include:\n * - `Overflow`: Indicates that the collection has reached its capacity, and\n *   as a result, one or more elements have been removed to accommodate new elements.\n *   This event is triggered during operations that add elements to the collection when\n *   it exceeds its capacity, or when capacity is updated below the collection's current\n *   size. Listeners attached to this event will receive an array of elements that were\n *   removed due to the overflow. Removed elements may be sent across 1 or more event\n *   instances.\n *\n * This object is marked as `const` to ensure that its properties are read-only,\n * preventing modification of event names which could lead to inconsistencies in\n * event handling across the application.\n */\nexport const BoundedEvent = {\n  Overflow: \"overflow\",\n} as const;\n","'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n","import { EventEmitter } from \"eventemitter3\";\n\nimport { BoundedEvent } from \"../types/boundedEvent\";\nimport { ValueOf } from \"../types/valueOf\";\n\nexport class CircularBase<T> {\n  /**\n   * @internal\n   * The event emitter.\n   *\n   */\n  protected _emitter: EventEmitter;\n\n  constructor(emitter = new EventEmitter()) {\n    this._emitter = emitter;\n  }\n\n  /**\n   * Appends the listener function to the listeners array for the\n   * {@link BoundedEvent.Overflow} event.\n   *\n   * * No checks are made to see if the listener has already been added.\n   * Multiple calls with the same of event + listener combination will\n   * result in the listener being added and called multiple times.\n   *\n   * @param event - The name of the event.\n   * @param listener - The callback function. It will\n   * receive an array of elements that have been removed due to overflow.\n   * This can happen when elements are added while the collection is at\n   * capacity, or when capacity is reduced below the current size.\n   *\n   * @returns the collection.\n   */\n  addListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this;\n  addListener(\n    event: ValueOf<typeof BoundedEvent>,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    listener: (...args: any[]) => void\n  ): this {\n    this._emitter.addListener(event, listener);\n    return this;\n  }\n\n  /**\n   * Appends the listener function to the listeners array for the\n   * {@link BoundedEvent.Overflow} event.\n   *\n   * * No checks are made to see if the listener has already been added.\n   * Multiple calls with the same of event + listener combination will\n   * result in the listener being added and called multiple times.\n   *\n   * @param event - The name of the event.\n   * @param listener - The callback function. It will\n   * receive an array of elements that have been removed due to overflow.\n   * This can happen when elements are added while the collection is at\n   * capacity, or when capacity is reduced below the current size.\n   *\n   * @returns the collection.\n   */\n  on(event: typeof BoundedEvent.Overflow, listener: (elems: T[]) => void): this;\n  on(\n    event: ValueOf<typeof BoundedEvent>,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    listener: (...args: any[]) => void\n  ): this {\n    this._emitter.on(event, listener);\n    return this;\n  }\n\n  /**\n   * Removes the specified listener from the listener array for the event.\n   *\n   * At most once instance of a listener will be removed. If a listener\n   * has been added multiple times for the same event, this method should\n   * be called once per instance.\n   *\n   * @param event - The name of the event.\n   * @param listener - The callback function.\n   *\n   * @returns the collection.\n   */\n  removeListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this;\n  removeListener(\n    event: ValueOf<typeof BoundedEvent>,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    listener: (...args: any[]) => void\n  ): this {\n    this._emitter.removeListener(event, listener);\n    return this;\n  }\n}\n","/**\n * The maximum number of arguments that can be passed to a function.\n *\n * While ECMAScript specifications do not explicitly limit the number of\n * function arguments, practical limits are imposed by JavaScript engine\n * implementations. Different engines can have different maximums, so a\n * conservative value is used to prevent runtime errors.\n *\n * For more details, see the\n * {@link https://262.ecma-international.org/14.0/#sec-list-and-record-specification-type | ECMAScript Specification},\n * section \"6.2.2 The List and Record Specification Types\".\n */\nexport const ARGS_MAX_LENGTH = 16383; // 2**14 - 1\n\n/**\n * The maximum length of an array.\n *\n * According to the ECMAScript specification, the length property of an array\n * is an unsigned 32-bit integer, so its range is 0 to 2**32 - 1, inclusive.\n * Beyond this, operations that modify the array length (e.g., `push`, `pop`,\n * `unshift`, `shift`) may fail or behave unexpectedly.\n *\n * For more details, see the\n * {@link https://262.ecma-international.org/14.0/#sec-arraycreate | ECMAScript Specification},\n * section \"10.4.2.2 ArrayCreate\".\n */\nexport const ARRAY_MAX_LENGTH = 4294967295; // 2**32 - 1\n\n/**\n * The maximum safe length for a linked structure.\n *\n * This constant is defined as the largest integer value that can be safely\n * represented in JavaScript (`Number.MAX_SAFE_INTEGER`), preventing integer\n * precision loss in length-related operations. Operations with values beyond\n * this number may not behave as expected due to limitations in JavaScript's\n * number representation.\n *\n * For more details, see the\n * {@link https://262.ecma-international.org/14.0/#sec-number.max_safe_integer | ECMAScript Specification},\n * section \"21.1.2.6 Number.MAX_SAFE_INTEGER\".\n */\nexport const LINKED_MAX_LENGTH = Number.MAX_SAFE_INTEGER; // 2**53 - 1\n","import { ARRAY_MAX_LENGTH, LINKED_MAX_LENGTH } from \"./constants\";\n\n/**\n * Checks if a given value is an integer within a valid array length range.\n *\n * This function is useful for validating array lengths before attempting operations\n * that could result in a `RangeError` due to invalid array size.\n *\n * @param value - The value to check.\n *\n * @returns `true` if the value is an integer within the `[0, ARRAY_MAX_LENGTH]` range, `false` otherwise.\n */\nexport function isArrayLength(value: unknown): value is number {\n  return (\n    Number.isInteger(value) &&\n    (value as number) >= 0 &&\n    (value as number) <= ARRAY_MAX_LENGTH\n  );\n}\n\n/**\n * Determines whether the provided value is a function.\n *\n * @param value - The value to check.\n *\n * @returns `true` if the value is a function, `false` otherwise.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isFunction(value: unknown): value is Function {\n  return typeof value === \"function\";\n}\n\n/**\n * Checks if a given value is positive infinity.\n *\n * @param value - The value to check.\n *\n * @returns `true` if the value is positive infinity, `false` otherwise.\n */\nexport function isInfinity(value: unknown): boolean {\n  return value === Number.POSITIVE_INFINITY;\n}\n\n/**\n * Determines whether the provided value is iterable.\n *\n * This is useful for determining if a value can be used\n * in a `for...of` loop or with spread syntax.\n *\n * @param value - The value to check.\n *\n * @returns `true` if the value implements the iterable protocol, `false` otherwise.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function isIterable(value: any): value is Iterable<unknown> {\n  return typeof value?.[Symbol.iterator] === \"function\";\n}\n\n/**\n * Checks if a given value is an integer within a valid linked length range.\n *\n * This function is useful for validating linked lengths before attempting operations\n * that could result in a `RangeError` due to invalid linked list size.\n *\n * @param value - The value to check.\n *\n * @returns `true` if the value is an integer within the `[0, LINKED_MAX_LENGTH]` range, `false` otherwise.\n */\nexport function isLinkedLength(value: unknown): value is number {\n  return (\n    Number.isInteger(value) &&\n    (value as number) >= 0 &&\n    (value as number) <= LINKED_MAX_LENGTH\n  );\n}\n\n/**\n * Determines whether the provided value is a number.\n *\n * This includes `NaN` and `Infinity`, so consider additional\n * checks if those values are not desirable.\n *\n * @param value - The value to check.\n *\n * @returns `true` if the value is of type number, `false` otherwise.\n */\nexport function isNumber(value: unknown): value is number {\n  return typeof value === \"number\";\n}\n\n/**\n * Checks if a given value is a safe integer greater than or equal to 0.\n *\n * This is useful for validating counts or sizes that must be within the safe\n * integer range to prevent precision loss.\n *\n * @param value - The value to check.\n *\n * @returns `true` if the value is a safe integer and non-negative, `false` otherwise.\n */\nexport function isSafeCount(value: unknown): value is number {\n  return Number.isSafeInteger(value) && (value as number) >= 0;\n}\n\n/**\n * Determines whether the provided value is a symbol.\n *\n * @param value - The value to check.\n *\n * @returns `true` if the value is a symbol, `false` otherwise.\n */\nexport function isSymbol(value: unknown): value is symbol {\n  return typeof value === \"symbol\";\n}\n","/**\n * Adds a specified addend to a value if the value is below a given target.\n *\n * @param value - The initial number.\n * @param addend - The number added if the value is below the target.\n * @param target - The target number for comparison. If the value is below this\n * number, the addend will be added. Defaults to 0 if not specified.\n */\nexport function addIfBelow(value: number, addend: number, target = 0): number {\n  return value >= target ? value : value + addend;\n}\n\n/**\n * Restricts a given numerical value within a specified range [min, max].\n *\n * If the provided value is less than the minimum, the minimum is returned.\n * If it is greater than the maximum, the maximum is returned. If the value\n * is within the range, the value itself is returned. An error is thrown if\n * the minimum range value is greater than the maximum range value, as this\n * represents an invalid range.\n *\n * @param value - The numerical value to clamp.\n * @param min - The minimum allowable value of the range.\n * @param max - The maximum allowable value of the range.\n *\n * @returns The clamped value within the specified range.\n *\n * @throws `RangeError` If `min` is greater than `max`.\n */\nexport function clamp(value: number, min: number, max: number): number {\n  if (min > max) {\n    throw new RangeError(\"Invalid clamp range; min must be <= max\");\n  }\n  if (value <= min) {\n    return min;\n  }\n  return value <= max ? value : max;\n}\n\n/**\n * Checks if a given numeric value falls within a specified range.\n *\n * @param value - The numeric value to check.\n * @param min - The inclusive lower bound of the range.\n * @param max - The exclusive upper bound of the range.\n *\n * @returns - `true` if `value` is within the range `[min, max)`, `false` otherwise.\n */\nexport function isInRange(value: number, min: number, max: number): boolean {\n  return value >= min && value < max;\n}\n\n/**\n * Calculates the logarithm of a given value with the specified base.\n *\n * This function uses natural logarithms (`Math.log`) for its calculations.\n * If either the value or the base is less than or equal to 0, `NaN` is returned\n * to indicate an invalid operation, as logarithms are not defined for non-positive\n * values and bases.\n *\n * @param value - The numerical value for which to calculate the logarithm. Must be positive.\n * @param base - The base of the logarithm. Must be positive.\n *\n * @returns The calculated logarithm of the value with the given base, or `NaN` for invalid inputs.\n */\nexport function log(value: number, base: number): number {\n  return value >= 0 && base > 0 ? Math.log(value) / Math.log(base) : NaN;\n}\n\n/**\n * Simulates a win streak based on a given probability and a random number generator.\n *\n * Consecutive \"wins\" are simulated by incrementing a counter each time the\n * random number generator returns a value less than the probability threshold. The\n * simulation continues until the generated value is equal to or greater than\n * the threshold, or until `max` is reached, indicating the end of the win streak.\n *\n * @example\n * // Simulate a win streak of consecutive coin tosses (50% win chance per toss).\n * const wins = simulateWinStreak(0.5);\n *\n * @param probability - A number representing the probability of a \"win\". It should be\n *                      within the range of values generated by the random number generator.\n * @param max - The maximum length of the win streak. Defaults to `Infinity`.\n * @param randomFn - A function that generates a random number within a given range (e.g. [0, 1)).\n *                   Defaults to `Math.random`.\n *\n * @returns A non-negative number of consecutive wins before a loss occurs.\n */\nexport function simulateWinStreak(\n  probability: number,\n  max = Infinity,\n  randomFn = Math.random\n): number {\n  let count = 0;\n  while (count < max && randomFn() < probability) {\n    ++count;\n  }\n  return count;\n}\n\n/**\n * Attempts to convert a given value to an integer.\n *\n * The function first tries to convert the value to a number. If the result\n * is not valid (i.e. `NaN`), the given `defaultValue` is returned. Otherwise,\n * the function truncates the number to an integer using `Math.trunc`.\n *\n * This is useful for ensuring numerical operations are performed on integers,\n * with a controllable fallback for invalid inputs.\n *\n * @param value - The value to convert to an integer. This can be of any type.\n * @param defaultValue - The fallback value to return if conversion fails. Defaults to 0.\n *\n * @returns The converted integer, or `defaultValue` if conversion is not possible.\n */\nexport function toInteger(value?: unknown, defaultValue = 0): number {\n  value = +value!;\n  return isNaN(value as number) ? defaultValue : Math.trunc(value as number);\n}\n","/**\n * Generates an iterable that yields chunks (arrays) of elements from the input iterable,\n * with each chunk containing up to a specified maximum number of elements. This function\n * is useful for processing or handling large collections of items in smaller, more\n * manageable segments.\n *\n * `chunkSize` is truncated to an integer to ensure expected behavior.\n * If `chunkSize` is less than 1, an empty iterable is generated.\n *\n * Example usage:\n * ```typescript\n * const nums = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n * for (const chunk of chunk(nums, 3)) {\n *   console.log(chunk); // Outputs: [1, 2, 3], [4, 5, 6], [7, 8, 9]\n * }\n * ```\n *\n * @param source - The original iterable to be chunked. Can be any iterable object (e.g., Array, Set, or a custom iterable).\n * @param chunkSize - The maximum size of each chunk. Must be a positive integer; non-integer values are truncated.\n *\n * @returns An iterable iterator that yields each chunk as an array of elements.\n */\nexport function* chunk<T>(\n  source: Iterable<T>,\n  chunkSize: number\n): IterableIterator<T[]> {\n  if (chunkSize < 1) {\n    return;\n  }\n  let chunk: T[] = [];\n  chunkSize = Math.trunc(chunkSize);\n  for (const value of source) {\n    if (chunk.push(value) >= chunkSize) {\n      yield chunk;\n      chunk = [];\n    }\n  }\n  if (chunk.length > 0) {\n    yield chunk;\n  }\n}\n","import { CircularBase } from \"../circularBase\";\nimport { BoundedEvent } from \"../../types/boundedEvent\";\nimport { isArrayLength, isInfinity, isNumber } from \"../../utils/is\";\nimport { Bounded } from \"../../types/bounded\";\nimport { ARGS_MAX_LENGTH, ARRAY_MAX_LENGTH } from \"../../utils/constants\";\nimport { List } from \"../../types/list\";\nimport { addIfBelow, clamp, isInRange, toInteger } from \"../../utils/math\";\nimport { chunk } from \"../../utils/iterable\";\n\nexport class CircularArrayList<T>\n  extends CircularBase<T>\n  implements Bounded<T>, List<T>\n{\n  /**\n   * @internal\n   * The maximum number of elements that can be stored in the collection.\n   */\n  protected _capacity: number;\n\n  /**\n   * @internal\n   * The index representing the first element.\n   */\n  protected _head: number;\n\n  /**\n   * @internal\n   * Whether capacity is finite (true) or infinite (false).\n   */\n  protected _isFinite: boolean;\n\n  /**\n   * @internal\n   * The index one more than the last element.\n   */\n  protected _next: number;\n\n  /**\n   * @internal\n   * The number of elements.\n   */\n  protected _size: number;\n\n  /**\n   * @internal\n   * The stored values.\n   */\n  protected _vals: T[];\n\n  /**\n   * Creates a new list. Default `capacity` is `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new list with the given capacity.\n   *\n   * @param capacity - the list's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new list from the given items. `capacity` will equal the number of items.\n   *\n   * @param items - the initial values in the list.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    super();\n\n    // Initialize class variables\n    this._capacity = ARRAY_MAX_LENGTH;\n    this._head = 0;\n    this._isFinite = false;\n    this._size = 0;\n    this._next = 0;\n    this._vals = [];\n\n    // Case 1: input is null or undefined\n    if (capacity == null) {\n      return;\n    }\n\n    // Case 2: input is capacity\n    if (isNumber(capacity)) {\n      this.capacity = capacity;\n      return;\n    }\n\n    // Case 3: input is an iterable\n    for (const vals of chunk(capacity, ARGS_MAX_LENGTH)) {\n      this._insert(this._size, vals);\n    }\n    this._capacity = this._size;\n    this._isFinite = true;\n  }\n\n  get capacity(): number {\n    return this._isFinite ? this._capacity : Infinity;\n  }\n\n  get size(): number {\n    return this._size;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return CircularArrayList.name;\n  }\n\n  set capacity(capacity: number) {\n    // Convert capacity to a number\n    capacity = +capacity;\n\n    // Check capacity\n    if (isInfinity(capacity)) {\n      // If capacity is Infinity\n      capacity = ARRAY_MAX_LENGTH;\n      this._isFinite = false;\n    } else if (isArrayLength(capacity)) {\n      // If capacity is valid\n      this._isFinite = true;\n    } else {\n      // If capacity is invalid\n      throw new RangeError(\"Invalid capacity\");\n    }\n\n    // Update collection\n    if (this._size <= 0) {\n      // If collection is empty\n      this._capacity = capacity;\n      this.clear();\n    } else if (capacity < this._capacity) {\n      // If capacity is decreasing\n      this._shrink(capacity);\n    } else if (capacity > this._capacity) {\n      // If capacity is increasing\n      this._grow(capacity);\n    }\n  }\n\n  at(index?: number): T | undefined {\n    // Sanitize input\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return undefined;\n    }\n\n    // Return value\n    return this._vals[this._toIndex(index)];\n  }\n\n  clear(): void {\n    this._size = 0;\n    this._head = 0;\n    this._next = 0;\n    this._vals.length = 0;\n  }\n\n  /*\n  copyWithin(target: number, start: number, end?: number): this {\n    const size = this._size;\n\n    // Sanitize inputs\n    target = clamp(addIfBelow(toInteger(target, 0), size), 0, size);\n    start = clamp(addIfBelow(toInteger(start, 0), size), 0, size);\n    const temp = target > start ? target - start : 0;\n    end = clamp(addIfBelow(toInteger(end, size), size), start, size - temp);\n\n    // Copy within\n    this._copyWithin(target, start, end);\n\n    // Return list\n    return this;\n  }\n  */\n\n  /**\n   * @internal\n   */\n  protected _copyWithin(target: number, start: number, end: number): void {\n    // If copying in-place or nothing to copy\n    if (target == start || start >= end) {\n      return;\n    }\n\n    // Get source data segments\n    const capacity = this._capacity - 1;\n    const vals = this._vals;\n    const ranges = this._toRanges(start, end);\n\n    if (target <= start || end <= target) {\n      // Copy from left to right\n      target = this._toIndex(target);\n      for (const [min, max] of ranges) {\n        for (let i = min; i < max; ++i) {\n          vals[target] = vals[i];\n          target = target < capacity ? target + 1 : 0;\n        }\n      }\n    } else {\n      // Copy from right to left\n      target = this._toIndex(target + (end - start));\n      for (const [min, max] of ranges.reverse()) {\n        for (let i = max - 1; i >= min; --i) {\n          target = target > 0 ? target - 1 : capacity;\n          vals[target] = vals[i];\n        }\n      }\n    }\n  }\n\n  delete(index: number): boolean {\n    // Sanitize input\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return false;\n    }\n\n    // Delete value\n    this._delete(index, 1);\n\n    // Return success\n    return true;\n  }\n\n  /**\n   * @internal\n   */\n  protected _delete(index: number, deleteCount: number): void {\n    this._copyWithin(index, index + deleteCount, this._size);\n    this._pop(deleteCount);\n  }\n\n  *entries(): IterableIterator<[number, T]> {\n    for (let ext = 0; ext < this._size; ++ext) {\n      yield [ext, this._vals[this._toIndex(ext)]];\n    }\n  }\n\n  fill(value: T, start?: number, end?: number): this {\n    const size = this._size;\n\n    // Sanitize inputs\n    start = clamp(addIfBelow(toInteger(start, 0), size), 0, size);\n    end = clamp(addIfBelow(toInteger(end, size), size), start, size);\n\n    // Fill values\n    this._fill(value, start, end);\n\n    // Return list\n    return this;\n  }\n\n  /**\n   * @internal\n   */\n  protected _fill(value: T, start: number, end: number): void {\n    for (const [min, max] of this._toRanges(start, end)) {\n      this._vals.fill(value, min, max);\n    }\n  }\n\n  first(): T | undefined {\n    return this._size > 0 ? this._vals[this._head] : undefined;\n  }\n\n  forEach(\n    callbackfn: (value: T, index: number, collection: this) => void,\n    thisArg?: unknown\n  ): void {\n    const N = this._size;\n    for (let ext = 0; ext < N && ext < this._size; ++ext) {\n      const value = this._vals[this._toIndex(ext)];\n      callbackfn.call(thisArg, value, ext, this);\n    }\n  }\n\n  has(value: T): boolean {\n    const vals = this._vals;\n    for (const [min, max] of this._toRanges(0, this._size)) {\n      for (let i = min; i < max; ++i) {\n        if (value === vals[i]) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  *keys(): IterableIterator<number> {\n    for (let ext = 0; ext < this._size; ++ext) {\n      yield ext;\n    }\n  }\n\n  last(): T | undefined {\n    return this._size > 0\n      ? this._vals[this._toIndex(this._size - 1)]\n      : undefined;\n  }\n\n  pop(): T | undefined {\n    // If list is empty\n    if (this._size <= 0) {\n      return undefined;\n    }\n\n    // Get and remove first value\n    const value = this._vals[this._toIndex(this._size - 1)];\n    this._pop(1);\n\n    // Return value\n    return value;\n  }\n\n  /**\n   * @internal\n   */\n  protected _pop(N: number): void {\n    // Remove values\n    const newSize = this._size - N;\n    this._fill(undefined as T, newSize, this._size);\n\n    // Update state\n    this._next = this._toIndex(newSize);\n    this._size = newSize;\n  }\n\n  push(...items: T[]): number {\n    // If no items\n    if (items.length <= 0) {\n      return this._size;\n    }\n\n    // If no capacity\n    if (this._capacity <= 0) {\n      this._overflow(items);\n      return this._size;\n    }\n\n    // Push items\n    this._insert(this._size, items);\n\n    // Return new size\n    return this._size;\n  }\n\n  set(index: number, value: T): T | undefined {\n    // Sanitize input\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return undefined;\n    }\n\n    // Update value\n    index = this._toIndex(index);\n    const prevValue = this._vals[index];\n    this._vals[index] = value;\n\n    // Return previous value\n    return prevValue;\n  }\n\n  shift(): T | undefined {\n    // If list is empty\n    if (this._size <= 0) {\n      return undefined;\n    }\n\n    // Get and remove first value\n    const value = this._vals[this._head];\n    this._shift(1);\n\n    // Return value\n    return value;\n  }\n\n  /**\n   * @internal\n   */\n  protected _shift(N: number): void {\n    // Remove items\n    this._fill(undefined as T, 0, N);\n\n    // Update state\n    this._head = this._toIndex(N);\n    this._size -= N;\n  }\n\n  slice(start?: number, end?: number): CircularArrayList<T> {\n    const size = this._size;\n\n    // Sanitize inputs\n    start = clamp(addIfBelow(toInteger(start, 0), size), 0, size);\n    end = clamp(addIfBelow(toInteger(end, size), size), start, size);\n\n    // Return slice\n    return this._toList(this._slice(start, end));\n  }\n\n  /**\n   * @internal\n   */\n  protected _slice(start: number, end: number): T[] {\n    const from = this._vals;\n    const to = new Array<T>(end - start);\n\n    let j = 0;\n    for ([start, end] of this._toRanges(start, end)) {\n      for (let i = start; i < end; ++i) {\n        to[j++] = from[i];\n      }\n    }\n\n    return to;\n  }\n\n  splice(\n    start: number,\n    deleteCount?: number,\n    ...items: T[]\n  ): CircularArrayList<T> {\n    const size = this._size;\n\n    // Sanitize inputs\n    start = clamp(addIfBelow(toInteger(start, 0), size), 0, size);\n    deleteCount = clamp(toInteger(deleteCount, 0), 0, size - start);\n\n    // Create output\n    const out = this._toList(this._slice(start, start + deleteCount));\n\n    // Update list\n    this._splice(start, deleteCount, items);\n\n    // Return output\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  protected _splice(start: number, deleteCount: number, items: T[] = []): void {\n    const addCount = items.length;\n    const replaceCount = Math.min(deleteCount, addCount);\n    const vals = this._vals;\n\n    // Replace values\n    let j = 0;\n    for (const [a, b] of this._toRanges(start, start + replaceCount)) {\n      for (let i = a; i < b; ++i) {\n        vals[i] = items[j++];\n      }\n    }\n\n    // If done\n    if (deleteCount == addCount) {\n      return;\n    }\n\n    // Insert remaining values or finish deletions\n    start += replaceCount;\n    deleteCount < addCount\n      ? this._insert(start, items, replaceCount)\n      : this._delete(start, deleteCount - addCount);\n  }\n\n  /**\n   * @internal\n   */\n  protected _insert(\n    start: number,\n    items: T[],\n    min = 0,\n    max = items.length\n  ): void {\n    const N = max - min;\n\n    // Check free space\n    let free = this._capacity - this._size;\n    if (free >= N) {\n      this._safeInsert(start, items, min, max);\n      return;\n    }\n\n    // Check if \"infinite\" capacity yet not enough space\n    if (!this._isFinite) {\n      this._safeInsert(start, items, min, min + free);\n      throw new Error(\"Out of memory\");\n    }\n\n    // Remove from head\n    if (start > 0) {\n      const shifted = Math.min(start, N - free);\n      this._overflow(this._slice(0, shifted));\n      this._shift(shifted);\n      start -= shifted;\n      free += shifted;\n    }\n\n    // Check free space\n    if (free >= N) {\n      this._safeInsert(start, items, min, max);\n      return;\n    }\n\n    // Remove from items and insert remaining\n    const mid = max - free;\n    this._overflow(items.slice(min, mid));\n    this._safePresert(0, items, mid, max);\n  }\n\n  /**\n   * @internal\n   */\n  protected _safeInsert(\n    vIndex: number,\n    items: T[],\n    min = 0,\n    max = items.length\n  ): void {\n    const N = max - min;\n    const vals = this._vals;\n\n    // Make space\n    this._copyWithin(vIndex + N, vIndex, this._size);\n\n    // Insert into space\n    for (const [start, end] of this._toRanges(vIndex, vIndex + N)) {\n      for (let i = start; i < end; ++i) {\n        vals[i] = items[min++];\n      }\n    }\n\n    // Update state\n    this._size += N;\n    this._next = this._toIndex(this._size);\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.values();\n  }\n\n  unshift(...items: T[]): number {\n    // If no items\n    if (items.length <= 0) {\n      return this._size;\n    }\n\n    // If no capacity\n    if (this._capacity <= 0) {\n      this._overflow(items);\n      return this._size;\n    }\n\n    // Presert items\n    this._presert(0, items);\n\n    // Return new size\n    return this._size;\n  }\n\n  /**\n   * @internal\n   */\n  protected _presert(\n    end: number,\n    items: T[],\n    min = 0,\n    max = items.length\n  ): void {\n    const N = max - min;\n\n    // Check free space\n    let free = this._capacity - this._size;\n    if (free >= N) {\n      this._safePresert(end, items, min, max);\n      return;\n    }\n\n    // Check if \"infinite\" capacity yet not enough space\n    if (!this._isFinite) {\n      this._safePresert(end, items, max - free, max);\n      throw new Error(\"Out of memory\");\n    }\n\n    // Remove from tail\n    if (end < this._size) {\n      const popped = Math.min(this._size - end, N - free);\n      this._overflow(this._slice(this._size - popped, this._size));\n      this._pop(popped);\n      free += popped;\n    }\n\n    // Check free space\n    if (free >= N) {\n      this._safePresert(end, items, min, max);\n      return;\n    }\n\n    // Remove from items and insert remaining\n    const mid = min + free;\n    this._overflow(items.slice(mid, max));\n    this._safeInsert(this._size, items, min, mid);\n  }\n\n  /**\n   * @internal\n   */\n  protected _safePresert(\n    vIndex: number,\n    items: T[],\n    min = 0,\n    max = items.length\n  ): void {\n    const capacity = this._capacity;\n    const N = max - min;\n    const vals = this._vals;\n\n    // Make space\n    const newHead = capacity - N;\n    this._copyWithin(newHead, 0, vIndex);\n\n    // Insert into space\n    vIndex += newHead;\n    for (const [start, end] of this._toRanges(vIndex, vIndex + N)) {\n      for (let i = start; i < end; ++i) {\n        vals[i] = items[min++];\n      }\n    }\n\n    // Update state\n    this._size += N;\n    this._head = this._toIndex(newHead);\n  }\n\n  *values(): IterableIterator<T> {\n    for (let ext = 0; ext < this._size; ++ext) {\n      yield this._vals[this._toIndex(ext)];\n    }\n  }\n\n  /**\n   * @internal\n   *\n   * Emit an overflow event containing the items evicted from the collection.\n   *\n   * @param evicted - The items evicted from the collection.\n   */\n  protected _overflow(evicted: T[]): void {\n    this._emitter.emit(BoundedEvent.Overflow, evicted);\n  }\n\n  /**\n   * @internal\n   *\n   * Grow capacity.\n   *\n   * @param capacity - the new capacity\n   */\n  protected _grow(capacity: number): void {\n    // Check if list is sequential: [    H123456T    ]\n    if (this._isSequential()) {\n      this._sequentialReset(capacity);\n      return;\n    }\n\n    // Queue is not sequential: [456T    H123]\n    if (this._size <= this._head) {\n      // [H123456T] = A + B = N\n      const temp = this._size - this._next;\n      this._vals.copyWithin(temp, 0, this._next);\n      this._vals.copyWithin(0, this._head, this._head + temp);\n      this._vals.length = this._size;\n      this._head = 0;\n      this._next = this._size;\n    } else if (this._head + this._size <= capacity) {\n      // [        H123456T] = 2B < 2N\n      this._vals.length = this._head + this._size;\n      this._vals.copyWithin(this._capacity, 0, this._next);\n      this._vals.fill(undefined as T, 0, this._next);\n      this._next = (this._head + this._size) % capacity;\n    } /* else if (this.next + this._size <= capacity) {\n      // [    H123456T] = A + 2B = N + B < 2N\n      const temp = this._capacity - this.head;\n      this.vals.length = capacity;\n      this.vals.copyWithin(this.next, this.head, this._capacity);\n      this.vals.copyWithin(this.next + temp, 0, this.next);\n      this.vals.fill(undefined as T, 0, this.next);\n      this.vals.length = this.next + this._size;\n      this.head = this.next;\n      this.next = (this.head + this._size) % capacity;\n    } */ else {\n      // [6T      H12345] = B + D < 2B < 2N\n      const diff = capacity - this._capacity;\n      this._vals.length = capacity;\n      this._vals.copyWithin(this._capacity, 0, diff);\n      this._vals.copyWithin(0, diff, this._next);\n      const temp = Math.max(diff, this._next - diff);\n      this._vals.fill(undefined as T, temp, this._next);\n      this._next -= diff;\n    }\n\n    // Update capacity\n    this._capacity = capacity;\n  }\n\n  /**\n   * @internal\n   *\n   * Returns whether the list is stored sequentially in memory.\n   *\n   * @returns `true` if the list is sequential in memory, `false` otherwise.\n   */\n  protected _isSequential(): boolean {\n    return this._head < this._next || this._next <= 0;\n  }\n\n  /**\n   * @internal\n   *\n   * Adjusts the list to fit within the given capacity.\n   *\n   * Assumes the list:\n   * - is sequential in memory.\n   * - fits in the given capacity (size \\<= capacity).\n   *\n   * @param capacity - The new capacity.\n   *\n   * @returns `true` if the list was reset, `false` otherwise.\n   */\n  protected _sequentialReset(capacity: number): boolean {\n    const tail = this._head + this._size;\n\n    // If list fits in current location: [    H------T    ]\n    if (tail <= capacity) {\n      this._vals.length = tail;\n      this._next = this._vals.length % capacity;\n\n      // If list must be fully moved: [H------T    ]\n    } else if (this._head >= capacity) {\n      this._vals.copyWithin(0, this._head, tail);\n      this._vals.length = this._size;\n      this._head = 0;\n      this._next = this._size % capacity;\n\n      // If list must be partially moved: [--T  H----]\n    } else {\n      this._vals.copyWithin(0, capacity, tail);\n      this._vals.length = capacity;\n      this._next = tail - capacity;\n    }\n\n    this._capacity = capacity;\n    return true;\n  }\n\n  /**\n   * @internal\n   *\n   * Shrink capacity.\n   *\n   * @param capacity - the new capacity\n   */\n  protected _shrink(capacity: number): void {\n    // Handle overflow\n    if (this._size > capacity) {\n      const shifted = this._size - capacity;\n      this._overflow(this._slice(0, shifted));\n      this._shift(shifted);\n    }\n\n    // Check if list is sequential: [    H123456T    ]\n    if (this._isSequential()) {\n      this._sequentialReset(capacity);\n      return;\n    }\n\n    // Shift 1st half of list: [456T....H123] -> [456T..H123]\n    const diff = this._capacity - capacity;\n    this._vals.copyWithin(this._head - diff, this._head, this._capacity);\n    this._vals.length = capacity;\n    this._head -= diff;\n    this._capacity = capacity;\n  }\n\n  /**\n   * @internal\n   */\n  protected _toIndex(externalIndex: number): number {\n    return (this._head + externalIndex) % this._capacity;\n  }\n\n  /**\n   * @internal\n   */\n  protected _toList(items: T[]): CircularArrayList<T> {\n    const out = new CircularArrayList<T>(0);\n    out._vals = items;\n    out._size = items.length;\n    out._capacity = items.length;\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  protected _toRanges(min: number, max: number): [number, number][] {\n    const head = this._head;\n    const mid = this._capacity - head;\n    if (max <= mid) {\n      return [[head + min, head + max]];\n    }\n    if (min >= mid) {\n      return [[min - mid, max - mid]];\n    }\n    return [\n      [head + min, this._capacity],\n      [0, max - mid],\n    ];\n  }\n}\n","import { BoundedEvent } from \"../../types/boundedEvent\";\nimport { Bounded } from \"../../types/bounded\";\nimport { Deque } from \"../..\";\nimport { CircularArrayList } from \"../list/circularArrayList\";\n\n/**\n * A circular deque is similar to a traditional deque, but uses a fixed-size,\n * circular buffer. When the deque reaches its maximum capacity and a new\n * element is added, the oldest is discarded, thus maintaining its size.\n *\n * This structure efficiently utilizes memory for applications where only the\n * most recent additions are of interest and older data can be discarded.\n *\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularDeque<T> implements Bounded<T>, Deque<T> {\n  /**\n   * @internal\n   */\n  protected _list: CircularArrayList<T>;\n\n  /**\n   * Creates a new deque. Default `capacity` is `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new deque with the given capacity.\n   *\n   * @param capacity - the deque's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new deque from the given items. `capacity` will equal the number of items.\n   *\n   * @param items - the initial values in the deque.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    this._list = new CircularArrayList(capacity as number);\n  }\n\n  get capacity(): number {\n    return this._list.capacity;\n  }\n\n  get size(): number {\n    return this._list.size;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return CircularDeque.name;\n  }\n\n  set capacity(capacity: number) {\n    this._list.capacity = capacity;\n  }\n\n  clear(): void {\n    this._list.clear();\n  }\n\n  entries(): IterableIterator<[number, T]> {\n    return this._list.entries();\n  }\n\n  first(): T | undefined {\n    return this._list.first();\n  }\n\n  forEach(\n    callbackfn: (value: T, index: number, collection: this) => void,\n    thisArg?: unknown\n  ): void {\n    return this._list.forEach((v, i) => callbackfn.call(thisArg, v, i, this));\n  }\n\n  front(): T | undefined {\n    return this._list.first();\n  }\n\n  has(value: T): boolean {\n    return this._list.has(value);\n  }\n\n  keys(): IterableIterator<number> {\n    return this._list.keys();\n  }\n\n  last(): T | undefined {\n    return this._list.last();\n  }\n\n  pop(): T | undefined {\n    return this._list.pop();\n  }\n\n  push(...elems: T[]): number {\n    return this._list.push(...elems);\n  }\n\n  shift(): T | undefined {\n    return this._list.shift();\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return this._list.values();\n  }\n\n  top(): T | undefined {\n    return this._list.last();\n  }\n\n  unshift(...elems: T[]): number {\n    return this._list.unshift(...elems);\n  }\n\n  values(): IterableIterator<T> {\n    return this._list.values();\n  }\n\n  addListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.addListener(event, listener);\n    return this;\n  }\n\n  on(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.on(event, listener);\n    return this;\n  }\n\n  removeListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.removeListener(event, listener);\n    return this;\n  }\n}\n","import { LinkedCore, LinkedNode } from \"../types/linkedNode\";\n\n/**\n * Creates a copy of a segment from a linked list.\n *\n * @param node - The first {@link LinkedNode} of the original list from which\n *               the copy operation begins.\n * @param count - The number of nodes to copy. If the count exceeds the number\n *                of nodes available, only the available nodes are copied.\n *\n * @returns A tuple containing:\n *          - The head {@link LinkedNode} of the new list.\n *          - The tail {@link LinkedNode} of the new list.\n *          - An integer representing the total number of nodes copied.\n */\nexport function copy<T>(\n  node: LinkedNode<T> | undefined,\n  distance: number\n): LinkedCore<T> {\n  // Create new root\n  const root: LinkedNode<T> = { value: undefined as T };\n\n  // For each node\n  let size = 0;\n  let tail = root;\n  while (node != null && size < distance) {\n    // Create a duplicate\n    const dupe: LinkedNode<T> = { value: node.value };\n\n    // Attach the duplicate\n    tail.next = dupe;\n    tail = dupe;\n\n    // Update size\n    ++size;\n\n    // Move to the next node\n    node = node.next;\n  }\n\n  // Return copy\n  tail.next = undefined;\n  return { root, size, tail };\n}\n\n/**\n * Removes and returns a segment of a linked list as a new list.\n *\n * This operation modifies the original list by removing the specified\n * range of nodes and returning the new list's head and tail as a tuple.\n * If `count` \\<= zero, the function returns [undefined, undefined].\n * If `count` \\> len(prev), a `TypeError` is thrown.\n *\n * @param prev - The node preceding the start of the section to be cut.\n * @param count - The number of nodes to include in the cut.\n *\n * @returns A tuple containing the head and tail of the removed segment,\n * or [undefined, undefined] if `count` \\<= zero.\n *\n * @throws - {@link TypeError}\n * thrown if `count` \\> `len(prev)`\n */\nexport function cut<T>(\n  prev: LinkedNode<T> | undefined,\n  count: number\n): LinkedCore<T> {\n  // Create new root\n  const root: LinkedNode<T> = { value: undefined as T };\n\n  // Check inputs\n  if (prev == null || count <= 0) {\n    return { root, size: 0, tail: root };\n  }\n\n  // Cut segment\n  const head = prev.next!;\n  const tail = get(head, count - 1)!;\n  prev.next = tail.next;\n  tail.next = undefined;\n\n  // Return cut segment\n  root.next = head;\n  return { root, size: count, tail };\n}\n\n/**\n * Iterates through a linked list, yielding each node's index\n * (position in the list) and value as a tuple.\n *\n * Iteration starts from the `node` node and continues until either the end\n * of the list, or the `end` node if provided.\n *\n * This generator function provides a convenient way to enumerate all nodes in\n * a linked list, similar to how `Array.prototype.entries()` works for arrays.\n *\n * @param node - The node at which to start iterating.\n * @param end - An optional node at which to end (exclusive).\n * If not provided, iteration continues until the end of the list.\n *\n * @throws - {@link TypeError}\n * thrown if an `end` node is provided but not encountered before the end of the list.\n */\nexport function* entries<T>(node?: LinkedNode<T>): Generator<[number, T]> {\n  for (let i = 0; node != null; ++i) {\n    yield [i, node!.value];\n    node = node!.next;\n  }\n}\n\n/**\n * Retrieves the node at the specified distance from the given node.\n *\n * This function iterates through the linked list starting from the `node`\n * node, moving `index` nodes away in the list.\n *\n * @param node - The node from which to start.\n * @param index - The forward distance of the node to retrieve.\n *\n * @returns The node at the specified index,\n * or `undefined` if `index` does not exist.\n */\nexport function get<N extends LinkedNode<unknown>>(\n  node: N | undefined,\n  index: number\n): N | undefined {\n  if (index < 0) {\n    return undefined;\n  }\n  for (let i = 0; node != null && i < index; ++i) {\n    node = node.next;\n  }\n  return node;\n}\n\n/**\n * Determines whether a linked list contains a node with a specified value.\n *\n * Iteration starts from the `node` node and continues until either the end\n * of the list, or the `end` node if provided.\n *\n * @param node - The node from which to start searching.\n * @param value - The value to search for.\n * @param end - An optional node at which to end the search (exclusive).\n * If not provided, the search continues until the end of the list.\n *\n * @returns `true` if the specified value is found, `false` otherwise.\n *\n * @throws - {@link TypeError}\n * thrown if an `end` node is provided but not encountered before the end of the list.\n *\n */\nexport function has<T>(node: LinkedNode<T> | undefined, value: T): boolean {\n  while (node != null) {\n    if (node!.value === value) {\n      return true;\n    }\n    node = node!.next;\n  }\n  return false;\n}\n\n/**\n * Inserts a new sequence of values into a linked list right after a specified node.\n *\n * @param prev - The node in the linked list after which the new values will be inserted.\n * @param values - An iterable of values to be inserted.\n * @returns The last node that was inserted into the list, or `prev` if no values were inserted.\n */\nexport function insert<T>(\n  prev: LinkedNode<T>,\n  values: Iterable<T>\n): LinkedNode<T> {\n  // Convert values to list\n  const { root, size, tail } = toList(values);\n\n  // If no values\n  if (size <= 0) {\n    return prev;\n  }\n\n  // Add values\n  tail!.next = prev.next;\n  prev.next = root.next;\n\n  return tail!;\n}\n\n/**\n * Iterates through a linked list, yielding each node's index\n * (position in the list).\n *\n * Iteration starts from the `node` node and continues until either the end\n * of the list, or the `end` node if provided.\n *\n * This generator function provides a convenient way to enumerate all nodes in\n * a linked list, similar to how `Array.prototype.entries()` works for arrays.\n *\n * @param node - The node at which to start iterating.\n * @param end - An optional node at which to end (exclusive).\n * If not provided, iteration continues until the end of the list.\n *\n * @throws - {@link TypeError}\n * thrown if an `end` node is provided but not encountered before the end of the list.\n */\nexport function* keys<T>(node?: LinkedNode<T>): Generator<number> {\n  for (let i = 0; node != null; ++i) {\n    yield i;\n    node = node!.next;\n  }\n}\n\n/**\n * Converts an iterable collection of values into a linked list and returns\n * the head, tail and size of the list.\n *\n * If the iterable is empty, the function returns a triple containing\n * `[undefined, undefined, 0]` to indicate that no list was created.\n *\n * @param values - The iterable collection of elements.\n *\n * @returns A triple containing the head, tail and size of the list.\n * Returns `[undefined, undefined, 0]` if the iterable is empty.\n */\nexport function toList<T>(values: Iterable<T>): LinkedCore<T> {\n  const root: LinkedNode<T> = { value: undefined as T };\n\n  let size = 0;\n  let tail = root;\n  for (const value of values) {\n    tail.next = { value };\n    tail = tail.next;\n    ++size;\n  }\n  tail.next = undefined;\n\n  return { root, size, tail };\n}\n\n/**\n * Iterates through a linked list, yielding each node's value.\n *\n * Iteration starts from the `node` node and continues until either the end\n * of the list, or the `end` node if provided.\n *\n * This generator function provides a convenient way to enumerate all nodes in\n * a linked list, similar to how `Array.prototype.entries()` works for arrays.\n *\n * @param node - The node at which to start iterating.\n * @param end - An optional node at which to end (exclusive).\n * If not provided, iteration continues until the end of the list.\n *\n * @throws - {@link TypeError}\n * thrown if an `end` node is provided but not encountered before the end of the list.\n */\nexport function* values<T>(node?: LinkedNode<T>): Generator<T> {\n  while (node != null) {\n    yield node!.value;\n    node = node!.next;\n  }\n}\n","import { DoublyLinkedCore, DoublyLinkedNode } from \"../types/doublyLinkedNode\";\n\nimport { get as singlyGet, cut as singlyCut } from \"./linkedNode\";\n\n/**\n * Creates a copy of a segment from a doubly linked list.\n *\n * @param node - The first {@link DoublyLinkedNode} of the original list from\n *               which the copy operation begins.\n * @param count - The number of nodes to copy. If the count exceeds the number\n *                of nodes available, only the available nodes are copied.\n *\n * @returns A tuple containing:\n *          - The head {@link DoublyLinkedNode} of the new list.\n *          - The tail {@link DoublyLinkedNode} of the new list.\n *          - An integer representing the total number of nodes copied.\n */\nexport function copy<T>(\n  node: DoublyLinkedNode<T> | undefined,\n  distance: number\n): DoublyLinkedCore<T> {\n  // Create new root\n  const root: DoublyLinkedNode<T> = { value: undefined as T };\n\n  // Check distance\n  if (node == null || distance <= 0) {\n    return { root, size: 0, tail: root };\n  }\n\n  // For each node\n  let size = 0;\n  let tail = root;\n  while (node != null && size < distance) {\n    // Create a duplicate\n    const dupe: DoublyLinkedNode<T> = { value: node.value };\n\n    // Attach the duplicate\n    tail.next = dupe;\n    dupe.prev = tail;\n    tail = dupe;\n\n    // Update size\n    ++size;\n\n    // Move to the next node\n    node = node.next;\n  }\n\n  // Return copy\n  root.prev = undefined;\n  tail.next = undefined;\n  return { root, size, tail };\n}\n\n/**\n * Removes and returns a segment of a linked list as a new list.\n *\n * This operation modifies the original list by removing the specified\n * range of nodes and returning the new list's head and tail as a tuple.\n * If `count` \\<= zero, the function returns [undefined, undefined].\n * If `count` \\> len(prev), a `TypeError` is thrown.\n *\n * @param prev - The node preceding the start of the section to be cut.\n * @param count - The number of nodes to include in the cut.\n *\n * @returns A tuple containing the head and tail of the removed segment,\n * or [undefined, undefined] if `count` \\<= zero.\n *\n * @throws - {@link TypeError}\n * thrown if `count` \\> `len(prev)`\n */\nexport function cut<T>(\n  node: DoublyLinkedNode<T>,\n  count: number\n): DoublyLinkedCore<T> {\n  const seg = singlyCut(node, count) as DoublyLinkedCore<T>;\n  if (seg.size <= 0) {\n    return seg;\n  }\n  seg.root.next!.prev = seg.root;\n  const next = node.next;\n  if (next != null) {\n    next.prev = node;\n  }\n  return seg;\n}\n\n/**\n * Retrieves the node at the specified distance from the given node.\n *\n * This function iterates through the linked list starting from the `node`\n * node, moving `index` nodes away in the list.\n *\n * @param node - The node from which to start.\n * @param index - The forward distance of the node to retrieve.\n *\n * @returns The node at the specified index,\n * or `undefined` if `index` does not exist.\n */\nexport function get<N extends DoublyLinkedNode<unknown>>(\n  node: N | undefined,\n  index: number\n): N | undefined {\n  if (index >= 0) {\n    return singlyGet(node, index);\n  }\n  for (let i = 0; node != null && i > index; --i) {\n    node = node.prev;\n  }\n  return node;\n}\n\n/**\n * Inserts a new sequence of values into a linked list right after a specified node.\n *\n * @param prev - The node in the linked list after which the new values will be inserted.\n * @param values - An iterable of values to be inserted.\n *\n * @returns The last node that was inserted into the list, or `prev` if no values were inserted.\n */\nexport function insert<T>(\n  prev: DoublyLinkedNode<T>,\n  values: T[]\n): DoublyLinkedNode<T> {\n  // Convert values to list\n  const list = toList(values);\n\n  // If no values\n  if (list.size <= 0) {\n    return prev;\n  }\n\n  // Add values\n  const head = list.root.next!;\n  const tail = list.tail;\n  const next = prev.next;\n  head.prev = prev;\n  tail.next = next;\n  prev.next = head;\n  if (next != null) {\n    next.prev = tail;\n  }\n\n  return tail!;\n}\n\n/**\n * Converts an iterable collection of values into a linked list and returns\n * the head, tail and size of the list.\n *\n * If the iterable is empty, the function returns a triple containing\n * `[undefined, undefined, 0]` to indicate that no list was created.\n *\n * @param values - The iterable collection of elements.\n *\n * @returns A {@link DoublyLinkedCore}.\n */\nexport function toList<T>(values: Iterable<T>): DoublyLinkedCore<T> {\n  const root: DoublyLinkedNode<T> = { value: undefined as T };\n\n  let size = 0;\n  let tail = root;\n  for (const value of values) {\n    tail.next = { prev: tail, value } as DoublyLinkedNode<T>;\n    tail = tail.next;\n    ++size;\n  }\n\n  root.prev = undefined;\n  tail.next = undefined;\n  return { root, size, tail };\n}\n","import { Bounded } from \"../../types/bounded\";\nimport { BoundedEvent } from \"../../types/boundedEvent\";\nimport {\n  DoublyLinkedCore,\n  DoublyLinkedNode,\n  DoublyLinkedNode as Node,\n} from \"../../types/doublyLinkedNode\";\nimport { List } from \"../../types/list\";\n\nimport { ARGS_MAX_LENGTH, LINKED_MAX_LENGTH } from \"../../utils/constants\";\nimport { copy, cut, get, toList } from \"../../utils/doublyLinkedNode\";\nimport { isInfinity, isLinkedLength, isNumber } from \"../../utils/is\";\nimport { chunk } from \"../../utils/iterable\";\nimport {\n  entries,\n  has,\n  keys,\n  values as getValues,\n} from \"../../utils/linkedNode\";\nimport { addIfBelow, clamp, isInRange, toInteger } from \"../../utils/math\";\n\nimport { CircularBase } from \"../circularBase\";\n\nexport class CircularDoublyLinkedList<T>\n  extends CircularBase<T>\n  implements Bounded<T>, List<T>\n{\n  /**\n   * @internal\n   * The maximum number of elements that can be stored in the collection.\n   */\n  protected _capacity: number;\n\n  /**\n   * @internal\n   * Whether capacity is finite (true) or infinite (false).\n   */\n  protected _isFinite: boolean;\n\n  /**\n   * @internal\n   * The root of the linked list\n   */\n  protected _root: Node<T>;\n\n  /**\n   * @internal\n   * The current size of the list (0 \\<= size \\<= capacity)\n   */\n  protected _size: number;\n\n  /**\n   * @internal\n   * The last node in the linked list.\n   */\n  protected _tail: DoublyLinkedNode<T>;\n\n  /**\n   * Creates a standard linked list (no capacity restriction).\n   */\n  constructor();\n  /**\n   * Creates a linked list with the given capacity.\n   *\n   * @param capacity - the list's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a linked list with the given items. Capacity is set to the number of items.\n   *\n   * @param items - the values to store in the list.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    super();\n\n    // Initialize class variables\n    this._capacity = LINKED_MAX_LENGTH;\n    this._isFinite = false;\n    this._root = { value: undefined } as Node<T>;\n    this._size = 0;\n    this._tail = this._root;\n\n    // Case 1: input is null or undefined\n    if (capacity == null) {\n      return;\n    }\n\n    // Case 2: input is capacity\n    if (isNumber(capacity)) {\n      this.capacity = capacity;\n      return;\n    }\n\n    // Case 3: capacity is iterable\n    for (const vals of chunk(capacity, ARGS_MAX_LENGTH)) {\n      this._insert(this._size, vals);\n    }\n    this._capacity = this._size;\n    this._isFinite = true;\n  }\n\n  get capacity(): number {\n    return this._isFinite ? this._capacity : Infinity;\n  }\n\n  get size(): number {\n    return this._size;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return CircularDoublyLinkedList.name;\n  }\n\n  set capacity(capacity: number) {\n    // Convert input to a number\n    capacity = +capacity;\n\n    // Convert input to a number\n    capacity = +capacity;\n\n    // Check capacity\n    if (isInfinity(capacity)) {\n      // If capacity is Infinity\n      capacity = LINKED_MAX_LENGTH;\n      this._isFinite = false;\n    } else if (isLinkedLength(capacity)) {\n      // If capacity is valid\n      this._isFinite = true;\n    } else {\n      // If capacity is invalid\n      throw new RangeError(\"Invalid capacity\");\n    }\n\n    // Update capacity\n    this._capacity = capacity;\n\n    // If current size fits within new capacity\n    if (this._size <= capacity) {\n      return;\n    }\n\n    // Shrink\n    const diff = this._size - capacity;\n    const { root } = cut(this._root, diff);\n    this._size -= diff;\n\n    // Update tail, if needed\n    if (this._size <= 0) {\n      this._tail = this._root;\n    }\n\n    // Emit discarded items\n    for (const array of chunk(getValues(root.next), ARGS_MAX_LENGTH)) {\n      this._overflow(array);\n    }\n  }\n\n  at(index: number): T | undefined {\n    // Check index\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return undefined;\n    }\n\n    // Return value\n    return this._get(index).value;\n  }\n\n  clear(): void {\n    this._size = 0;\n    this._tail = this._root;\n    this._root.next = undefined;\n  }\n\n  delete(index: number): boolean {\n    // Check index\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return false;\n    }\n\n    // Delete value\n    const node = this._get(index);\n    node.prev!.next = node.next;\n    if (node.next != null) {\n      node.next.prev = node.prev;\n    }\n    --this._size;\n\n    return true;\n  }\n\n  entries(): IterableIterator<[number, T]> {\n    return entries(this._root.next);\n  }\n\n  fill(value: T, start?: number, end?: number): this {\n    // Sanitize start\n    start = toInteger(start, 0);\n    start = clamp(addIfBelow(start, this._size), 0, this._size);\n\n    // Sanitize end\n    end = toInteger(end, this._size);\n    end = clamp(addIfBelow(end, this._size), 0, this._size);\n\n    // Update values\n    let node = this._get(start);\n    while (start < end) {\n      node.value = value;\n      node = node.next!;\n      ++start;\n    }\n\n    return this;\n  }\n\n  forEach(\n    callbackfn: (value: T, index: number, list: this) => void,\n    thisArg?: unknown\n  ): void {\n    let node = this._root;\n    for (let i = 0; i < this._size; ++i) {\n      node = node.next!;\n      callbackfn.call(thisArg, node.value, i, this);\n    }\n  }\n\n  has(value: T): boolean {\n    return has(this._root.next, value);\n  }\n\n  keys(): IterableIterator<number> {\n    return keys(this._root.next);\n  }\n\n  pop(): T | undefined {\n    // If list is empty\n    if (this._size <= 0) {\n      return undefined;\n    }\n\n    // Remove last value\n    const { root } = this._cut(this._size - 1, 1);\n\n    // Return value\n    return root.next!.value;\n  }\n\n  push(...values: T[]): number {\n    // Add values\n    this._insert(this._size, values);\n\n    // Return size\n    return this._size;\n  }\n\n  set(index: number, value: T): T | undefined {\n    // Check index\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return undefined;\n    }\n\n    // Update node\n    const node = this._get(index);\n    const prevValue = node.value;\n    node.value = value;\n\n    // Return previous value\n    return prevValue;\n  }\n\n  shift(): T | undefined {\n    // If list is empty\n    if (this._size <= 0) {\n      return undefined;\n    }\n\n    // Remove first value\n    const { root } = this._cut(0, 1);\n\n    // Return value\n    return root.next!.value;\n  }\n\n  slice(start?: number, end?: number): CircularDoublyLinkedList<T> {\n    const size = this._size;\n\n    // Sanitize inputs\n    start = clamp(addIfBelow(toInteger(start, 0), size), 0, size);\n    end = clamp(addIfBelow(toInteger(end, size), size), start, size);\n\n    // Check if empty\n    if (start >= end) {\n      return new CircularDoublyLinkedList<T>(0);\n    }\n\n    // Create segment copy\n    const node = this._get(start);\n    const core = copy(node, end - start);\n\n    // Return copied segment as a list\n    const list = new CircularDoublyLinkedList<T>(core.size);\n    list._root = core.root;\n    list._size = core.size;\n    list._tail = core.tail;\n\n    // Return new list\n    return list;\n  }\n\n  splice(\n    start: number,\n    deleteCount?: number,\n    ...items: T[]\n  ): CircularDoublyLinkedList<T> {\n    const size = this._size;\n\n    // Sanitize inputs\n    start = clamp(addIfBelow(toInteger(start, 0), size), 0, size);\n    deleteCount = clamp(toInteger(deleteCount, 0), 0, size - start);\n\n    // Remove deleted items, if any\n    let list: CircularDoublyLinkedList<T>;\n    if (deleteCount <= 0) {\n      list = new CircularDoublyLinkedList<T>(0);\n    } else {\n      const { root, size, tail } = this._cut(start, deleteCount);\n      list = new CircularDoublyLinkedList<T>(size);\n      list._root = root;\n      list._size = size;\n      list._tail = tail;\n    }\n\n    // Add new items\n    this._insert(start, items);\n\n    // Return deleted items as a list\n    return list;\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return getValues(this._root.next);\n  }\n\n  unshift(...values: T[]): number {\n    // Add values\n    this._presert(0, values);\n\n    // Return new size\n    return this._size;\n  }\n\n  values(): IterableIterator<T> {\n    return getValues(this._root.next);\n  }\n\n  /**\n   * @internal\n   */\n  protected _cut(start: number, count: number): DoublyLinkedCore<T> {\n    // Get previous\n    const prev = this._get(start - 1)!;\n\n    // Cut and get removed segment\n    const seg = cut(prev, count);\n\n    // Update size\n    this._size -= count;\n\n    // Update tail\n    if (start >= this._size) {\n      this._tail = prev;\n    }\n\n    // Return cut segment\n    return seg;\n  }\n\n  /**\n   * @internal\n   */\n  protected _get(index: number): Node<T> {\n    const mid = this._size / 2;\n    return ++index <= mid\n      ? get(this._root, index)!\n      : get(this._tail, index - this._size)!;\n  }\n\n  /**\n   * @internal\n   */\n  protected _insert(index: number, values: T[]): void {\n    // If no values\n    const N = values.length;\n    if (N <= 0) {\n      return;\n    }\n\n    // If no capacity\n    if (this._capacity <= 0) {\n      this._overflow(values);\n      return;\n    }\n\n    // Check free space\n    let free = this._capacity - this._size;\n    if (free >= N) {\n      this._safeInsert(index, values);\n      return;\n    }\n\n    // Check if \"infinite\" capacity yet not enough space\n    if (!this._isFinite) {\n      this._safeInsert(index, values.slice(0, free));\n      throw new Error(\"Out of memory\");\n    }\n\n    // Remove from head\n    if (index > 0) {\n      const shifted = Math.min(index, N - free);\n      const { root } = this._cut(0, shifted);\n      this._overflow(getValues(root.next));\n      index -= shifted;\n      free += shifted;\n    }\n\n    // Check free space\n    if (free >= N) {\n      this._safeInsert(index, values);\n      return;\n    }\n\n    // Remove from items and insert remaining\n    const mid = values.length - free;\n    this._overflow(values.slice(0, mid));\n    this._safeInsert(0, values.slice(mid));\n  }\n\n  /**\n   * @internal\n   *\n   * Emit an overflow event containing the items evicted from the collection.\n   *\n   * @param evicted - The items evicted from the collection.\n   */\n  protected _overflow(evicted: Iterable<T>): void {\n    if (!Array.isArray(evicted)) {\n      evicted = Array.from(evicted);\n    }\n    this._emitter.emit(BoundedEvent.Overflow, evicted);\n  }\n\n  /**\n   * @internal\n   */\n  protected _presert(index: number, values: T[]): void {\n    // If no values\n    const N = values.length;\n    if (N <= 0) {\n      return;\n    }\n\n    // If no capacity\n    if (this._capacity <= 0) {\n      this._overflow(values);\n      return;\n    }\n\n    // Check free space\n    let free = this._capacity - this._size;\n    if (free >= N) {\n      this._safeInsert(index, values);\n      return;\n    }\n\n    // Check if \"infinite\" capacity yet not enough space\n    if (!this._isFinite) {\n      this._safeInsert(0, values.slice(values.length - free));\n      throw new Error(\"Out of memory\");\n    }\n\n    // Remove from tail\n    if (index < this._size) {\n      const popped = Math.min(this._size - index, N - free);\n      const { root } = this._cut(this._size - popped, popped);\n      this._overflow(getValues(root.next));\n      free += popped;\n    }\n\n    // Check free space\n    if (free >= N) {\n      this._safeInsert(index, values);\n      return;\n    }\n\n    // Remove from items and insert remaining\n    this._overflow(values.slice(free));\n    this._safeInsert(this._size, values.slice(0, free));\n  }\n\n  /**\n   * @internal\n   */\n  protected _safeInsert(index: number, values: T[]): void {\n    // Sanitize input\n    if (values.length <= 0) {\n      return;\n    }\n\n    // Create segment\n    const { root, size, tail } = toList(values);\n    const head = root.next!;\n\n    // Insert segment\n    const prev = this._get(index - 1);\n    const next = prev.next;\n    head.prev = prev;\n    tail.next = next;\n    prev.next = head;\n    if (next != null) {\n      next.prev = tail;\n    }\n\n    // Update list state\n    this._tail = index < this._size ? this._tail : tail!;\n    this._size += size;\n  }\n}\n","import { BoundedEvent } from \"../../types/boundedEvent\";\nimport { Bounded } from \"../../types/bounded\";\nimport { Deque } from \"../../types/deque\";\n\nimport { CircularDoublyLinkedList } from \"../list/circularDoublyLinkedList\";\n\n/**\n * A circular deque is similar to a traditional deque, but uses a fixed-size,\n * circular buffer. When the deque reaches its maximum capacity and a new\n * element is added, the oldest is discarded, thus maintaining its size.\n *\n * This structure efficiently utilizes memory for applications where only the\n * most recent additions are of interest and older data can be discarded.\n *\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularLinkedDeque<T> implements Bounded<T>, Deque<T> {\n  /**\n   * @internal\n   */\n  protected _list: CircularDoublyLinkedList<T>;\n\n  /**\n   * Creates a new stack with `capacity` defaulted to `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new stack with the given capacity.\n   *\n   * @param capacity - the stack's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new stack. Initial capacity is the number of items given.\n   *\n   * @param items - the values to store in the stack.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    this._list = new CircularDoublyLinkedList(capacity as number);\n  }\n\n  get capacity(): number {\n    return this._list.capacity;\n  }\n\n  get size(): number {\n    return this._list.size;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return CircularLinkedDeque.name;\n  }\n\n  set capacity(capacity: number) {\n    this._list.capacity = capacity;\n  }\n\n  first(): T | undefined {\n    return this._list.at(0);\n  }\n\n  front(): T | undefined {\n    return this._list.at(0);\n  }\n\n  clear(): void {\n    this._list.clear();\n  }\n\n  entries(): IterableIterator<[number, T]> {\n    return this._list.entries();\n  }\n\n  forEach(\n    callbackfn: (value: T, index: number, collection: this) => void,\n    thisArg?: unknown\n  ): void {\n    this._list.forEach((v, i) => callbackfn.call(thisArg, v, i, this), thisArg);\n  }\n\n  has(value: T): boolean {\n    return this._list.has(value);\n  }\n\n  keys(): IterableIterator<number> {\n    return this._list.keys();\n  }\n\n  last(): T | undefined {\n    return this._list.at(-1);\n  }\n\n  pop(): T | undefined {\n    return this._list.pop();\n  }\n\n  push(...elems: T[]): number {\n    return this._list.push(...elems);\n  }\n\n  shift(): T | undefined {\n    return this._list.shift();\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.values();\n  }\n\n  top(): T | undefined {\n    return this._list.at(-1);\n  }\n\n  unshift(...elems: T[]): number {\n    return this._list.unshift(...elems);\n  }\n\n  values(): IterableIterator<T> {\n    return this._list.values();\n  }\n\n  addListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.addListener(event, listener);\n    return this;\n  }\n\n  on(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.on(event, listener);\n    return this;\n  }\n\n  removeListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.removeListener(event, listener);\n    return this;\n  }\n}\n","import { Bounded, BoundedEvent } from \"../..\";\nimport { LinkedCore, LinkedNode as Node } from \"../../types/linkedNode\";\nimport { List } from \"../../types/list\";\nimport { ARGS_MAX_LENGTH, LINKED_MAX_LENGTH } from \"../../utils/constants\";\nimport { isInfinity, isLinkedLength, isNumber } from \"../../utils/is\";\nimport { chunk } from \"../../utils/iterable\";\nimport {\n  copy,\n  cut,\n  entries,\n  get,\n  has,\n  keys,\n  toList,\n  values,\n} from \"../../utils/linkedNode\";\nimport { addIfBelow, clamp, isInRange, toInteger } from \"../../utils/math\";\nimport { CircularBase } from \"../circularBase\";\n\nexport class CircularLinkedList<T>\n  extends CircularBase<T>\n  implements Bounded<T>, List<T>\n{\n  /**\n   * @internal\n   * The maximum number of elements that can be stored in the collection.\n   */\n  protected _capacity: number;\n\n  /**\n   * @internal\n   * Whether capacity is finite (true) or infinite (false).\n   */\n  protected _isFinite: boolean;\n\n  /**\n   * @internal\n   * The root of the linked list\n   */\n  protected _root: Node<T>;\n\n  /**\n   * @internal\n   * The current size of the list (0 \\<= size \\<= capacity)\n   */\n  protected _size: number;\n\n  /**\n   * @internal\n   * The last node in the linked list.\n   */\n  protected _tail: Node<T>;\n\n  /**\n   * Creates a standard linked list (no capacity restriction).\n   */\n  constructor();\n  /**\n   * Creates a linked list with the given capacity.\n   *\n   * @param capacity - the list's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a linked list with the given items. Capacity is set to the number of items.\n   *\n   * @param items - the values to store in the list.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    super();\n\n    // Initialize class variables\n    this._capacity = LINKED_MAX_LENGTH;\n    this._isFinite = false;\n    this._root = { value: undefined } as Node<T>;\n    this._size = 0;\n    this._tail = this._root;\n\n    // Case 1: input is null or undefined\n    if (capacity == null) {\n      return;\n    }\n\n    // Case 2: input is capacity\n    if (isNumber(capacity)) {\n      this.capacity = capacity;\n      return;\n    }\n\n    // Case 3: capacity is iterable\n    for (const vals of chunk(capacity, ARGS_MAX_LENGTH)) {\n      this._insert(this._size, vals);\n    }\n    this._capacity = this._size;\n    this._isFinite = true;\n  }\n\n  get capacity(): number {\n    return this._isFinite ? this._capacity : Infinity;\n  }\n\n  get size(): number {\n    return this._size;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return CircularLinkedList.name;\n  }\n\n  set capacity(capacity: number) {\n    // Convert input to a number\n    capacity = +capacity;\n\n    // Check capacity\n    if (isInfinity(capacity)) {\n      // If capacity is Infinity\n      capacity = LINKED_MAX_LENGTH;\n      this._isFinite = false;\n    } else if (isLinkedLength(capacity)) {\n      // If capacity is valid\n      this._isFinite = true;\n    } else {\n      // If capacity is invalid\n      throw new RangeError(\"Invalid capacity\");\n    }\n\n    // Update capacity\n    this._capacity = capacity;\n\n    // If current size fits within new capacity\n    if (this._size <= capacity) {\n      return;\n    }\n\n    // Shrink\n    const diff = this._size - capacity;\n    const { root } = cut(this._root, diff);\n    this._size -= diff;\n\n    // Update tail, if needed\n    if (this._size <= 0) {\n      this._tail = this._root;\n    }\n\n    // Emit discarded items\n    this._overflow(root.next);\n  }\n\n  at(index?: number): T | undefined {\n    // Sanitize input\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return undefined;\n    }\n\n    // Return value\n    return this._get(index)!.value;\n  }\n\n  clear(): void {\n    this._size = 0;\n    this._tail = this._root;\n    this._root.next = undefined;\n  }\n\n  delete(index: number): boolean {\n    // Sanitize input\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return false;\n    }\n\n    // Delete value\n    this._cut(index, 1);\n\n    return true;\n  }\n\n  entries(): IterableIterator<[number, T]> {\n    return entries(this._root.next);\n  }\n\n  fill(value: T, start?: number, end?: number): this {\n    const size = this._size;\n\n    // Sanitize inputs\n    start = clamp(addIfBelow(toInteger(start, 0), size), 0, size);\n    end = clamp(addIfBelow(toInteger(end, size), size), start, size);\n    if (start >= end) {\n      return this;\n    }\n\n    // Fill values\n    let node = this._get(start)!;\n    for (let i = start; i < end; ++i) {\n      node.value = value;\n      node = node.next!;\n    }\n\n    // Return list\n    return this;\n  }\n\n  forEach(\n    callbackfn: (value: T, index: number, list: this) => void,\n    thisArg?: unknown\n  ): void {\n    let node = this._root;\n    for (let i = 0; i < this._size; ++i) {\n      node = node.next!;\n      callbackfn.call(thisArg, node.value, i, this);\n    }\n  }\n\n  has(value: T): boolean {\n    return has(this._root.next, value);\n  }\n\n  keys(): IterableIterator<number> {\n    return keys(this._root.next);\n  }\n\n  pop(): T | undefined {\n    // If list is empty\n    if (this._size <= 0) {\n      return undefined;\n    }\n\n    // Remove last value\n    const { root } = this._cut(this._size - 1, 1);\n\n    // Return value\n    return root.next!.value;\n  }\n\n  push(...values: T[]): number {\n    // Add values\n    this._insert(this._size, values);\n\n    // Return size\n    return this._size;\n  }\n\n  set(index: number, value: T): T | undefined {\n    // Sanitize input\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return undefined;\n    }\n\n    // Set value\n    const node = this._get(index);\n    const prevValue = node.value;\n    node.value = value;\n\n    // Return previous value\n    return prevValue;\n  }\n\n  shift(): T | undefined {\n    // If list is empty\n    if (this._size <= 0) {\n      return undefined;\n    }\n\n    // Remove first value\n    const { root } = this._cut(0, 1);\n\n    // Return value\n    return root.next!.value;\n  }\n\n  slice(start?: number, end?: number): CircularLinkedList<T> {\n    const size = this._size;\n\n    // Sanitize inputs\n    start = clamp(addIfBelow(toInteger(start, 0), size), 0, size);\n    end = clamp(addIfBelow(toInteger(end, size), size), start, size);\n\n    // Check if empty\n    if (start >= end) {\n      return new CircularLinkedList<T>(0);\n    }\n\n    // Create segment copy\n    const node = this._get(start);\n    const core = copy(node, end - start);\n\n    // Return copied segment as a list\n    const list = new CircularLinkedList<T>(core.size);\n    list._root = core.root;\n    list._size = core.size;\n    list._tail = core.tail;\n\n    // Return new list\n    return list;\n  }\n\n  splice(\n    start: number,\n    deleteCount?: number,\n    ...items: T[]\n  ): CircularLinkedList<T> {\n    const size = this._size;\n\n    // Sanitize inputs\n    start = clamp(addIfBelow(toInteger(start, 0), size), 0, size);\n    deleteCount = clamp(toInteger(deleteCount, 0), 0, size - start);\n\n    // Remove deleted items, if any\n    let list: CircularLinkedList<T>;\n    if (deleteCount <= 0) {\n      list = new CircularLinkedList<T>(0);\n    } else {\n      const { root, size, tail } = this._cut(start, deleteCount);\n      list = new CircularLinkedList<T>(deleteCount);\n      list._root = root;\n      list._size = size;\n      list._tail = tail;\n    }\n\n    // Add new items\n    this._insert(start, items);\n\n    // Return deleted items as a list\n    return list;\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return values(this._root.next);\n  }\n\n  unshift(...values: T[]): number {\n    // Add values\n    this._presert(0, values);\n\n    // Return new size\n    return this._size;\n  }\n\n  values(): IterableIterator<T> {\n    return values(this._root.next);\n  }\n\n  /**\n   * @internal\n   */\n  protected _cut(start: number, count: number): LinkedCore<T> {\n    // Get previous\n    const prev = this._get(start - 1)!;\n\n    // Cut and get removed segment\n    const core = cut(prev, count);\n\n    // Update size\n    this._size -= count;\n\n    // Update tail\n    if (start >= this._size) {\n      this._tail = prev;\n    }\n\n    // Return cut segment\n    return core;\n  }\n\n  /**\n   * @internal\n   */\n  protected _get(index: number): Node<T> {\n    return ++index == this._size ? this._tail : get(this._root, index)!;\n  }\n\n  /**\n   * @internal\n   */\n  protected _insert(index: number, values: T[]): void {\n    // If no values\n    const N = values.length;\n    if (N <= 0) {\n      return;\n    }\n\n    // If no capacity\n    if (this._capacity <= 0) {\n      this._overflow(values);\n      return;\n    }\n\n    // Check free space\n    let free = this._capacity - this._size;\n    if (free >= N) {\n      this._safeInsert(index, values);\n      return;\n    }\n\n    // Check if \"infinite\" capacity yet not enough space\n    if (!this._isFinite) {\n      this._safeInsert(index, values.slice(0, free));\n      throw new Error(\"Out of memory\");\n    }\n\n    // Remove from head\n    if (index > 0) {\n      const shifted = Math.min(index, N - free);\n      const { root } = this._cut(0, shifted);\n      this._overflow(root.next);\n      index -= shifted;\n      free += shifted;\n    }\n\n    // Check free space\n    if (free >= N) {\n      this._safeInsert(index, values);\n      return;\n    }\n\n    // Remove from items and insert remaining\n    const mid = values.length - free;\n    this._overflow(values.slice(0, mid));\n    this._safeInsert(0, values.slice(mid));\n  }\n\n  /**\n   * @internal\n   *\n   * Emit an overflow event containing the items evicted from the collection.\n   *\n   * @param evicted - The items evicted from the collection.\n   */\n  protected _overflow(evicted?: T[] | Node<T>): void {\n    if (evicted == null) {\n      return;\n    }\n    if (Array.isArray(evicted)) {\n      this._emitter.emit(BoundedEvent.Overflow, evicted);\n      return;\n    }\n    for (const array of chunk(values(evicted), ARGS_MAX_LENGTH)) {\n      this._emitter.emit(BoundedEvent.Overflow, array);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  protected _presert(index: number, values: T[]): void {\n    // If no values\n    const N = values.length;\n    if (N <= 0) {\n      return;\n    }\n\n    // If no capacity\n    if (this._capacity <= 0) {\n      this._overflow(values);\n      return;\n    }\n\n    // Check free space\n    let free = this._capacity - this._size;\n    if (free >= N) {\n      this._safeInsert(index, values);\n      return;\n    }\n\n    // Check if \"infinite\" capacity yet not enough space\n    if (!this._isFinite) {\n      this._safeInsert(0, values.slice(values.length - free));\n      throw new Error(\"Out of memory\");\n    }\n\n    // Remove from tail\n    if (index < this._size) {\n      const popped = Math.min(this._size - index, N - free);\n      const { root } = this._cut(this._size - popped, popped);\n      this._overflow(root.next);\n      free += popped;\n    }\n\n    // Check free space\n    if (free >= N) {\n      this._safeInsert(index, values);\n      return;\n    }\n\n    // Remove from items and insert remaining\n    this._overflow(values.slice(free));\n    this._safeInsert(this._size, values.slice(0, free));\n  }\n\n  /**\n   * @internal\n   */\n  protected _safeInsert(index: number, values: T[]): void {\n    // Sanitize input\n    if (values.length <= 0) {\n      return;\n    }\n\n    // Create segment\n    const { root, size, tail } = toList(values);\n\n    // Insert segment\n    const prev = this._get(index - 1);\n    tail!.next = prev.next;\n    prev.next = root.next;\n\n    // Update list state\n    this._tail = index < this._size ? this._tail : tail!;\n    this._size += size;\n  }\n}\n","import {\n  SkipCore,\n  SkipEntry,\n  SkipLink,\n  SkipNode,\n  SkipStack,\n} from \"../types/skipList\";\nimport { clamp, log } from \"./math\";\n\n/**\n * Adjusts the `span` property of nodes in a skip list across specified levels.\n *\n * The adjustment can increase (for positive `diff`) or decrease (for negative `diff`)\n * the `span` values. This function is used to maintain\n * the integrity of skip list distances after insertion or deletion.\n *\n * @param stack - An array representing a vertical cross-section (stack) of the skip list at a certain position.\n *                Each element in the stack corresponds to a node at a different level, starting from the bottom.\n * @param diff - The numerical difference to apply to the `span` of each node in the stack. A positive `diff`\n *               increases the span, and a negative `diff` value decreases it.\n * @param min - The minimum level (0-based index) at which to start adjusting spans. Defaults to 0.\n */\nexport function adjustSpan<T>(\n  stack: SkipStack<T>,\n  diff: number,\n  min = 0\n): void {\n  const Y = stack.length;\n  for (let y = min >= 0 ? min : 0; y < Y; ++y) {\n    const levels = stack[y].node.levels;\n    const { next, span } = levels[y];\n    levels[y] = { next: next, span: span + diff };\n  }\n}\n\n/**\n * Calculates the maximum level for a skip list based on the given probability\n * factor and expected size.\n *\n * The maximum level determines how many forward pointers each element in the\n * skip list can have, which impacts the overall speed of search, insertion,\n * and deletion operations within the list.\n *\n * @param probability - The probability factor used for determining the level.\n *          It should be a number between 0 and 1 (exclusive). The probability\n *          factor affects the sparseness of the skip list; a lower value results\n *          in a shorter list, while a higher value results in a taller list.\n *\n * @param expectedSize - The expected number of elements in the skip list. It\n *                     should be a positive integer. The expected size\n *                     influences the optimal maximum level for the list.\n *\n * @returns The calculated optimal maximum level for the skip list. Returns 1\n *          if the probability factor is less than or equal to 0 or the\n *          expected size is less than or equal to 1. Returns Infinity if the\n *          probability factor is 1 or more, indicating an unbounded number of\n *          levels, and likely an error in inputs.\n */\nexport function calcMaxLevel(\n  probability: number,\n  expectedSize: number\n): number {\n  if (probability <= 0 || expectedSize <= 1) {\n    return 1;\n  }\n  if (probability >= 1) {\n    return Infinity;\n  }\n  return Math.ceil(log(expectedSize, 1 / probability));\n}\n\n/**\n * Copies a segment from a skip list, starting at a specified node\n * and copying a specified distance. The copied segment is\n * returned as a new {@link SkipCore}.\n *\n * @param node - The {@link SkipNode} from which the copy operation begins.\n * @param distance - The distance to copy from the start position. If this\n *                value exceeds the size of the original skip list, only the\n *                available nodes are copied.\n *\n * @returns The {@link SkipCore} of the duplicate list.\n */\nexport function copy<T>(\n  node: SkipNode<T> | undefined,\n  distance: number\n): SkipCore<T> {\n  // Create new list\n  let size = 0;\n  const root = toNode(undefined as T);\n  const tails: SkipNode<T>[] = [root];\n\n  // Check input\n  if (node == null || distance <= 0) {\n    return { root, size, tails };\n  }\n\n  // For each node\n  let maxY = 1;\n  const indexes: number[] = [-1];\n  while (node != null && size < distance) {\n    // Update maximum level\n    const Y = node.levels.length;\n    while (maxY < Y) {\n      tails[maxY] = root;\n      indexes[maxY] = -1;\n      ++maxY;\n    }\n\n    // Create and attach the duplicate node\n    const dupe = toNode(node.value, Y);\n    for (let y = 0; y < Y; ++y) {\n      tails[y].levels[y] = { next: dupe, span: size - indexes[y] };\n    }\n    tails.fill(dupe, 0, Y);\n    indexes.fill(size, 0, Y);\n\n    // Move to the next node\n    const { next, span } = node.levels[0];\n    node = next as SkipNode<T>;\n    size += span;\n  }\n\n  // Update the tail pointers\n  for (let y = 0; y < maxY; ++y) {\n    tails[y].levels[y] = { next: undefined, span: distance - indexes[y] };\n  }\n\n  // Return the copy\n  return { root, size, tails };\n}\n\n/**\n * Cuts a segment from a given skip list.\n *\n * The cut starts at the specified position and spans the given distance. The\n * cut segment is returned as a new skip list.\n *\n * @param core - The {@link SkipCore} representing the skip list from which to cut the segment.\n *               This skip list will be modified to reflect the removal.\n * @param start - The zero-based index indicating the start position of the cut, inclusive.\n * @param distance - The number of elements to be included in the cut segment.\n *\n * @returns A new {@link SkipCore} representing the skip list segment that has been cut.\n *\n * @remarks\n * - The height (levels) of the original list may be reduced if segment removal results in empty levels.\n * - The cut segment's height (levels) may be less than the original list. It will only contain\n *   levels that include nodes within the segment.\n */\nexport function cut<T>(\n  core: SkipCore<T>,\n  start: number,\n  end: number\n): SkipCore<T> {\n  // Initialize output\n  const segRoot = toNode(undefined as T);\n  const seg: SkipCore<T> = { root: segRoot, size: 0, tails: [segRoot] };\n\n  // Check inputs\n  if (start >= end || end <= 0 || start >= core.size) {\n    return seg;\n  }\n\n  // Get stacks\n  const prevStack = getStack(core, start - 1);\n  const tailStack = getStack(core, end - 1, Array.from(prevStack));\n\n  // Check size\n  let nextI = prevStack[0].index + prevStack[0].node.levels[0].span;\n  start = clamp(start, prevStack[0].index, nextI);\n  nextI = tailStack[0].index + tailStack[0].node.levels[0].span;\n  end = clamp(end, tailStack[0].index, nextI);\n  if (start >= end) {\n    return seg;\n  }\n  const size = end - start;\n  seg.size = size;\n\n  // Detach segment\n  let y: number;\n  let Y = prevStack.length;\n  for (y = 0; y < Y; ++y) {\n    const prev = prevStack[y];\n    const tail = tailStack[y];\n\n    // Check if segment exists at this level\n    if (prev.index >= tail.index) {\n      break;\n    }\n\n    // Connect segment start to new root\n    let edge = prev.node.levels[y];\n    let span = prev.index + edge.span - start;\n    segRoot.levels[y] = { next: edge.next, span };\n\n    // Remove segment from list\n    edge = tail.node.levels[y];\n    span = tail.index - prev.index + (edge.span - size);\n    prev.node.levels[y] = { next: edge.next, span };\n\n    // Detach segment end\n    tail.node.levels[y] = { next: undefined, span: end - tail.index };\n    seg.tails[y] = tail.node;\n  }\n\n  // Remove segment from untouched levels\n  adjustSpan(prevStack, -size, y);\n\n  if (y >= Y) {\n    // Remove empty levels from the source list\n    const levels = core.root.levels;\n    while (y > 1 && levels[y - 1].next == null) {\n      --y;\n    }\n    Y = y;\n    levels.length = Y;\n    core.tails.length = Y;\n  }\n\n  // Update tails from source list\n  core.size -= size;\n  if (start >= core.size) {\n    for (y = 0; y < Y; ++y) {\n      core.tails[y] = prevStack[y].node;\n    }\n  }\n\n  return seg;\n}\n\n/**\n * Iterates through a skip list, yielding each node's index\n * (position in the list) and value as a tuple.\n *\n * Iteration starts from the given node and continues the end of the list.\n * This generator function provides a convenient way to enumerate all nodes in\n * a skip list, similar to how `Array.prototype.entries()` works for arrays.\n *\n * @param node - The node at which to start iterating.\n */\nexport function* entries<T>(node?: SkipNode<T>): Generator<[number, T]> {\n  let i = 0;\n  while (node != null) {\n    yield [i, node.value];\n    const { next, span } = node.levels[0];\n    node = next;\n    i += span;\n  }\n}\n\nexport function getEntry<T>(core: SkipCore<T>, target: number): SkipEntry<T> {\n  // Check target minimum\n  if (target < 0) {\n    return { index: -1, node: core.root };\n  }\n\n  // Check target maximum\n  const tails = core.tails;\n  let index = core.size - tails[0].levels[0].span;\n  if (target >= index) {\n    return { index, node: tails[0] };\n  }\n\n  // Use tails as shortcuts\n  index = -1;\n  let y: number;\n  let node = core.root;\n  for (y = node.levels.length - 1; y >= 0 && index < target; --y) {\n    const i = core.size - tails[y].levels[y].span;\n    if (i > target) {\n      break;\n    }\n    index = i;\n    node = tails[y];\n  }\n\n  // Find node\n  while (y >= 0 && index < target) {\n    const { next, span } = node.levels[y];\n    if (index + span > target || next == null) {\n      --y;\n    } else {\n      index += span;\n      node = next;\n    }\n  }\n\n  // Return index and distance\n  return { index, node };\n}\n\nexport function getStack<T>(\n  core: SkipCore<T>,\n  target: number,\n  stack: SkipStack<T> = toStack(core.root, -1)\n): SkipStack<T> {\n  // Check target minimum\n  const Y = stack.length;\n  if (Y <= 0 || target <= stack[0].index) {\n    return stack;\n  }\n\n  // Check target maximum\n  const size = core.size;\n  const tails = core.tails;\n  if (target >= size - tails[0].levels[0].span) {\n    for (let y = 0; y < Y; ++y) {\n      const index = size - tails[y].levels[y].span;\n      stack[y] = { index, node: tails[y] };\n    }\n    return stack;\n  }\n\n  // Use tails as shortcuts\n  let y: number;\n  for (y = Y - 1; y >= 0 && stack[y].index < target; --y) {\n    const i = size - tails[y].levels[y].span;\n    if (i > target) {\n      break;\n    }\n    stack[y] = { index: i, node: tails[y] };\n  }\n\n  // Find node\n  while (y >= 0 && stack[y].index < target) {\n    const { index, node } = stack[y];\n    const { next, span } = node.levels[y];\n    if (index + span <= target && next != null) {\n      stack[y] = { index: index + span, node: next };\n    } else {\n      --y;\n    }\n  }\n\n  // Finish stack update\n  if (y > 0) {\n    const { index, node } = stack[y];\n    for (let i = 0; i < y; ++i) {\n      stack[i] = { index, node };\n    }\n  }\n\n  return stack;\n}\n\n/**\n * Determines whether a skip list contains a node with a specified value.\n *\n * Iteration starts from the given node and continues the end of the list.\n *\n * @param node - The {@link SkipNode} at which to start iterating.\n * @param value - The value to search for.\n *\n * @returns `true` if the specified value is found, `false` otherwise.\n */\nexport function has<T>(node: SkipNode<T> | undefined, value: T): boolean {\n  while (node != null) {\n    if (node.value === value) {\n      return true;\n    }\n    node = node.levels[0].next;\n  }\n  return false;\n}\n\n/**\n * Increases the number of levels in a skip list to a specified level.\n *\n * Each new level is initialized such that it spans the entire list.\n * This function directly modifies the input skip list core.\n *\n * @param core - The {@link SkipCore} whose levels should be increased. The core is directly modified.\n *\n * @param levels - The number of levels the skip list should be increased to. If the current number\n *                 of levels is already equal to or greater than this value, no changes are made.\n */\nexport function increaseLevels<T>(core: SkipCore<T>, levels: number): void {\n  const { root, size, tails } = core;\n  for (let y = tails.length; y < levels; ++y) {\n    root.levels[y] = { next: undefined, span: size + 1 };\n    tails[y] = root;\n  }\n}\n\n/**\n * Inserts a skip list segment (`src`) into another skip list (`dest`) at a specified index.\n *\n * @param dest - The {@link SkipCore} representing the destination skip list into which the segment is to be\n *               inserted. This skip list will be modified to include the nodes from the source segment.\n * @param index - The zero-based position within the destination list at which the source segment is to be inserted.\n * @param src - The {@link SkipCore} representing the source skip list segment to be inserted into the destination\n *              list. This skip list's tail nodes will be modified to contain links within the destination list.\n *\n * @remarks\n * - The function may increase the height (number of levels) of the destination list if the source segment has\n *   more levels than the destination. This ensures that the merged list can accommodate the full structure of\n *   the segment being inserted.\n */\nexport function insert<T>(\n  dest: SkipCore<T>,\n  index: number,\n  src: SkipCore<T>\n): void {\n  // Check source values\n  if (src.size <= 0) {\n    return;\n  }\n\n  // Increase destination's height if necessary\n  const minY = src.tails.length;\n  increaseLevels(dest, minY);\n\n  // Attach segment\n  const prevs = getStack(dest, index - 1);\n  for (let y = 0; y < minY; ++y) {\n    const prev = prevs[y].node;\n    const tail = src.tails[y];\n\n    // Attach segment tail\n    const prevEdge = prev.levels[y];\n    const tailEdge = tail.levels[y];\n    let span = prevs[y].index - index + prevEdge.span + tailEdge.span;\n    tail.levels[y] = { next: prevEdge.next, span };\n\n    // Attach segment head\n    const rootEdge = src.root.levels[y];\n    span = index - prevs[y].index + (rootEdge.span - 1);\n    prev.levels[y] = { next: rootEdge.next, span };\n  }\n\n  // Update higher levels\n  adjustSpan(prevs, src.size, minY);\n\n  // Update tails\n  if (index === dest.size) {\n    for (let y = 0; y < minY; ++y) {\n      dest.tails[y] = src.tails[y];\n    }\n  }\n\n  // Update size\n  dest.size += src.size;\n}\n\n/**\n * Iterates through a skip list, yielding each node's index\n * (position in the list).\n *\n * Iteration starts from the given node and continues the end of the list.\n * This function provides a convenient way to enumerate all nodes in\n * a skip list, similar to how `Array.prototype.entries()` works for arrays.\n *\n * @param node - The {@link SkipNode} at which to start iterating.\n */\nexport function* keys<T>(node?: SkipNode<T>): Generator<number> {\n  let i = 0;\n  while (node != null) {\n    yield i;\n    const { next, span } = node.levels[0];\n    node = next;\n    i += span;\n  }\n}\n\n/**\n * Iterates through a skip list, yielding each node's height.\n *\n * Iteration starts from the given node and continues the end of the list.\n *\n * @param node - The {@link SkipNode} at which to start iterating.\n */\nexport function* levels<T>(node?: SkipNode<T>): Generator<number> {\n  while (node != null) {\n    yield node.levels.length;\n    node = node.levels[0].next;\n  }\n}\n\n/**\n * Creates a generator that yields each node in a skip list.\n *\n * Iteration starts from the given node and continues the end of the list.\n *\n * @param node - The {@link SkipNode} at which to start iterating.\n */\nexport function* nodes<T>(node?: SkipNode<T>): Generator<SkipNode<T>> {\n  while (node != null) {\n    yield node;\n    node = node.levels[0].next;\n  }\n}\n\n/**\n * Constructs a skip list from an array of levels and an array of values.\n *\n * @param levels - An array of integers that determines the number of\n *                 levels of the corresponding value in the `values` array.\n * @param values - An array of values to be stored in the skip list. Each\n *                 value is assigned to a new node in the list.\n *\n * @returns A tuple containing three elements:\n *          - The first element is the root {@link SkipNode} of the skip list. This is a dummy node immediately\n *            prior to the first value.\n *          - The second element is an array of {@link SkipNode}s representing the tail nodes at each level.\n *          - The third element is an integer `X` representing the number of nodes successfully added to the list,\n *            not including the root node.\n *\n * @remarks\n * - If the lengths of the input arrays do not match, the function operates on the smallest length.\n * - A dummy root node is created and updated to have up to the maximum level in the `levels` array.\n */\nexport function toList<T>(levels: number[], values: T[]): SkipCore<T> {\n  // Get # of values (X) and max level (Y)\n  let Y = -Infinity;\n  const size = Math.min(levels.length, values.length);\n  for (let y = 0; y < size; ++y) {\n    Y = Y >= levels[y] ? Y : levels[y];\n  }\n\n  // Check inputs\n  if (Y <= 0 || size <= 0) {\n    const root = toNode(undefined as T);\n    return { root, size: 0, tails: [root] };\n  }\n\n  // Create root node and tails array\n  const root = toNode(undefined as T, Y, size + 1);\n  const tails = new Array(Y).fill(root);\n\n  // For each value\n  for (let i = 0; i < size; ++i) {\n    // Create node\n    Y = levels[i];\n    const span = size - i;\n    const next = toNode(values[i], Y, span);\n\n    // Append node\n    for (let y = 0; y < Y; ++y) {\n      const levels = tails[y].levels;\n      levels[y] = { next, span: levels[y].span - span };\n      tails[y] = next;\n    }\n  }\n\n  // Return root, tails and list length\n  return { root, size, tails };\n}\n\n/**\n * Generates a new skip list node.\n *\n * @param value - The value to be stored in the new skip list node.\n * @param levels - The number of levels the node participates in within the skip list. Defaults to `1`.\n * @param span - The uniform distance to the next node at each level. Defaults to `1`.\n * @param next - The uniform next node at each level. Defaults to `undefined`.\n *\n * @returns A {@link SkipNode} object populated with the specified value and levels array. Each\n *          level in the array is initialized with a `next` pointer and `span` distance set to\n *          the specified values.\n */\nexport function toNode<T>(\n  value: T,\n  levels = 1,\n  span = 1,\n  next?: SkipNode<T>\n): SkipNode<T> {\n  const array = new Array<SkipLink<T>>(levels);\n  for (let i = 0; i < levels; ++i) {\n    array[i] = { next, span };\n  }\n  return { value, levels: array };\n}\n\n/**\n * Generates a skip stack filled with pointers to the given node and index.\n *\n * @param node - The {@link SkipNode} to which all pointers in the generated stack will point.\n * @param index - The index in the skip list at which the node is located. Defaults to `0`.\n *\n * @returns A {@link SkipStack} array, where each level points to `node` with index `index`.\n *          The length of this array is equal to the number of levels in the input node.\n */\nexport function toStack<T>(node: SkipNode<T>, index = 0): SkipStack<T> {\n  const N = node.levels.length;\n  const stack: SkipStack<T> = new Array(N);\n  for (let i = 0; i < N; ++i) {\n    stack[i] = { index, node };\n  }\n  return stack;\n}\n\n/**\n * Reduces the height of the skip list to the specified level.\n *\n * @param node - The skip node.\n * @param level - The target level.\n */\nexport function truncateLevels<T>(\n  node: SkipNode<T> | undefined,\n  level: number\n): void {\n  // Check inputs\n  if (node == null || node.levels.length <= level) {\n    return;\n  }\n\n  // Truncate nodes\n  while (node != null) {\n    const next = node.levels[level].next as SkipNode<T>;\n    node.levels.length = level;\n    node = next!;\n  }\n}\n\n/**\n * Iterates through a skip list, yielding each node's value.\n *\n * Iteration starts from the given node and continues the end of the list.\n * This function provides a convenient way to enumerate all nodes in\n * a skip list, similar to how `Array.prototype.entries()` works for arrays.\n *\n * @param node - The {@link SkipNode} at which to start iterating.\n */\nexport function* values<T>(node?: SkipNode<T>): Generator<T> {\n  while (node != null) {\n    yield node.value;\n    node = node.levels[0].next;\n  }\n}\n","import { BoundedEvent } from \"../../types/boundedEvent\";\nimport { Bounded, BoundedConfig } from \"../../types/bounded\";\nimport {\n  SkipList,\n  SkipListConfig,\n  SkipCore,\n  SkipNode,\n} from \"../../types/skipList\";\n\nimport { ARGS_MAX_LENGTH, LINKED_MAX_LENGTH } from \"../../utils/constants\";\nimport {\n  isArrayLength,\n  isInfinity,\n  isIterable,\n  isLinkedLength,\n  isNumber,\n} from \"../../utils/is\";\nimport { chunk } from \"../../utils/iterable\";\nimport {\n  addIfBelow,\n  clamp,\n  isInRange,\n  simulateWinStreak,\n  toInteger,\n} from \"../../utils/math\";\nimport {\n  calcMaxLevel,\n  copy,\n  cut,\n  entries,\n  getEntry,\n  has,\n  insert,\n  keys,\n  toList,\n  toNode,\n  truncateLevels,\n  values,\n} from \"../../utils/skipList\";\n\nimport { CircularBase } from \"../circularBase\";\n\nexport interface CircularSkipListConfig extends BoundedConfig, SkipListConfig {}\n\nexport class CircularSkipList<T>\n  extends CircularBase<T>\n  implements Bounded<T>, SkipList<T>\n{\n  /**\n   * @internal\n   * The maximum number of elements that can be stored in the collection.\n   */\n  protected _capacity: number;\n\n  /**\n   * @internal\n   * Whether capacity is finite (true) or infinite (false).\n   */\n  protected _isFinite: boolean;\n\n  /**\n   * @internal\n   * The maximum number of levels in the skip list.\n   */\n  protected _maxLevel: number;\n\n  /**\n   * @internal\n   * The probability factor used to randomly determine the levels\n   * of new nodes. Should be a value between 0 and 1, where a lower\n   * value results in fewer levels on average.\n   */\n  protected _p: number;\n\n  /**\n   * @internal\n   * The root of the skip list\n   */\n  protected _root: SkipNode<T>;\n\n  /**\n   * @internal\n   * The current size of the list (0 \\<= size \\<= capacity)\n   */\n  protected _size: number;\n\n  /**\n   * @internal\n   * The last nodes in the skip list at each level.\n   */\n  protected _tails: SkipNode<T>[];\n\n  constructor();\n  constructor(capacity?: number | null);\n  constructor(config: CircularSkipListConfig);\n  constructor(items: Iterable<T>);\n  constructor(config?: CircularSkipListConfig | Iterable<T> | null | number) {\n    super();\n\n    // Initialize class variables\n    this._capacity = LINKED_MAX_LENGTH;\n    this._isFinite = false;\n    this._p = 0.5;\n    this._maxLevel = calcMaxLevel(this._p, LINKED_MAX_LENGTH);\n    this._root = toNode(undefined as T);\n    this._size = 0;\n    this._tails = [this._root];\n\n    // Case 1: input is null or undefined\n    if (config == null) {\n      return;\n    }\n\n    // Case 2: input is capacity\n    if (isNumber(config)) {\n      this.capacity = config;\n      return;\n    }\n\n    // Case 3: input is config\n    if (!isIterable(config)) {\n      this.capacity = config.capacity ?? this._capacity;\n      this.p = config.p ?? this._p;\n      const size = config.expectedSize ?? this._capacity;\n      this.maxLevel = config.maxLevel ?? calcMaxLevel(this._p, size);\n      return;\n    }\n\n    // Case 4: input is an iterable\n    for (const vals of chunk(config, ARGS_MAX_LENGTH)) {\n      this._insert(this._size, vals);\n    }\n    this._capacity = this._size;\n    this._isFinite = true;\n  }\n\n  get capacity(): number {\n    return this._isFinite ? this._capacity : Infinity;\n  }\n\n  get levels(): number {\n    return this._root.levels.length;\n  }\n\n  get maxLevel(): number {\n    return this._maxLevel;\n  }\n\n  get p(): number {\n    return this._p;\n  }\n\n  get size(): number {\n    return this._size;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return CircularSkipList.name;\n  }\n\n  set capacity(capacity: number) {\n    // Convert input to a number\n    capacity = +capacity;\n\n    // Check capacity\n    if (isInfinity(capacity)) {\n      // If capacity is Infinity\n      capacity = LINKED_MAX_LENGTH;\n      this._isFinite = false;\n    } else if (isLinkedLength(capacity)) {\n      // If capacity is valid\n      this._isFinite = true;\n    } else {\n      // If capacity is invalid\n      throw new RangeError(\"Invalid capacity\");\n    }\n\n    // Update capacity\n    this._capacity = capacity;\n\n    // If current size fits within new capacity\n    if (this._size <= capacity) {\n      return;\n    }\n\n    // Shrink list and emit discarded items\n    const { root } = this._cut(0, this._size - capacity);\n    this._overflow(root.levels[0].next);\n  }\n\n  set maxLevel(maxLevel: number) {\n    // Convert input to number\n    maxLevel = +maxLevel;\n\n    // If input is invalid\n    if (!isArrayLength(maxLevel) || maxLevel <= 0) {\n      throw new RangeError(\"Invalid maxLevel\");\n    }\n\n    // Update\n    this._maxLevel = maxLevel;\n\n    // Remove excess levels\n    if (maxLevel < this.levels) {\n      truncateLevels(this._root, maxLevel);\n    }\n  }\n\n  set p(p: number) {\n    // Convert input to number\n    p = +p;\n\n    // If input is invalid\n    if (isNaN(p) || p < 0 || p > 1) {\n      throw new RangeError(\"Invalid p\");\n    }\n\n    // Update\n    this._p = p;\n  }\n\n  at(index: number): T | undefined {\n    // Sanitize input\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return undefined;\n    }\n\n    // Return value\n    const core = { root: this._root, size: this._size, tails: this._tails };\n    return getEntry(core, index).node.value;\n  }\n\n  clear(): void {\n    this._size = 0;\n    this._tails = [this._root];\n    this._root.levels.length = 1;\n    this._root.levels[0] = { next: undefined, span: 1 };\n  }\n\n  delete(index: number): boolean {\n    // Sanitize input\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return false;\n    }\n\n    // Delete value\n    this._cut(index, 1);\n\n    // Return success\n    return true;\n  }\n\n  entries(): IterableIterator<[number, T]> {\n    return entries(this._root.levels[0].next);\n  }\n\n  fill(value: T, start?: number, end?: number): this {\n    const size = this._size;\n\n    // Sanitize inputs\n    start = clamp(addIfBelow(toInteger(start, 0), size), 0, size);\n    end = clamp(addIfBelow(toInteger(end, size), size), start, size);\n    if (start >= end) {\n      return this;\n    }\n\n    // Fill values\n    const core = { root: this._root, size: this._size, tails: this._tails };\n    let { node } = getEntry(core, start);\n    for (let i = start; i < end; ++i) {\n      node.value = value;\n      node = node.levels[0].next!;\n    }\n\n    // Return list\n    return this;\n  }\n\n  forEach(\n    callbackfn: (value: T, index: number, list: this) => void,\n    thisArg?: unknown\n  ): void {\n    let node = this._root;\n    for (let i = 0; i < this._size; ++i) {\n      node = node.levels[0].next!;\n      callbackfn.call(thisArg, node.value, i, this);\n    }\n  }\n\n  has(value: T): boolean {\n    return has(this._root.levels[0].next, value);\n  }\n\n  keys(): IterableIterator<number> {\n    return keys(this._root.levels[0].next);\n  }\n\n  pop(): T | undefined {\n    // If list is empty\n    if (this._size <= 0) {\n      return undefined;\n    }\n\n    // Remove last value\n    const { root } = this._cut(this._size - 1, 1);\n\n    // Return value\n    return root.levels[0].next!.value;\n  }\n\n  push(...values: T[]): number {\n    // Add values\n    this._insert(this._size, values);\n\n    // Return new size\n    return this._size;\n  }\n\n  set(index: number, value: T): T | undefined {\n    // Sanitize input\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return undefined;\n    }\n\n    // Set value\n    const core = { root: this._root, size: this._size, tails: this._tails };\n    const { node } = getEntry(core, index);\n    const prevValue = node.value;\n    node.value = value;\n\n    // Return previous value\n    return prevValue;\n  }\n\n  shift(): T | undefined {\n    // If list is empty\n    if (this._size <= 0) {\n      return undefined;\n    }\n\n    // Remove first value\n    const { root } = this._cut(0, 1);\n\n    // Return value\n    return root.levels[0].next!.value;\n  }\n\n  slice(start?: number, end?: number): CircularSkipList<T> {\n    const size = this._size;\n\n    // Sanitize inputs\n    start = clamp(addIfBelow(toInteger(start, 0), size), 0, size);\n    end = clamp(addIfBelow(toInteger(end, size), size), start, size);\n\n    // Create config\n    const config: CircularSkipListConfig = {\n      capacity: 0,\n      p: this._p,\n      maxLevel: this._maxLevel,\n    };\n\n    // Check if empty\n    if (start >= end) {\n      return new CircularSkipList<T>(config);\n    }\n\n    // Create segment copy\n    const core = { root: this._root, size: this._size, tails: this._tails };\n    const seg = copy(getEntry(core, start).node, end - start);\n\n    // Return copied segment as a list\n    config.capacity = seg.size;\n    const list = new CircularSkipList<T>(config);\n    list._root = seg.root;\n    list._tails = seg.tails;\n    list._size = seg.size;\n\n    return list;\n  }\n\n  splice(\n    start: number,\n    deleteCount?: number,\n    ...items: T[]\n  ): CircularSkipList<T> {\n    const size = this._size;\n\n    // Sanitize inputs\n    start = clamp(addIfBelow(toInteger(start, 0), size), 0, size);\n    deleteCount = clamp(toInteger(deleteCount, 0), 0, size - start);\n\n    // Remove deleted items\n    const core = this._cut(start, deleteCount);\n\n    // Add new items\n    this._insert(start, items);\n\n    // Return deleted items as a list\n    const list = new CircularSkipList<T>({\n      capacity: deleteCount,\n      p: this._p,\n      maxLevel: this._maxLevel,\n    });\n    list._root = core.root;\n    list._tails = core.tails;\n    list._size = core.size;\n\n    return list;\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.values();\n  }\n\n  unshift(...values: T[]): number {\n    // Add values\n    this._presert(0, values);\n\n    // Return new size\n    return this._size;\n  }\n\n  values(): IterableIterator<T> {\n    return values(this._root.levels[0].next);\n  }\n\n  /**\n   * @internal\n   */\n  protected _cut(start: number, count: number): SkipCore<T> {\n    // Create list core\n    const core = { root: this._root, size: this._size, tails: this._tails };\n\n    // Cut and get removed segment\n    const seg = cut(core, start, start + count);\n\n    // Update list state\n    this._size = core.size;\n    this._tails = core.tails;\n\n    // Return cut segment\n    return seg;\n  }\n\n  /**\n   * @internal\n   */\n  protected _genLevels(N: number): number[] {\n    const levels = new Array<number>(N);\n    const maxLevel = this._maxLevel - 1;\n    for (let i = 0; i < N; ++i) {\n      levels[i] = 1 + simulateWinStreak(this._p, maxLevel - 1);\n    }\n    return levels;\n  }\n\n  /**\n   * @internal\n   */\n  protected _insert(index: number, values: T[]): void {\n    // If no values\n    const N = values.length;\n    if (N <= 0) {\n      return;\n    }\n\n    // If no capacity\n    if (this._capacity <= 0) {\n      this._overflow(values);\n      return;\n    }\n\n    // Check free space\n    let free = this._capacity - this._size;\n    if (free >= N) {\n      this._safeInsert(index, values);\n      return;\n    }\n\n    // Check if \"infinite\" capacity yet not enough space\n    if (!this._isFinite) {\n      this._safeInsert(index, values.slice(0, free));\n      throw new Error(\"Out of memory\");\n    }\n\n    // Remove from head\n    if (index > 0) {\n      const shifted = Math.min(index, N - free);\n      const { root } = this._cut(0, shifted);\n      this._overflow(root.levels[0].next);\n      index -= shifted;\n      free += shifted;\n    }\n\n    // Check free space\n    if (free >= N) {\n      this._safeInsert(index, values);\n      return;\n    }\n\n    // Remove from items and insert remaining\n    const mid = values.length - free;\n    this._overflow(values.slice(0, mid));\n    this._safeInsert(0, values.slice(mid));\n  }\n\n  /**\n   * @internal\n   *\n   * Emit an overflow event containing the items evicted from the collection.\n   *\n   * @param evicted - The items evicted from the collection.\n   */\n  protected _overflow(evicted?: T[] | SkipNode<T>): void {\n    if (evicted == null) {\n      return;\n    }\n    if (Array.isArray(evicted)) {\n      this._emitter.emit(BoundedEvent.Overflow, evicted);\n      return;\n    }\n    for (const array of chunk(values(evicted), ARGS_MAX_LENGTH)) {\n      this._emitter.emit(BoundedEvent.Overflow, array);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  protected _presert(index: number, values: T[]): void {\n    // If no values\n    const N = values.length;\n    if (N <= 0) {\n      return;\n    }\n\n    // If no capacity\n    if (this._capacity <= 0) {\n      this._overflow(values);\n      return;\n    }\n\n    // Check free space\n    let free = this._capacity - this._size;\n    if (free >= N) {\n      this._safeInsert(index, values);\n      return;\n    }\n\n    // Check if \"infinite\" capacity yet not enough space\n    if (!this._isFinite) {\n      this._safeInsert(0, values.slice(values.length - free));\n      throw new Error(\"Out of memory\");\n    }\n\n    // Remove from tail\n    if (index < this._size) {\n      const popped = Math.min(this._size - index, N - free);\n      const { root } = this._cut(this._size - popped, popped);\n      this._overflow(root.levels[0].next);\n      free += popped;\n    }\n\n    // Check free space\n    if (free >= N) {\n      this._safeInsert(index, values);\n      return;\n    }\n\n    // Remove from items and insert remaining\n    this._overflow(values.slice(free));\n    this._safeInsert(this._size, values.slice(0, free));\n  }\n\n  /**\n   * @internal\n   */\n  protected _safeInsert(index: number, values: T[]): void {\n    // Create segment\n    const levels = this._genLevels(values.length);\n    const seg = toList(levels, values);\n\n    // Insert segment\n    const core = { root: this._root, size: this._size, tails: this._tails };\n    insert(core, index, seg);\n\n    // Update list state\n    this._size = core.size;\n    this._tails = core.tails;\n  }\n}\n","import { Bounded } from \"../../types/bounded\";\nimport { BoundedEvent } from \"../../types/boundedEvent\";\nimport { Collection } from \"../../types/collection\";\nimport { isInfinity, isNumber, isSafeCount } from \"../../utils/is\";\n\nimport { CircularBase } from \"../circularBase\";\n\n/**\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularMap<K, V>\n  extends CircularBase<[K, V]>\n  implements Bounded<[K, V]>, Map<K, V>, Collection<K, V>\n{\n  /**\n   * @internal\n   * The maximum number of elements that can be stored in the collection.\n   */\n  protected _capacity: number;\n\n  /**\n   * @internal\n   * The internal map.\n   */\n  protected _map: Map<K, V>;\n\n  /**\n   * Creates a new map with `capacity` defaulted to `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new map with the given capacity.\n   *\n   * @param capacity - the map's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new map. Initial capacity is the number of unique items given.\n   *\n   * @param items - the values to store in the map.\n   */\n  constructor(items: Iterable<[K, V]>);\n  constructor(capacity?: number | null | Iterable<[K, V]>) {\n    super();\n\n    // Initialize class variables\n    this._capacity = Infinity;\n    this._map = new Map();\n\n    // Case 1: capacity is null, undefined or Infinity\n    capacity = capacity ?? Infinity;\n    if (isInfinity(capacity)) {\n      return;\n    }\n\n    // Case 2: capacity is zero or a safe positive integer\n    if (isNumber(capacity)) {\n      if (!isSafeCount(capacity)) {\n        throw new RangeError(\"Invalid capacity\");\n      }\n      this._capacity = capacity;\n      return;\n    }\n\n    // Case 3: capacity is iterable\n    this._map = new Map(capacity as Iterable<[K, V]>);\n    this._capacity = this._map.size;\n  }\n\n  /**\n   * @returns the maximum number of elements that can be stored.\n   */\n  get capacity(): number {\n    return this._capacity;\n  }\n\n  /**\n   * @returns the number of values in the map.\n   */\n  get size(): number {\n    return this._map.size;\n  }\n\n  /**\n   * Return the type of the object.\n   */\n  get [Symbol.toStringTag](): string {\n    return CircularMap.name;\n  }\n\n  /**\n   * The maximum number of elements that can be stored in the map.\n   */\n  set capacity(capacity: number) {\n    // Convert input to a number\n    capacity = +capacity;\n\n    // Check if input is valid\n    if (!isInfinity(capacity) && !isSafeCount(capacity)) {\n      throw new RangeError(\"Invalid capacity\");\n    }\n\n    // Check if capacity is changing\n    if (capacity === this._capacity) {\n      return;\n    }\n\n    // Update capacity\n    this._capacity = capacity;\n\n    // Check if size is within capacity\n    if (this.size <= capacity) {\n      return;\n    }\n\n    // Check if new capacity is zero\n    if (capacity === 0) {\n      const evicted = Array.from(this._map);\n      this.clear();\n      this._emitter.emit(BoundedEvent.Overflow, evicted);\n      return;\n    }\n\n    // Shrink down map.\n    const evicted: [K, V][] = [];\n    const iter = this._map.entries();\n    for (let n = this.size - capacity; n > 0; --n) {\n      const entry = iter.next().value;\n      this._map.delete(entry[0]);\n      evicted.push(entry);\n    }\n    this._emitter.emit(BoundedEvent.Overflow, evicted);\n  }\n\n  /**\n   * Removes all elements from the map.\n   */\n  clear(): void {\n    this._map.clear();\n  }\n\n  /**\n   * Deletes a specified value from the map.\n   *\n   * @returns `true` if the value existed in the map and has been removed, or `false` otherwise.\n   */\n  delete(key: K): boolean {\n    return this._map.delete(key);\n  }\n\n  /**\n   * Iterate through the map's entries.\n   *\n   * **Note:** Modifying the map during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of [key, value] pairs for every entry.\n   */\n  entries(): IterableIterator<[K, V]> {\n    return this._map.entries();\n  }\n\n  /**\n   * Performs the specified action for each value in the map.\n   *\n   * **Note:** Modifying the map during iteration may cause unexpected behavior.\n   *\n   * @param callbackfn - A function that accepts up to three arguments. It is called once per value.\n   * @param thisArg - An object to which the `this` keyword refers to in the `callbackfn` function. Defaults to `undefined`.\n   */\n  forEach(\n    callbackfn: (value: V, key: K, map: this) => void,\n    thisArg?: unknown\n  ): void {\n    for (const [key, value] of this._map.entries()) {\n      callbackfn.call(thisArg, value, key, this);\n    }\n  }\n\n  /**\n   * Returns the associated value of the given key from the map.\n   *\n   * If the associated value is an object, then you will get a reference to that object; any change made to the object will effectively modify it inside the map.\n   *\n   * @returns the value associated with the specified key, or `undefined` if no value is associated.\n   */\n  get(key: K): V | undefined {\n    return this._map.get(key);\n  }\n\n  /**\n   * Determines whether a given value is in the map.\n   *\n   * @param key - The key to search for.\n   *\n   * @returns `true` if the value was found, `false` otherwise.\n   */\n  has(key: K): boolean {\n    return this._map.has(key);\n  }\n\n  /**\n   * Iterate through the map's keys.\n   *\n   * **Note:** Modifying the map during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of the map's keys.\n   */\n  keys(): IterableIterator<K> {\n    return this._map.keys();\n  }\n\n  /**\n   * Sets the specified key-value pair in the map.\n   *\n   * @param key - the key to add\n   * @param value - the key's value.\n   */\n  set(key: K, value: V): this {\n    // Base case: map has no capacity.\n    if (this.capacity < 1) {\n      this._emitter.emit(BoundedEvent.Overflow, [[key, value]]);\n      return this;\n    }\n\n    // Evict excess items\n    const evicted: [K, V][] = [];\n    if (!this._map.delete(key) && this.size >= this.capacity) {\n      const entry = this._map.entries().next().value;\n      this._map.delete(entry[0]);\n      evicted.push(entry);\n    }\n\n    // Add value\n    this._map.set(key, value);\n\n    // Emit evicted\n    if (evicted.length > 0) {\n      this._emitter.emit(BoundedEvent.Overflow, evicted);\n    }\n\n    return this;\n  }\n\n  /**\n   * Iterate through the map's values.\n   *\n   * **Note:** Modifying the map during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of values.\n   */\n  [Symbol.iterator](): IterableIterator<[K, V]> {\n    return this._map.entries();\n  }\n\n  /**\n   * Iterate through the map's values.\n   *\n   * **Note:** Modifying the map during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of the map's values.\n   */\n  values(): IterableIterator<V> {\n    return this._map.values();\n  }\n}\n","import { Queue } from \"../../types/queue\";\nimport { Bounded } from \"../../types/bounded\";\n\nimport { CircularLinkedList } from \"../list/circularLinkedList\";\nimport { BoundedEvent } from \"../..\";\n\n/**\n * A circular queue is similar to a traditional queue, but uses a fixed-size,\n * circular buffer. When the queue reaches its maximum capacity and a new\n * element is added, the oldest is discarded, thus maintaining its size.\n *\n * This structure efficiently utilizes memory for applications where only the\n * most recent additions are of interest and older data can be discarded.\n *\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularLinkedQueue<T> implements Bounded<T>, Queue<T> {\n  /**\n   * @internal\n   */\n  protected _list: CircularLinkedList<T>;\n\n  /**\n   * Creates a new stack with `capacity` defaulted to `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new stack with the given capacity.\n   *\n   * @param capacity - the stack's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new stack. Initial capacity is the number of items given.\n   *\n   * @param items - the values to store in the stack.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    this._list = new CircularLinkedList(capacity as number);\n  }\n\n  get capacity(): number {\n    return this._list.capacity;\n  }\n\n  get size(): number {\n    return this._list.size;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return CircularLinkedQueue.name;\n  }\n\n  set capacity(capacity: number) {\n    this._list.capacity = capacity;\n  }\n\n  clear(): void {\n    this._list.clear();\n  }\n\n  entries(): IterableIterator<[number, T]> {\n    return this._list.entries();\n  }\n\n  first(): T | undefined {\n    return this._list.at(0);\n  }\n\n  forEach(\n    callbackfn: (value: T, index: number, collection: this) => void,\n    thisArg?: unknown\n  ): void {\n    this._list.forEach((v, i) => callbackfn.call(thisArg, v, i, this), thisArg);\n  }\n\n  front(): T | undefined {\n    return this._list.at(0);\n  }\n\n  has(value: T): boolean {\n    return this._list.has(value);\n  }\n\n  keys(): IterableIterator<number> {\n    return this._list.keys();\n  }\n\n  push(...elems: T[]): number {\n    return this._list.push(...elems);\n  }\n\n  shift(): T | undefined {\n    return this._list.shift();\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.values();\n  }\n\n  values(): IterableIterator<T> {\n    return this._list.values();\n  }\n\n  addListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.addListener(event, listener);\n    return this;\n  }\n\n  on(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.on(event, listener);\n    return this;\n  }\n\n  removeListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.removeListener(event, listener);\n    return this;\n  }\n}\n","import { BoundedEvent } from \"../../types/boundedEvent\";\nimport { Queue } from \"../../types/queue\";\nimport { Bounded } from \"../../types/bounded\";\nimport { CircularArrayList } from \"../list/circularArrayList\";\n\n/**\n * A circular queue is similar to a traditional queue, but uses a fixed-size,\n * circular buffer. When the queue reaches its maximum capacity and a new\n * element is added, the oldest is discarded, thus maintaining its size.\n *\n * This structure efficiently utilizes memory for applications where only the\n * most recent additions are of interest and older data can be discarded.\n *\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularQueue<T> implements Bounded<T>, Queue<T> {\n  /**\n   * @internal\n   */\n  protected _list: CircularArrayList<T>;\n\n  /**\n   * Creates a new queue. Default `capacity` is `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new queue with the given capacity.\n   *\n   * @param capacity - the queue's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new queue from the given items. `capacity` will equal the number of items.\n   *\n   * @param items - the initial values in the queue.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    this._list = new CircularArrayList(capacity as number);\n  }\n\n  get capacity(): number {\n    return this._list.capacity;\n  }\n\n  get size(): number {\n    return this._list.size;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return CircularQueue.name;\n  }\n\n  set capacity(capacity: number) {\n    this._list.capacity = capacity;\n  }\n\n  clear(): void {\n    this._list.clear();\n  }\n\n  entries(): IterableIterator<[number, T]> {\n    return this._list.entries();\n  }\n\n  first(): T | undefined {\n    return this._list.first();\n  }\n\n  forEach(\n    callbackfn: (value: T, index: number, collection: this) => void,\n    thisArg?: unknown\n  ): void {\n    return this._list.forEach((v, i) => callbackfn.call(thisArg, v, i, this));\n  }\n\n  front(): T | undefined {\n    return this._list.first();\n  }\n\n  has(value: T): boolean {\n    return this._list.has(value);\n  }\n\n  keys(): IterableIterator<number> {\n    return this._list.keys();\n  }\n\n  push(...elems: T[]): number {\n    return this._list.push(...elems);\n  }\n\n  shift(): T | undefined {\n    return this._list.shift();\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return this._list.values();\n  }\n\n  values(): IterableIterator<T> {\n    return this._list.values();\n  }\n\n  addListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.addListener(event, listener);\n    return this;\n  }\n\n  on(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.on(event, listener);\n    return this;\n  }\n\n  removeListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.removeListener(event, listener);\n    return this;\n  }\n}\n","import { Bounded } from \"../../types/bounded\";\nimport { BoundedEvent } from \"../../types/boundedEvent\";\nimport { Collection } from \"../../types/collection\";\nimport { isInfinity, isNumber, isSafeCount } from \"../../utils/is\";\n\nimport { CircularBase } from \"../circularBase\";\n\n/**\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularSet<T>\n  extends CircularBase<T>\n  implements Bounded<T>, Set<T>, Collection<T, T>\n{\n  /**\n   * @internal\n   * The maximum number of elements that can be stored in the collection.\n   */\n  protected _capacity: number;\n\n  /**\n   * @internal\n   * The internal set.\n   */\n  protected _set: Set<T>;\n\n  /**\n   * Creates a new set with `capacity` defaulted to `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new set with the given capacity.\n   *\n   * @param capacity - the set's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new set. Initial capacity is the number of unique items given.\n   *\n   * @param items - the values to store in the set.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    super();\n\n    // Initialize class variables\n    this._capacity = Infinity;\n    this._set = new Set();\n\n    // Case 1: capacity is null, undefined or Infinity\n    capacity = capacity ?? Infinity;\n    if (isInfinity(capacity)) {\n      return;\n    }\n\n    // Case 2: capacity is zero or a safe positive integer\n    if (isNumber(capacity)) {\n      if (!isSafeCount(capacity)) {\n        throw new RangeError(\"Invalid capacity\");\n      }\n      this._capacity = capacity;\n      return;\n    }\n\n    // Case 3: capacity is iterable\n    this._set = new Set(capacity as Iterable<T>);\n    this._capacity = this._set.size;\n  }\n\n  /**\n   * @returns the maximum number of elements that can be stored.\n   */\n  get capacity(): number {\n    return this._capacity;\n  }\n\n  /**\n   * @returns the number of values in the set.\n   */\n  get size(): number {\n    return this._set.size;\n  }\n\n  /**\n   * Return the type of the object.\n   */\n  get [Symbol.toStringTag](): string {\n    return CircularSet.name;\n  }\n\n  /**\n   * The maximum number of elements that can be stored in the set.\n   */\n  set capacity(capacity: number) {\n    // Convert input to a number\n    capacity = +capacity;\n\n    // Check if input is valid\n    if (!isInfinity(capacity) && !isSafeCount(capacity)) {\n      throw new RangeError(\"Invalid capacity\");\n    }\n\n    // Check if capacity is changing\n    if (capacity === this._capacity) {\n      return;\n    }\n\n    // Update capacity\n    this._capacity = capacity;\n\n    // Check if set is within capacity\n    if (this.size <= capacity) {\n      return;\n    }\n\n    // Check if new capacity is zero\n    if (capacity === 0) {\n      const evicted = Array.from(this._set);\n      this.clear();\n      this._emitter.emit(BoundedEvent.Overflow, evicted);\n      return;\n    }\n\n    // Shrink down map.\n    const evicted: T[] = [];\n    const iter = this._set.values();\n    for (let n = this.size - capacity; n > 0; --n) {\n      const value = iter.next().value;\n      this._set.delete(value);\n      evicted.push(value);\n    }\n    this._emitter.emit(BoundedEvent.Overflow, evicted);\n  }\n\n  /**\n   * Adds the specified value to the set.\n   *\n   * @param value - the value to add.\n   */\n  add(value: T): this {\n    // Base case: set has no capacity.\n    if (this.capacity < 1) {\n      this._emitter.emit(BoundedEvent.Overflow, [value]);\n      return this;\n    }\n\n    // Evict excess items\n    const evicted: T[] = [];\n    if (!this._set.delete(value) && this.size >= this.capacity) {\n      const out = this._set.values().next().value;\n      this._set.delete(out);\n      evicted.push(out);\n    }\n\n    // Add value\n    this._set.add(value);\n\n    // Emit evicted\n    if (evicted.length > 0) {\n      this._emitter.emit(BoundedEvent.Overflow, evicted);\n    }\n\n    return this;\n  }\n\n  /**\n   * Removes all elements from the set.\n   */\n  clear(): void {\n    this._set.clear();\n  }\n\n  /**\n   * Deletes a specified value from the set.\n   *\n   * @returns `true` if the value existed in the set and has been removed, or `false` otherwise.\n   */\n  delete(value: T): boolean {\n    return this._set.delete(value);\n  }\n\n  /**\n   * Iterate through the set's entries.\n   *\n   * **Note:** Modifying the set during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of [key, value] pairs for every entry.\n   */\n  entries(): IterableIterator<[T, T]> {\n    return this._set.entries();\n  }\n\n  /**\n   * Performs the specified action for each value in the set.\n   *\n   * **Note:** Modifying the set during iteration may cause unexpected behavior.\n   *\n   * @param callbackfn - A function that accepts up to three arguments. It is called once per value.\n   * @param thisArg - An object to which the `this` keyword refers to in the `callbackfn` function. Defaults to `undefined`.\n   */\n  forEach(\n    callbackfn: (value: T, key: T, set: this) => void,\n    thisArg?: unknown\n  ): void {\n    for (const key of this._set.keys()) {\n      callbackfn.call(thisArg, key, key, this);\n    }\n  }\n\n  /**\n   * Determines whether a given value is in the set.\n   *\n   * @param value - The value to search for.\n   *\n   * @returns `true` if the value was found, `false` otherwise.\n   */\n  has(value: T): boolean {\n    return this._set.has(value);\n  }\n\n  /**\n   * Iterate through the set's keys.\n   *\n   * **Note:** Modifying the set during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of the set's keys.\n   */\n  keys(): IterableIterator<T> {\n    return this._set.keys();\n  }\n\n  /**\n   * Iterate through the set's values.\n   *\n   * **Note:** Modifying the set during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of the set's values.\n   */\n  values(): IterableIterator<T> {\n    return this._set.keys();\n  }\n\n  /**\n   * Iterate through the set's values.\n   *\n   * **Note:** Modifying the set during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of values.\n   */\n  [Symbol.iterator](): IterableIterator<T> {\n    return this._set.values();\n  }\n}\n","import { Stack } from \"../../types/stack\";\nimport { Bounded } from \"../../types/bounded\";\nimport { BoundedEvent, CircularDoublyLinkedList } from \"../..\";\n\n/**\n * A circular stack is similar to a traditional stack, but uses a fixed-size,\n * circular buffer. When the stack reaches its maximum capacity and a new\n * element is added, the oldest is discarded, thus maintaining its size.\n *\n * This structure efficiently utilizes memory for applications where only the\n * most recent additions are of interest and older data can be discarded.\n *\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularLinkedStack<T> implements Bounded<T>, Stack<T> {\n  /**\n   * @internal\n   */\n  protected _list: CircularDoublyLinkedList<T>;\n\n  /**\n   * Creates a new stack with `capacity` defaulted to `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new stack with the given capacity.\n   *\n   * @param capacity - the stack's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new stack. Initial capacity is the number of items given.\n   *\n   * @param items - the values to store in the stack.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    this._list = new CircularDoublyLinkedList(capacity as number);\n  }\n\n  get capacity(): number {\n    return this._list.capacity;\n  }\n\n  get size(): number {\n    return this._list.size;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return CircularLinkedStack.name;\n  }\n\n  set capacity(capacity: number) {\n    this._list.capacity = capacity;\n  }\n\n  clear(): void {\n    this._list.clear();\n  }\n\n  entries(): IterableIterator<[number, T]> {\n    return this._list.entries();\n  }\n\n  forEach(\n    callbackfn: (value: T, index: number, collection: this) => void,\n    thisArg?: unknown\n  ): void {\n    this._list.forEach((v, i) => callbackfn.call(thisArg, v, i, this), thisArg);\n  }\n\n  has(value: T): boolean {\n    return this._list.has(value);\n  }\n\n  keys(): IterableIterator<number> {\n    return this._list.keys();\n  }\n\n  last(): T | undefined {\n    return this._list.at(-1);\n  }\n\n  pop(): T | undefined {\n    return this._list.pop();\n  }\n\n  push(...elems: T[]): number {\n    return this._list.push(...elems);\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.values();\n  }\n\n  top(): T | undefined {\n    return this._list.at(-1);\n  }\n\n  values(): IterableIterator<T> {\n    return this._list.values();\n  }\n\n  addListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.addListener(event, listener);\n    return this;\n  }\n\n  on(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.on(event, listener);\n    return this;\n  }\n\n  removeListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.removeListener(event, listener);\n    return this;\n  }\n}\n","import { BoundedEvent } from \"../../types/boundedEvent\";\nimport { Stack } from \"../../types/stack\";\nimport { Bounded } from \"../../types/bounded\";\nimport { CircularArrayList } from \"../list/circularArrayList\";\n\n/**\n * A circular stack is similar to a traditional stack, but uses a fixed-size,\n * circular buffer. When the stack reaches its maximum capacity and a new\n * element is added, the oldest is discarded, thus maintaining its size.\n *\n * This structure efficiently utilizes memory for applications where only the\n * most recent additions are of interest and older data can be discarded.\n *\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularStack<T> implements Bounded<T>, Stack<T> {\n  /**\n   * @internal\n   */\n  protected _list: CircularArrayList<T>;\n\n  /**\n   * Creates a new stack. Default `capacity` is `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new stack with the given capacity.\n   *\n   * @param capacity - the stack's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new stack from the given items. `capacity` will equal the number of items.\n   *\n   * @param items - the initial values in the stack.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    this._list = new CircularArrayList(capacity as number);\n  }\n\n  get capacity(): number {\n    return this._list.capacity;\n  }\n\n  get size(): number {\n    return this._list.size;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return CircularStack.name;\n  }\n\n  set capacity(capacity: number) {\n    this._list.capacity = capacity;\n  }\n\n  clear(): void {\n    this._list.clear();\n  }\n\n  entries(): IterableIterator<[number, T]> {\n    return this._list.entries();\n  }\n\n  forEach(\n    callbackfn: (value: T, index: number, collection: this) => void,\n    thisArg?: unknown\n  ): void {\n    return this._list.forEach((v, i) => callbackfn.call(thisArg, v, i, this));\n  }\n\n  has(value: T): boolean {\n    return this._list.has(value);\n  }\n\n  keys(): IterableIterator<number> {\n    return this._list.keys();\n  }\n\n  last(): T | undefined {\n    return this._list.last();\n  }\n\n  pop(): T | undefined {\n    return this._list.pop();\n  }\n\n  push(...elems: T[]): number {\n    return this._list.push(...elems);\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return this._list.values();\n  }\n\n  top(): T | undefined {\n    return this._list.last();\n  }\n\n  values(): IterableIterator<T> {\n    return this._list.values();\n  }\n\n  addListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.addListener(event, listener);\n    return this;\n  }\n\n  on(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.on(event, listener);\n    return this;\n  }\n\n  removeListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.removeListener(event, listener);\n    return this;\n  }\n}\n"],"names":["BoundedEvent","has","prefix","Events","EE","fn","context","once","addListener","emitter","event","listener","evt","clearEvent","EventEmitter","names","events","name","handlers","i","l","ee","listeners","a1","a2","a3","a4","a5","len","args","length","j","module","CircularBase","__publicField","ARGS_MAX_LENGTH","ARRAY_MAX_LENGTH","LINKED_MAX_LENGTH","isArrayLength","value","isInfinity","isIterable","isLinkedLength","isNumber","isSafeCount","addIfBelow","addend","target","clamp","min","max","isInRange","log","base","simulateWinStreak","probability","randomFn","count","toInteger","defaultValue","chunk","source","chunkSize","CircularArrayList","capacity","vals","index","start","end","ranges","deleteCount","ext","size","callbackfn","thisArg","N","newSize","items","prevValue","from","to","out","addCount","replaceCount","a","b","free","shifted","mid","vIndex","popped","newHead","evicted","temp","diff","tail","externalIndex","head","CircularDeque","v","elems","copy","node","distance","root","dupe","cut","prev","get","entries","keys","toList","values","seg","singlyCut","next","singlyGet","CircularDoublyLinkedList","array","getValues","core","list","CircularLinkedDeque","CircularLinkedList","adjustSpan","stack","Y","y","levels","span","calcMaxLevel","expectedSize","toNode","tails","maxY","indexes","segRoot","prevStack","getStack","tailStack","nextI","edge","getEntry","toStack","increaseLevels","insert","dest","src","minY","prevs","prevEdge","tailEdge","rootEdge","truncateLevels","level","CircularSkipList","config","maxLevel","p","CircularMap","iter","n","entry","key","CircularLinkedQueue","CircularQueue","CircularSet","CircularLinkedStack","CircularStack"],"mappings":"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","x_google_ignoreList":[1]}