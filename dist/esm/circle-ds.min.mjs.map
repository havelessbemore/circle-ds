{"version":3,"file":"circle-ds.min.mjs","sources":["../../src/types/boundedEvent.ts","../../__vite-browser-external","../../src/collections/circularBase.ts","../../src/utils/constants.ts","../../src/utils/is.ts","../../src/utils/math.ts","../../src/collections/list/circularArrayList.ts","../../src/collections/deque/circularDeque.ts","../../src/utils/linkedNode.ts","../../src/utils/doublyLinkedNode.ts","../../src/utils/iterable.ts","../../src/collections/list/circularDoublyLinkedList.ts","../../src/collections/deque/circularLinkedDeque.ts","../../src/collections/list/circularLinkedList.ts","../../src/utils/skipNode.ts","../../src/utils/skipStack.ts","../../src/collections/list/circularSkipList.ts","../../src/collections/map/circularMap.ts","../../src/collections/queue/circularLinkedQueue.ts","../../src/collections/queue/circularQueue.ts","../../src/collections/set/circularSet.ts","../../src/collections/stack/circularLinkedStack.ts","../../src/collections/stack/circularStack.ts"],"sourcesContent":["/**\n * An enumeration of event types supported by {@link Bounded} collections.\n *\n * This object defines a set of constants representing event names that can\n * be emitted by instances of collections implementing the {@link Bounded} interface.\n * These events signify specific actions or changes in the state of the collection.\n *\n * Defined events include:\n * - `Overflow`: Indicates that the collection has reached its capacity, and\n *   as a result, one or more elements have been removed to accommodate new elements.\n *   This event is triggered during operations that add elements to the collection when\n *   it exceeds its capacity, or when capacity is updated below the collection's current\n *   size. Listeners attached to this event will receive an array of elements that were\n *   removed due to the overflow. Removed elements may be sent across 1 or more event\n *   instances.\n *\n * This object is marked as `const` to ensure that its properties are read-only,\n * preventing modification of event names which could lead to inconsistencies in\n * event handling across the application.\n */\nexport const BoundedEvent = {\n  Overflow: \"overflow\",\n} as const;\n","export default {}","import EventEmitter from \"events\";\nimport { BoundedEvent } from \"../types/boundedEvent\";\nimport { ValueOf } from \"../types/valueOf\";\n\nexport class CircularBase<T> {\n  /**\n   * The event emitter.\n   * @internal\n   */\n  protected _emitter: EventEmitter;\n\n  constructor(emitter = new EventEmitter()) {\n    this._emitter = emitter;\n  }\n\n  /**\n   * Appends the listener function to the listeners array for the\n   * {@link BoundedEvent.Overflow} event.\n   *\n   * * No checks are made to see if the listener has already been added.\n   * Multiple calls with the same of event + listener combination will\n   * result in the listener being added and called multiple times.\n   *\n   * * By default, event listeners are invoked in the order they are added.\n   * The `prependListener()` method can be used as an alternative to add\n   * the event listener to the beginning of the listeners array.\n   *\n   * @param event - The name of the event.\n   * @param listener - The callback function. It will\n   * receive an array of elements that have been removed due to overflow.\n   * This can happen when elements are added while the collection is at\n   * capacity, or when capacity is reduced below the current size.\n   *\n   * @returns the collection.\n   */\n  addListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this;\n  addListener(\n    event: ValueOf<typeof BoundedEvent>,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    listener: (...args: any[]) => void\n  ): this {\n    this._emitter.addListener(event, listener);\n    return this;\n  }\n\n  /**\n   * Appends the listener function to the listeners array for the\n   * {@link BoundedEvent.Overflow} event.\n   *\n   * * No checks are made to see if the listener has already been added.\n   * Multiple calls with the same of event + listener combination will\n   * result in the listener being added and called multiple times.\n   *\n   * * By default, event listeners are invoked in the order they are added.\n   * The `prependListener()` method can be used as an alternative to add\n   * the event listener to the beginning of the listeners array.\n   *\n   * @param event - The name of the event.\n   * @param listener - The callback function. It will\n   * receive an array of elements that have been removed due to overflow.\n   * This can happen when elements are added while the collection is at\n   * capacity, or when capacity is reduced below the current size.\n   *\n   * @returns the collection.\n   */\n  on(event: typeof BoundedEvent.Overflow, listener: (elems: T[]) => void): this;\n  on(\n    event: ValueOf<typeof BoundedEvent>,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    listener: (...args: any[]) => void\n  ): this {\n    this._emitter.on(event, listener);\n    return this;\n  }\n\n  /**\n   * Adds the listener function to the beginning of the listeners array for\n   * the {@link BoundedEvent.Overflow} event.\n   *\n   * * No checks are made to see if the listener has already been added.\n   * Multiple calls with the same of event + listener combination will\n   * result in the listener being added and called multiple times.\n   *\n   * * Alternatively, the `addListener()` method can be used to add\n   * the event listener to the end of the listeners array.\n   *\n   * @param event - The name of the event.\n   * @param listener - The callback function. It will\n   * receive an array of elements that have been removed due to overflow.\n   * This can happen when elements are added while the collection is at\n   * capacity, or when capacity is reduced below the current size.\n   *\n   * @returns the collection.\n   */\n  prependListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this;\n  prependListener(\n    event: ValueOf<typeof BoundedEvent>,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    listener: (...args: any[]) => void\n  ): this {\n    this._emitter.prependListener(event, listener);\n    return this;\n  }\n\n  /**\n   * Removes the specified listener from the listener array for the event.\n   *\n   * At most once instance of a listener will be removed. If a listener\n   * has been added multiple times for the same event, this method should\n   * be called once per instance.\n   *\n   * @param event - The name of the event.\n   * @param listener - The callback function.\n   *\n   * @returns the collection.\n   */\n  removeListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this;\n  removeListener(\n    event: ValueOf<typeof BoundedEvent>,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    listener: (...args: any[]) => void\n  ): this {\n    this._emitter.removeListener(event, listener);\n    return this;\n  }\n}\n","/**\n * The maximum number of arguments that can be passed to a function.\n *\n * While ECMAScript specifications do not explicitly limit the number of\n * function arguments, practical limits are imposed by JavaScript engine\n * implementations. Different engines can have different maximums, so a\n * conservative value is used to prevent runtime errors.\n *\n * For more details, see the\n * {@link https://262.ecma-international.org/14.0/#sec-list-and-record-specification-type | ECMAScript Specification},\n * section \"6.2.2 The List and Record Specification Types\".\n */\nexport const ARGS_MAX_LENGTH = 16383; // 2**14 - 1\n\n/**\n * The maximum length of an array.\n *\n * According to the ECMAScript specification, the length property of an array\n * is an unsigned 32-bit integer, so its range is 0 to 2**32 - 1, inclusive.\n * Beyond this, operations that modify the array length (e.g., `push`, `pop`,\n * `unshift`, `shift`) may fail or behave unexpectedly.\n *\n * For more details, see the\n * {@link https://262.ecma-international.org/14.0/#sec-arraycreate | ECMAScript Specification},\n * section \"10.4.2.2 ArrayCreate\".\n */\nexport const ARRAY_MAX_LENGTH = 4294967295; // 2**32 - 1\n\n/**\n * The maximum safe length for a linked structure.\n *\n * This constant is defined as the largest integer value that can be safely\n * represented in JavaScript (`Number.MAX_SAFE_INTEGER`), preventing integer\n * precision loss in length-related operations. Operations with values beyond\n * this number may not behave as expected due to limitations in JavaScript's\n * number representation.\n *\n * For more details, see the\n * {@link https://262.ecma-international.org/14.0/#sec-number.max_safe_integer | ECMAScript Specification},\n * section \"21.1.2.6 Number.MAX_SAFE_INTEGER\".\n */\nexport const LINKED_MAX_LENGTH = Number.MAX_SAFE_INTEGER; // 2**53 - 1\n","import { ARRAY_MAX_LENGTH, LINKED_MAX_LENGTH } from \"./constants\";\n\n/**\n * Checks if a given value is an integer within a valid array length range.\n *\n * This function is useful for validating array lengths before attempting operations\n * that could result in a `RangeError` due to invalid array size.\n *\n * @param value - The value to check.\n *\n * @returns `true` if the value is an integer within the `[0, ARRAY_MAX_LENGTH]` range, `false` otherwise.\n */\nexport function isArrayLength(value: unknown): value is number {\n  return (\n    Number.isInteger(value) &&\n    (value as number) >= 0 &&\n    (value as number) <= ARRAY_MAX_LENGTH\n  );\n}\n\n/**\n * Determines whether the provided value is a function.\n *\n * @param value - The value to check.\n *\n * @returns `true` if the value is a function, `false` otherwise.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isFunction(value: unknown): value is Function {\n  return typeof value === \"function\";\n}\n\n/**\n * Checks if a given value is positive infinity.\n *\n * @param value - The value to check.\n *\n * @returns `true` if the value is positive infinity, `false` otherwise.\n */\nexport function isInfinity(value: unknown): boolean {\n  return value === Number.POSITIVE_INFINITY;\n}\n\n/**\n * Determines whether the provided value is iterable.\n *\n * This is useful for determining if a value can be used\n * in a `for...of` loop or with spread syntax.\n *\n * @param value - The value to check.\n *\n * @returns `true` if the value implements the iterable protocol, `false` otherwise.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function isIterable(value: any): value is Iterable<unknown> {\n  return typeof value?.[Symbol.iterator] === \"function\";\n}\n\n/**\n * Checks if a given value is an integer within a valid linked length range.\n *\n * This function is useful for validating linked lengths before attempting operations\n * that could result in a `RangeError` due to invalid linked list size.\n *\n * @param value - The value to check.\n *\n * @returns `true` if the value is an integer within the `[0, LINKED_MAX_LENGTH]` range, `false` otherwise.\n */\nexport function isLinkedLength(value: unknown): value is number {\n  return (\n    Number.isInteger(value) &&\n    (value as number) >= 0 &&\n    (value as number) <= LINKED_MAX_LENGTH\n  );\n}\n\n/**\n * Determines whether the provided value is a number.\n *\n * This includes `NaN` and `Infinity`, so consider additional\n * checks if those values are not desirable.\n *\n * @param value - The value to check.\n *\n * @returns `true` if the value is of type number, `false` otherwise.\n */\nexport function isNumber(value: unknown): value is number {\n  return typeof value === \"number\";\n}\n\n/**\n * Checks if a given value is a safe integer greater than or equal to 0.\n *\n * This is useful for validating counts or sizes that must be within the safe\n * integer range to prevent precision loss.\n *\n * @param value - The value to check.\n *\n * @returns `true` if the value is a safe integer and non-negative, `false` otherwise.\n */\nexport function isSafeCount(value: unknown): value is number {\n  return Number.isSafeInteger(value) && (value as number) >= 0;\n}\n\n/**\n * Determines whether the provided value is a symbol.\n *\n * @param value - The value to check.\n *\n * @returns `true` if the value is a symbol, `false` otherwise.\n */\nexport function isSymbol(value: unknown): value is symbol {\n  return typeof value === \"symbol\";\n}\n","/**\n * Adds a specified addend to a value if the value is below a given target.\n *\n * @param value - The initial number.\n * @param addend - The number added if the value is below the target.\n * @param target - The target number for comparison. If the value is below this\n * number, the addend will be added. Defaults to 0 if not specified.\n */\nexport function addIfBelow(value: number, addend: number, target = 0): number {\n  return value >= target ? value : value + addend;\n}\n\n/**\n * Restricts a given numerical value within a specified range [min, max].\n *\n * If the provided value is less than the minimum, the minimum is returned.\n * If it is greater than the maximum, the maximum is returned. If the value\n * is within the range, the value itself is returned. An error is thrown if\n * the minimum range value is greater than the maximum range value, as this\n * represents an invalid range.\n *\n * @param value - The numerical value to clamp.\n * @param min - The minimum allowable value of the range.\n * @param max - The maximum allowable value of the range.\n *\n * @returns The clamped value within the specified range.\n *\n * @throws `RangeError` If `min` is greater than `max`.\n */\nexport function clamp(value: number, min: number, max: number): number {\n  if (min > max) {\n    throw new RangeError(\"Invalid clamp range; min must be <= max\");\n  }\n  if (value <= min) {\n    return min;\n  }\n  return value <= max ? value : max;\n}\n\n/**\n * Checks if a given numeric value falls within a specified range.\n *\n * @param value - The numeric value to check.\n * @param min - The inclusive lower bound of the range.\n * @param max - The exclusive upper bound of the range.\n *\n * @returns - `true` if `value` is within the range `[min, max)`, `false` otherwise.\n */\nexport function isInRange(value: number, min: number, max: number): boolean {\n  return value >= min && value < max;\n}\n\n/**\n * Calculates the logarithm of a given value with the specified base.\n *\n * This function uses natural logarithms (`Math.log`) for its calculations.\n * If either the value or the base is less than or equal to 0, `NaN` is returned\n * to indicate an invalid operation, as logarithms are not defined for non-positive\n * values and bases.\n *\n * @param value - The numerical value for which to calculate the logarithm. Must be positive.\n * @param base - The base of the logarithm. Must be positive.\n *\n * @returns The calculated logarithm of the value with the given base, or `NaN` for invalid inputs.\n */\nexport function log(value: number, base: number): number {\n  return value >= 0 && base > 0 ? Math.log(value) / Math.log(base) : NaN;\n}\n\n/**\n * Generates a number representing the length of a consecutive run based on a\n * probability threshold.\n *\n * This function iteratively increments a counter as long as the randomly\n * generated numbers from `randomFn` are less than the specified probability\n * threshold `p`, or until the counter reaches the maximum `max`.\n *\n * The function is useful for simulations or models that require a random yet\n * probabilistically constrained sequence length, such as simulating streaks or\n * runs in games of chance.\n *\n * @param probability - The probability threshold. Defaults to 0.5.\n * @param max - The maximum value the of the run. Defaults to Infinity.\n * @param min - The starting value of the run. Defaults to 0.\n * @param randomFn - A function that generates a random number. Defaults to `Math.random`.\n *\n * @returns The length of the run.\n */\nexport function randomRun(\n  probability = 0.5,\n  min = 0,\n  max = Infinity,\n  randomFn = Math.random\n): number {\n  while (min < max && randomFn() < probability) {\n    ++min;\n  }\n  return min;\n}\n\n/**\n * Attempts to convert a given value to an integer.\n *\n * The function first tries to convert the value to a number. If the result\n * is not valid (i.e. `NaN`), the given `defaultValue` is returned. Otherwise,\n * the function truncates the number to an integer using `Math.trunc`.\n *\n * This is useful for ensuring numerical operations are performed on integers,\n * with a controllable fallback for invalid inputs.\n *\n * @param value - The value to convert to an integer. This can be of any type.\n * @param defaultValue - The fallback value to return if conversion fails. Defaults to 0.\n *\n * @returns The converted integer, or `defaultValue` if conversion is not possible.\n */\nexport function toInteger(value?: unknown, defaultValue = 0): number {\n  value = +value!;\n  return isNaN(value as number) ? defaultValue : Math.trunc(value as number);\n}\n","import { CircularBase } from \"../circularBase\";\nimport { BoundedEvent } from \"../../types/boundedEvent\";\nimport { isArrayLength, isInfinity, isNumber } from \"../../utils/is\";\nimport { Bounded } from \"../../types/bounded\";\nimport { ARRAY_MAX_LENGTH } from \"../../utils/constants\";\nimport { List } from \"../../types/list\";\nimport { addIfBelow, clamp, isInRange, toInteger } from \"../../utils/math\";\n\nexport class CircularArrayList<T>\n  extends CircularBase<T>\n  implements Bounded<T>, List<T>\n{\n  /**\n   * @internal\n   * The maximum number of elements that can be stored in the collection.\n   */\n  protected _capacity: number;\n\n  /**\n   * @internal\n   * The index representing the first element.\n   */\n  protected _head: number;\n\n  /**\n   * @internal\n   * Whether capacity is finite (true) or infinite (false).\n   */\n  protected _isFinite: boolean;\n\n  /**\n   * @internal\n   * The index one more than the last element.\n   */\n  protected _next: number;\n\n  /**\n   * @internal\n   * The number of elements.\n   */\n  protected _size: number;\n\n  /**\n   * @internal\n   * The stored values.\n   */\n  protected _vals: T[];\n\n  /**\n   * Creates a new list. Default `capacity` is `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new list with the given capacity.\n   *\n   * @param capacity - the list's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new list from the given items. `capacity` will equal the number of items.\n   *\n   * @param items - the initial values in the list.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    super();\n\n    // Initialize class variables\n    this._capacity = ARRAY_MAX_LENGTH;\n    this._head = 0;\n    this._isFinite = false;\n    this._size = 0;\n    this._next = 0;\n    this._vals = [];\n\n    // If capacity is null, undefined, or Infinity\n    if (capacity == null || isInfinity(capacity)) {\n      return;\n    }\n\n    // If capacity is a number\n    if (isNumber(capacity)) {\n      // If capacity is invalid\n      if (!isArrayLength(capacity)) {\n        throw new RangeError(\"Invalid capacity\");\n      }\n      // If capacity is valid\n      this._capacity = capacity;\n      this._isFinite = true;\n      return;\n    }\n\n    // If capacity is an iterable\n    this._vals = Array.from(capacity as Iterable<T>);\n    this._capacity = this._vals.length;\n    this._isFinite = true;\n    this._size = this._capacity;\n  }\n\n  get capacity(): number {\n    return this._isFinite ? this._capacity : Infinity;\n  }\n\n  get size(): number {\n    return this._size;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return CircularArrayList.name;\n  }\n\n  set capacity(capacity: number) {\n    // Convert capacity to a number\n    capacity = +capacity;\n\n    // Check capacity\n    if (isInfinity(capacity)) {\n      // If capacity is Infinity\n      capacity = ARRAY_MAX_LENGTH;\n      this._isFinite = false;\n    } else if (isArrayLength(capacity)) {\n      // If capacity is valid\n      this._isFinite = true;\n    } else {\n      // If capacity is invalid\n      throw new RangeError(\"Invalid capacity\");\n    }\n\n    // Update collection\n    if (this._size <= 0) {\n      // If collection is empty\n      this._capacity = capacity;\n      this.clear();\n    } else if (capacity < this._capacity) {\n      // If capacity is decreasing\n      this.shrink(capacity);\n    } else if (capacity > this._capacity) {\n      // If capacity is increasing\n      this.grow(capacity);\n    }\n  }\n\n  at(index?: number): T | undefined {\n    // Sanitize input\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return undefined;\n    }\n\n    // Return value\n    return this._vals[this.toIndex(index)];\n  }\n\n  clear(): void {\n    this._size = 0;\n    this._head = 0;\n    this._next = 0;\n    this._vals.length = 0;\n  }\n\n  /*\n  copyWithin(target: number, start: number, end?: number): this {\n    const size = this._size;\n\n    // Sanitize inputs\n    target = clamp(addIfBelow(toInteger(target, 0), size), 0, size);\n    start = clamp(addIfBelow(toInteger(start, 0), size), 0, size);\n    const temp = target > start ? target - start : 0;\n    end = clamp(addIfBelow(toInteger(end, size), size), start, size - temp);\n\n    // Copy within\n    this._copyWithin(target, start, end);\n\n    // Return list\n    return this;\n  }\n  */\n\n  /**\n   * @internal\n   */\n  protected _copyWithin(target: number, start: number, end: number): void {\n    // If copying in-place or nothing to copy\n    if (target == start || start >= end) {\n      return;\n    }\n\n    // Get source data segments\n    const capacity = this._capacity - 1;\n    const vals = this._vals;\n    const ranges = this.toRanges(start, end);\n\n    if (target <= start || end <= target) {\n      // Copy from left to right\n      target = this.toIndex(target);\n      for (const [min, max] of ranges) {\n        for (let i = min; i < max; ++i) {\n          vals[target] = vals[i];\n          target = target < capacity ? target + 1 : 0;\n        }\n      }\n    } else {\n      // Copy from right to left\n      target = this.toIndex(target + (end - start));\n      for (const [min, max] of ranges.reverse()) {\n        for (let i = max - 1; i >= min; --i) {\n          target = target > 0 ? target - 1 : capacity;\n          vals[target] = vals[i];\n        }\n      }\n    }\n  }\n\n  delete(index: number): boolean {\n    // Sanitize input\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return false;\n    }\n\n    // Delete value\n    this._delete(index, 1);\n\n    // Return success\n    return true;\n  }\n\n  /**\n   * @internal\n   */\n  protected _delete(index: number, deleteCount: number): void {\n    this._copyWithin(index, index + deleteCount, this._size);\n    this._pop(deleteCount);\n  }\n\n  *entries(): IterableIterator<[number, T]> {\n    for (let ext = 0; ext < this._size; ++ext) {\n      yield [ext, this._vals[this.toIndex(ext)]];\n    }\n  }\n\n  fill(value: T, start?: number, end?: number): this {\n    const size = this._size;\n\n    // Sanitize inputs\n    start = clamp(addIfBelow(toInteger(start, 0), size), 0, size);\n    end = clamp(addIfBelow(toInteger(end, size), size), start, size);\n\n    // Fill values\n    this._fill(value, start, end);\n\n    // Return list\n    return this;\n  }\n\n  /**\n   * @internal\n   */\n  protected _fill(value: T, start: number, end: number): void {\n    for (const [min, max] of this.toRanges(start, end)) {\n      this._vals.fill(value, min, max);\n    }\n  }\n\n  first(): T | undefined {\n    return this._size > 0 ? this._vals[this._head] : undefined;\n  }\n\n  forEach(\n    callbackfn: (value: T, index: number, collection: this) => void,\n    thisArg?: unknown\n  ): void {\n    const N = this._size;\n    for (let ext = 0; ext < N && ext < this._size; ++ext) {\n      const value = this._vals[this.toIndex(ext)];\n      callbackfn.call(thisArg, value, ext, this);\n    }\n  }\n\n  has(value: T): boolean {\n    const vals = this._vals;\n    for (const [min, max] of this.toRanges(0, this._size)) {\n      for (let i = min; i < max; ++i) {\n        if (value === vals[i]) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  *keys(): IterableIterator<number> {\n    for (let ext = 0; ext < this._size; ++ext) {\n      yield ext;\n    }\n  }\n\n  last(): T | undefined {\n    return this._size > 0\n      ? this._vals[this.toIndex(this._size - 1)]\n      : undefined;\n  }\n\n  pop(): T | undefined {\n    // If list is empty\n    if (this._size <= 0) {\n      return undefined;\n    }\n\n    // Get and remove first value\n    const value = this._vals[this.toIndex(this._size - 1)];\n    this._pop(1);\n\n    // Return value\n    return value;\n  }\n\n  /**\n   * @internal\n   */\n  protected _pop(N: number): void {\n    // Remove values\n    const newSize = this._size - N;\n    this._fill(undefined as T, newSize, this._size);\n\n    // Update state\n    this._next = this.toIndex(newSize);\n    this._size = newSize;\n  }\n\n  push(...items: T[]): number {\n    // If no items\n    if (items.length <= 0) {\n      return this._size;\n    }\n\n    // If no capacity\n    if (this._capacity <= 0) {\n      this._overflow(items);\n      return this._size;\n    }\n\n    // Push items\n    this._insert(this._size, items);\n\n    // Return new size\n    return this._size;\n  }\n\n  set(index: number, value: T): T | undefined {\n    // Sanitize input\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return undefined;\n    }\n\n    // Update value\n    index = this.toIndex(index);\n    const prevValue = this._vals[index];\n    this._vals[index] = value;\n\n    // Return previous value\n    return prevValue;\n  }\n\n  shift(): T | undefined {\n    // If list is empty\n    if (this._size <= 0) {\n      return undefined;\n    }\n\n    // Get and remove first value\n    const value = this._vals[this._head];\n    this._shift(1);\n\n    // Return value\n    return value;\n  }\n\n  /**\n   * @internal\n   */\n  protected _shift(N: number): void {\n    // Remove items\n    this._fill(undefined as T, 0, N);\n\n    // Update state\n    this._head = this.toIndex(N);\n    this._size -= N;\n  }\n\n  slice(start?: number, end?: number): CircularArrayList<T> {\n    const size = this._size;\n\n    // Sanitize inputs\n    start = clamp(addIfBelow(toInteger(start, 0), size), 0, size);\n    end = clamp(addIfBelow(toInteger(end, size), size), start, size);\n\n    // Return slice\n    return this.toList(this._slice(start, end));\n  }\n\n  /**\n   * @internal\n   */\n  protected _slice(start: number, end: number): T[] {\n    const from = this._vals;\n    const to = new Array<T>(end - start);\n\n    let j = 0;\n    for ([start, end] of this.toRanges(start, end)) {\n      for (let i = start; i < end; ++i) {\n        to[j++] = from[i];\n      }\n    }\n\n    return to;\n  }\n\n  splice(\n    start: number,\n    deleteCount?: number,\n    ...items: T[]\n  ): CircularArrayList<T> {\n    const size = this._size;\n\n    // Sanitize inputs\n    start = clamp(addIfBelow(toInteger(start, 0), size), 0, size);\n    deleteCount = clamp(toInteger(deleteCount, 0), 0, size - start);\n\n    // Create output\n    const out = this.toList(this._slice(start, start + deleteCount));\n\n    // Update list\n    this._splice(start, deleteCount, items);\n\n    // Return output\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  protected _splice(start: number, deleteCount: number, items: T[] = []): void {\n    const addCount = items.length;\n    const replaceCount = Math.min(deleteCount, addCount);\n    const vals = this._vals;\n\n    // Replace values\n    let j = 0;\n    for (const [a, b] of this.toRanges(start, start + replaceCount)) {\n      for (let i = a; i < b; ++i) {\n        vals[i] = items[j++];\n      }\n    }\n\n    // If done\n    if (deleteCount == addCount) {\n      return;\n    }\n\n    // Insert remaining values or finish deletions\n    start += replaceCount;\n    deleteCount < addCount\n      ? this._insert(start, items, replaceCount)\n      : this._delete(start, deleteCount - addCount);\n  }\n\n  /**\n   * @internal\n   */\n  protected _insert(\n    start: number,\n    items: T[],\n    min = 0,\n    max = items.length\n  ): void {\n    const N = max - min;\n\n    // Check free space\n    let free = this._capacity - this._size;\n    if (free >= N) {\n      this._safeInsert(start, items, min, max);\n      return;\n    }\n\n    // Check if \"infinite\" capacity yet not enough space\n    if (!this._isFinite) {\n      this._safeInsert(start, items, min, min + free);\n      throw new Error(\"Out of memory\");\n    }\n\n    // Remove from head\n    if (start > 0) {\n      const shifted = Math.min(start, N - free);\n      this._overflow(this._slice(0, shifted));\n      this._shift(shifted);\n      start -= shifted;\n      free += shifted;\n    }\n\n    // Check free space\n    if (free >= N) {\n      this._safeInsert(start, items, min, max);\n      return;\n    }\n\n    // Remove from items and insert remaining\n    const mid = max - free;\n    this._overflow(items.slice(min, mid));\n    this._safePresert(0, items, mid, max);\n  }\n\n  /**\n   * @internal\n   */\n  protected _safeInsert(\n    vIndex: number,\n    items: T[],\n    min = 0,\n    max = items.length\n  ): void {\n    const N = max - min;\n    const vals = this._vals;\n\n    // Make space\n    this._copyWithin(vIndex + N, vIndex, this._size);\n\n    // Insert into space\n    for (const [start, end] of this.toRanges(vIndex, vIndex + N)) {\n      for (let i = start; i < end; ++i) {\n        vals[i] = items[min++];\n      }\n    }\n\n    // Update state\n    this._size += N;\n    this._next = this.toIndex(this._size);\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.values();\n  }\n\n  unshift(...items: T[]): number {\n    // If no items\n    if (items.length <= 0) {\n      return this._size;\n    }\n\n    // If no capacity\n    if (this._capacity <= 0) {\n      this._overflow(items);\n      return this._size;\n    }\n\n    // Presert items\n    this._presert(0, items);\n\n    // Return new size\n    return this._size;\n  }\n\n  /**\n   * @internal\n   */\n  protected _presert(\n    end: number,\n    items: T[],\n    min = 0,\n    max = items.length\n  ): void {\n    const N = max - min;\n\n    // Check free space\n    let free = this._capacity - this._size;\n    if (free >= N) {\n      this._safePresert(end, items, min, max);\n      return;\n    }\n\n    // Check if \"infinite\" capacity yet not enough space\n    if (!this._isFinite) {\n      this._safePresert(end, items, max - free, max);\n      throw new Error(\"Out of memory\");\n    }\n\n    // Remove from tail\n    if (end < this._size) {\n      const popped = Math.min(this._size - end, N - free);\n      this._overflow(this._slice(this._size - popped, this._size));\n      this._pop(popped);\n      free += popped;\n    }\n\n    // Check free space\n    if (free >= N) {\n      this._safePresert(end, items, min, max);\n      return;\n    }\n\n    // Remove from items and insert remaining\n    const mid = min + free;\n    this._overflow(items.slice(mid, max));\n    this._safeInsert(this._size, items, min, mid);\n  }\n\n  /**\n   * @internal\n   */\n  protected _safePresert(\n    vIndex: number,\n    items: T[],\n    min = 0,\n    max = items.length\n  ): void {\n    const capacity = this._capacity;\n    const N = max - min;\n    const vals = this._vals;\n\n    // Make space\n    const newHead = capacity - N;\n    this._copyWithin(newHead, 0, vIndex);\n\n    // Insert into space\n    vIndex += newHead;\n    for (const [start, end] of this.toRanges(vIndex, vIndex + N)) {\n      for (let i = start; i < end; ++i) {\n        vals[i] = items[min++];\n      }\n    }\n\n    // Update state\n    this._size += N;\n    this._head = this.toIndex(newHead);\n  }\n\n  *values(): IterableIterator<T> {\n    for (let ext = 0; ext < this._size; ++ext) {\n      yield this._vals[this.toIndex(ext)];\n    }\n  }\n\n  /**\n   * @internal\n   *\n   * Emit an overflow event containing the items evicted from the collection.\n   *\n   * @param evicted - The items evicted from the collection.\n   */\n  protected _overflow(evicted: T[]): void {\n    this._emitter.emit(BoundedEvent.Overflow, evicted);\n  }\n\n  /**\n   * @internal\n   *\n   * Grow capacity.\n   *\n   * @param capacity - the new capacity\n   */\n  protected grow(capacity: number): void {\n    // Check if list is sequential: [    H123456T    ]\n    if (this.isSequential()) {\n      this.sequentialReset(capacity);\n      return;\n    }\n\n    // Queue is not sequential: [456T    H123]\n    if (this._size <= this._head) {\n      // [H123456T] = A + B = N\n      const temp = this._size - this._next;\n      this._vals.copyWithin(temp, 0, this._next);\n      this._vals.copyWithin(0, this._head, this._head + temp);\n      this._vals.length = this._size;\n      this._head = 0;\n      this._next = this._size;\n    } else if (this._head + this._size <= capacity) {\n      // [        H123456T] = 2B < 2N\n      this._vals.length = this._head + this._size;\n      this._vals.copyWithin(this._capacity, 0, this._next);\n      this._vals.fill(undefined as T, 0, this._next);\n      this._next = (this._head + this._size) % capacity;\n    } /* else if (this.next + this._size <= capacity) {\n      // [    H123456T] = A + 2B = N + B < 2N\n      const temp = this._capacity - this.head;\n      this.vals.length = capacity;\n      this.vals.copyWithin(this.next, this.head, this._capacity);\n      this.vals.copyWithin(this.next + temp, 0, this.next);\n      this.vals.fill(undefined as T, 0, this.next);\n      this.vals.length = this.next + this._size;\n      this.head = this.next;\n      this.next = (this.head + this._size) % capacity;\n    } */ else {\n      // [6T      H12345] = B + D < 2B < 2N\n      const diff = capacity - this._capacity;\n      this._vals.length = capacity;\n      this._vals.copyWithin(this._capacity, 0, diff);\n      this._vals.copyWithin(0, diff, this._next);\n      const temp = Math.max(diff, this._next - diff);\n      this._vals.fill(undefined as T, temp, this._next);\n      this._next -= diff;\n    }\n\n    // Update capacity\n    this._capacity = capacity;\n  }\n\n  /**\n   * @internal\n   *\n   * Returns whether the list is stored sequentially in memory.\n   *\n   * @returns `true` if the list is sequential in memory, `false` otherwise.\n   */\n  protected isSequential(): boolean {\n    return this._head < this._next || this._next <= 0;\n  }\n\n  /**\n   * @internal\n   *\n   * Adjusts the list to fit within the given capacity.\n   *\n   * Assumes the list:\n   * - is sequential in memory.\n   * - fits in the given capacity (size \\<= capacity).\n   *\n   * @param capacity - The new capacity.\n   *\n   * @returns `true` if the list was reset, `false` otherwise.\n   */\n  protected sequentialReset(capacity: number): boolean {\n    const tail = this._head + this._size;\n\n    // If list fits in current location: [    H------T    ]\n    if (tail <= capacity) {\n      this._vals.length = tail;\n      this._next = this._vals.length % capacity;\n\n      // If list must be fully moved: [H------T    ]\n    } else if (this._head >= capacity) {\n      this._vals.copyWithin(0, this._head, tail);\n      this._vals.length = this._size;\n      this._head = 0;\n      this._next = this._size % capacity;\n\n      // If list must be partially moved: [--T  H----]\n    } else {\n      this._vals.copyWithin(0, capacity, tail);\n      this._vals.length = capacity;\n      this._next = tail - capacity;\n    }\n\n    this._capacity = capacity;\n    return true;\n  }\n\n  /**\n   * @internal\n   *\n   * Shrink capacity.\n   *\n   * @param capacity - the new capacity\n   */\n  protected shrink(capacity: number): void {\n    // Handle overflow\n    if (this._size > capacity) {\n      const shifted = this._size - capacity;\n      this._overflow(this._slice(0, shifted));\n      this._shift(shifted);\n    }\n\n    // Check if list is sequential: [    H123456T    ]\n    if (this.isSequential()) {\n      this.sequentialReset(capacity);\n      return;\n    }\n\n    // Shift 1st half of list: [456T....H123] -> [456T..H123]\n    const diff = this._capacity - capacity;\n    this._vals.copyWithin(this._head - diff, this._head, this._capacity);\n    this._vals.length = capacity;\n    this._head -= diff;\n    this._capacity = capacity;\n  }\n\n  /**\n   * @internal\n   */\n  protected toIndex(externalIndex: number): number {\n    return (this._head + externalIndex) % this._capacity;\n  }\n\n  /**\n   * @internal\n   */\n  protected toList(items: T[]): CircularArrayList<T> {\n    const out = new CircularArrayList<T>(0);\n    out._vals = items;\n    out._size = items.length;\n    out._capacity = items.length;\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  protected toRanges(min: number, max: number): [number, number][] {\n    const head = this._head;\n    const mid = this._capacity - head;\n    if (max <= mid) {\n      return [[head + min, head + max]];\n    }\n    if (min >= mid) {\n      return [[min - mid, max - mid]];\n    }\n    return [\n      [head + min, this._capacity],\n      [0, max - mid],\n    ];\n  }\n}\n","import { BoundedEvent } from \"../../types/boundedEvent\";\nimport { Bounded } from \"../../types/bounded\";\nimport { Deque } from \"../..\";\nimport { CircularArrayList } from \"../list/circularArrayList\";\n\n/**\n * A circular deque is similar to a traditional deque, but uses a fixed-size,\n * circular buffer. When the deque reaches its maximum capacity and a new\n * element is added, the oldest is discarded, thus maintaining its size.\n *\n * This structure efficiently utilizes memory for applications where only the\n * most recent additions are of interest and older data can be discarded.\n *\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularDeque<T> implements Bounded<T>, Deque<T> {\n  /**\n   * @internal\n   */\n  protected _list: CircularArrayList<T>;\n\n  /**\n   * Creates a new deque. Default `capacity` is `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new deque with the given capacity.\n   *\n   * @param capacity - the deque's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new deque from the given items. `capacity` will equal the number of items.\n   *\n   * @param items - the initial values in the deque.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    this._list = new CircularArrayList(capacity as number);\n  }\n\n  get capacity(): number {\n    return this._list.capacity;\n  }\n\n  get size(): number {\n    return this._list.size;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return CircularDeque.name;\n  }\n\n  set capacity(capacity: number) {\n    this._list.capacity = capacity;\n  }\n\n  clear(): void {\n    this._list.clear();\n  }\n\n  entries(): IterableIterator<[number, T]> {\n    return this._list.entries();\n  }\n\n  first(): T | undefined {\n    return this._list.first();\n  }\n\n  forEach(\n    callbackfn: (value: T, index: number, collection: this) => void,\n    thisArg?: unknown\n  ): void {\n    return this._list.forEach((v, i) => callbackfn.call(thisArg, v, i, this));\n  }\n\n  front(): T | undefined {\n    return this._list.first();\n  }\n\n  has(value: T): boolean {\n    return this._list.has(value);\n  }\n\n  keys(): IterableIterator<number> {\n    return this._list.keys();\n  }\n\n  last(): T | undefined {\n    return this._list.last();\n  }\n\n  pop(): T | undefined {\n    return this._list.pop();\n  }\n\n  push(...elems: T[]): number {\n    return this._list.push(...elems);\n  }\n\n  shift(): T | undefined {\n    return this._list.shift();\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return this._list.values();\n  }\n\n  top(): T | undefined {\n    return this._list.last();\n  }\n\n  unshift(...elems: T[]): number {\n    return this._list.unshift(...elems);\n  }\n\n  values(): IterableIterator<T> {\n    return this._list.values();\n  }\n\n  addListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.addListener(event, listener);\n    return this;\n  }\n\n  on(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.on(event, listener);\n    return this;\n  }\n\n  prependListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.prependListener(event, listener);\n    return this;\n  }\n\n  removeListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.removeListener(event, listener);\n    return this;\n  }\n}\n","import { LinkedNode } from \"../types/linkedNode\";\n\n/**\n * Creates a copy of a segment from a linked list.\n *\n * @param node - The first {@link LinkedNode} of the original list from which\n *               the copy operation begins.\n * @param count - The number of nodes to copy. If the count exceeds the number\n *                of nodes available, only the available nodes are copied.\n *\n * @returns A tuple containing:\n *          - The head {@link LinkedNode} of the new list.\n *          - The tail {@link LinkedNode} of the new list.\n *          - An integer representing the total number of nodes copied.\n */\nexport function copy<N extends LinkedNode<unknown>>(\n  node: N | undefined,\n  distance: number\n): [N, N, number] | [undefined, undefined, 0] {\n  // Check distance\n  if (node == null || distance <= 0) {\n    return [undefined, undefined, 0];\n  }\n\n  // Initialize new list\n  const root = { value: undefined } as N;\n  let tail = root;\n\n  // For each node\n  let size = 0;\n  while (node != null && size < distance) {\n    // Create a duplicate\n    const dupe = { value: node.value } as N;\n\n    // Attach the duplicate\n    tail.next = dupe;\n    tail = dupe;\n\n    // Update size\n    ++size;\n\n    // Move to the next node\n    node = node.next;\n  }\n\n  // Return copy\n  tail.next = undefined;\n  return [root.next!, tail, size];\n}\n\n/**\n * Removes and returns a segment of a linked list as a new list.\n *\n * This operation modifies the original list by removing the specified\n * range of nodes and returning the new list's head and tail as a tuple.\n * If `count` \\<= zero, the function returns [undefined, undefined].\n * If `count` \\> len(prev), a `TypeError` is thrown.\n *\n * @param prev - The node preceding the start of the section to be cut.\n * @param count - The number of nodes to include in the cut.\n *\n * @returns A tuple containing the head and tail of the removed segment,\n * or [undefined, undefined] if `count` \\<= zero.\n *\n * @throws - {@link TypeError}\n * thrown if `count` \\> `len(prev)`\n */\nexport function cut<N extends LinkedNode<unknown>>(\n  prev: N,\n  count: number\n): [N, N] | [undefined, undefined] {\n  if (count <= 0) {\n    return [undefined, undefined];\n  }\n  const head = prev.next!;\n  const tail = get(head, count - 1)!;\n  prev.next = tail.next;\n  tail.next = undefined;\n  return [head, tail];\n}\n\n/**\n * Iterates through a linked list, yielding each node's index\n * (position in the list) and value as a tuple.\n *\n * Iteration starts from the `node` node and continues until either the end\n * of the list, or the `end` node if provided.\n *\n * This generator function provides a convenient way to enumerate all nodes in\n * a linked list, similar to how `Array.prototype.entries()` works for arrays.\n *\n * @param node - The node at which to start iterating.\n * @param end - An optional node at which to end (exclusive).\n * If not provided, iteration continues until the end of the list.\n *\n * @throws - {@link TypeError}\n * thrown if an `end` node is provided but not encountered before the end of the list.\n */\nexport function* entries<T>(\n  node?: LinkedNode<T>,\n  end?: LinkedNode<T>\n): Generator<[number, T]> {\n  for (let i = 0; node != end; ++i) {\n    yield [i, node!.value];\n    node = node!.next;\n  }\n}\n\n/**\n * Retrieves the node at the specified distance from the given node.\n *\n * This function iterates through the linked list starting from the `node`\n * node, moving `index` nodes away in the list.\n *\n * @param node - The node from which to start.\n * @param index - The forward distance of the node to retrieve.\n *\n * @returns The node at the specified index,\n * or `undefined` if `index` does not exist.\n */\nexport function get<N extends LinkedNode<unknown>>(\n  node: N | undefined,\n  index: number\n): N | undefined {\n  if (index < 0) {\n    return undefined;\n  }\n  for (let i = 0; node != null && i < index; ++i) {\n    node = node.next;\n  }\n  return node;\n}\n\n/**\n * Determines whether a linked list contains a node with a specified value.\n *\n * Iteration starts from the `node` node and continues until either the end\n * of the list, or the `end` node if provided.\n *\n * @param node - The node from which to start searching.\n * @param value - The value to search for.\n * @param end - An optional node at which to end the search (exclusive).\n * If not provided, the search continues until the end of the list.\n *\n * @returns `true` if the specified value is found, `false` otherwise.\n *\n * @throws - {@link TypeError}\n * thrown if an `end` node is provided but not encountered before the end of the list.\n *\n */\nexport function has<T>(\n  node: LinkedNode<T> | undefined,\n  value: T,\n  end?: LinkedNode<T>\n): boolean {\n  while (node != end) {\n    if (node!.value === value) {\n      return true;\n    }\n    node = node!.next;\n  }\n  return false;\n}\n\n/**\n * Inserts a new sequence of values into a linked list right after a specified node.\n *\n * @param prev - The node in the linked list after which the new values will be inserted.\n * @param values - An iterable of values to be inserted.\n * @returns The last node that was inserted into the list, or `prev` if no values were inserted.\n */\nexport function insert<T>(\n  prev: LinkedNode<T>,\n  values: Iterable<T>\n): LinkedNode<T> {\n  // Convert values to list\n  const [head, tail, size] = toList(values);\n\n  // If no values\n  if (size <= 0) {\n    return prev;\n  }\n\n  // Add values\n  tail!.next = prev.next;\n  prev.next = head;\n\n  return tail!;\n}\n\n/**\n * Iterates through a linked list, yielding each node's index\n * (position in the list).\n *\n * Iteration starts from the `node` node and continues until either the end\n * of the list, or the `end` node if provided.\n *\n * This generator function provides a convenient way to enumerate all nodes in\n * a linked list, similar to how `Array.prototype.entries()` works for arrays.\n *\n * @param node - The node at which to start iterating.\n * @param end - An optional node at which to end (exclusive).\n * If not provided, iteration continues until the end of the list.\n *\n * @throws - {@link TypeError}\n * thrown if an `end` node is provided but not encountered before the end of the list.\n */\nexport function* keys<T>(\n  node?: LinkedNode<T>,\n  end?: LinkedNode<T>\n): Generator<number> {\n  for (let i = 0; node != end; ++i) {\n    yield i;\n    node = node!.next;\n  }\n}\n\n/**\n * Converts an iterable collection of values into a linked list and returns\n * the head, tail and size of the list.\n *\n * If the iterable is empty, the function returns a triple containing\n * `[undefined, undefined, 0]` to indicate that no list was created.\n *\n * @param values - The iterable collection of elements.\n *\n * @returns A triple containing the head, tail and size of the list.\n * Returns `[undefined, undefined, 0]` if the iterable is empty.\n */\nexport function toList<T>(\n  values: Iterable<T>\n): [LinkedNode<T>, LinkedNode<T>, number] | [undefined, undefined, 0] {\n  const root = {} as LinkedNode<T>;\n\n  let count = 0;\n  let tail = root;\n  for (const value of values) {\n    tail.next = { value };\n    tail = tail.next;\n    ++count;\n  }\n\n  return root.next === undefined\n    ? [undefined, undefined, 0]\n    : [root.next, tail, count];\n}\n\n/**\n * Iterates through a linked list, yielding each node's value.\n *\n * Iteration starts from the `node` node and continues until either the end\n * of the list, or the `end` node if provided.\n *\n * This generator function provides a convenient way to enumerate all nodes in\n * a linked list, similar to how `Array.prototype.entries()` works for arrays.\n *\n * @param node - The node at which to start iterating.\n * @param end - An optional node at which to end (exclusive).\n * If not provided, iteration continues until the end of the list.\n *\n * @throws - {@link TypeError}\n * thrown if an `end` node is provided but not encountered before the end of the list.\n */\nexport function* values<T>(\n  node?: LinkedNode<T>,\n  end?: LinkedNode<T>\n): Generator<T> {\n  while (node != end) {\n    yield node!.value;\n    node = node!.next;\n  }\n}\n","import { DoublyLinkedNode } from \"../types/doublyLinkedNode\";\n\nimport { get as singlyGet, cut as singlyCut } from \"./linkedNode\";\n\n/**\n * Creates a copy of a segment from a doubly linked list.\n *\n * @param node - The first {@link DoublyLinkedNode} of the original list from\n *               which the copy operation begins.\n * @param count - The number of nodes to copy. If the count exceeds the number\n *                of nodes available, only the available nodes are copied.\n *\n * @returns A tuple containing:\n *          - The head {@link DoublyLinkedNode} of the new list.\n *          - The tail {@link DoublyLinkedNode} of the new list.\n *          - An integer representing the total number of nodes copied.\n */\nexport function copy<N extends DoublyLinkedNode<unknown>>(\n  node: N | undefined,\n  distance: number\n): [N, N, number] | [undefined, undefined, 0] {\n  // Check distance\n  if (node == null || distance <= 0) {\n    return [undefined, undefined, 0];\n  }\n\n  // Initialize new list\n  const root = { value: undefined } as N;\n  let tail = root;\n\n  // For each node\n  let size = 0;\n  while (node != null && size < distance) {\n    // Create a duplicate\n    const dupe = { value: node.value } as N;\n\n    // Attach the duplicate\n    tail.next = dupe;\n    dupe.prev = tail;\n    tail = dupe;\n\n    // Update size\n    ++size;\n\n    // Move to the next node\n    node = node.next;\n  }\n\n  // Return copy\n  const head = root.next!;\n  head.prev = undefined;\n  tail.next = undefined;\n  return [head, tail, size];\n}\n\n/**\n * Removes and returns a segment of a linked list as a new list.\n *\n * This operation modifies the original list by removing the specified\n * range of nodes and returning the new list's head and tail as a tuple.\n * If `count` \\<= zero, the function returns [undefined, undefined].\n * If `count` \\> len(prev), a `TypeError` is thrown.\n *\n * @param prev - The node preceding the start of the section to be cut.\n * @param count - The number of nodes to include in the cut.\n *\n * @returns A tuple containing the head and tail of the removed segment,\n * or [undefined, undefined] if `count` \\<= zero.\n *\n * @throws - {@link TypeError}\n * thrown if `count` \\> `len(prev)`\n */\nexport function cut<N extends DoublyLinkedNode<unknown>>(\n  root: N,\n  count: number\n): [N, N] | [undefined, undefined] {\n  if (count <= 0) {\n    return [undefined, undefined];\n  }\n  const [head, tail] = singlyCut(root, count) as [N, N];\n  head.prev = undefined;\n  if (root.next != null) {\n    root.next.prev = root;\n  }\n  return [head, tail];\n}\n\n/**\n * Retrieves the node at the specified distance from the given node.\n *\n * This function iterates through the linked list starting from the `node`\n * node, moving `index` nodes away in the list.\n *\n * @param node - The node from which to start.\n * @param index - The forward distance of the node to retrieve.\n *\n * @returns The node at the specified index,\n * or `undefined` if `index` does not exist.\n */\nexport function get<N extends DoublyLinkedNode<unknown>>(\n  node: N | undefined,\n  index: number\n): N | undefined {\n  if (index >= 0) {\n    return singlyGet(node, index);\n  }\n  for (let i = 0; node != null && i > index; --i) {\n    node = node.prev;\n  }\n  return node;\n}\n\n/**\n * Inserts a new sequence of values into a linked list right after a specified node.\n *\n * @param prev - The node in the linked list after which the new values will be inserted.\n * @param values - An iterable of values to be inserted.\n *\n * @returns The last node that was inserted into the list, or `prev` if no values were inserted.\n */\nexport function insert<T>(\n  prev: DoublyLinkedNode<T>,\n  values: T[]\n): DoublyLinkedNode<T> {\n  // Convert values to list\n  const [head, tail, size] = toList(values);\n\n  // If no values\n  if (size <= 0) {\n    return prev;\n  }\n\n  // Add values\n  const next = prev.next;\n  prev.next = head;\n  head!.prev = prev;\n  tail!.next = next;\n  if (next != null) {\n    next.prev = tail;\n  }\n\n  return tail!;\n}\n\n/**\n * Converts an iterable collection of values into a linked list and returns\n * the head, tail and size of the list.\n *\n * If the iterable is empty, the function returns a triple containing\n * `[undefined, undefined, 0]` to indicate that no list was created.\n *\n * @param values - The iterable collection of elements.\n *\n * @returns A triple containing the head, tail and size of the list.\n * Returns `[undefined, undefined, 0]` if the iterable is empty.\n */\nexport function toList<T>(\n  values: Iterable<T>\n):\n  | [DoublyLinkedNode<T>, DoublyLinkedNode<T>, number]\n  | [undefined, undefined, 0] {\n  const root = {} as DoublyLinkedNode<T>;\n\n  let count = 0;\n  let tail = root;\n  for (const value of values) {\n    tail.next = { prev: tail, value } as DoublyLinkedNode<T>;\n    tail = tail.next;\n    ++count;\n  }\n\n  if (count <= 0) {\n    return [undefined, undefined, 0];\n  }\n\n  root.next!.prev = undefined;\n  return [root.next!, tail, count];\n}\n","/**\n * Generates an iterable that yields chunks (arrays) of elements from the input iterable,\n * with each chunk containing up to a specified maximum number of elements. This function\n * is useful for processing or handling large collections of items in smaller, more\n * manageable segments.\n *\n * `chunkSize` is truncated to an integer to ensure expected behavior.\n * If `chunkSize` is less than 1, an empty iterable is generated.\n *\n * Example usage:\n * ```typescript\n * const nums = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n * for (const chunk of chunk(nums, 3)) {\n *   console.log(chunk); // Outputs: [1, 2, 3], [4, 5, 6], [7, 8, 9]\n * }\n * ```\n *\n * @param source - The original iterable to be chunked. Can be any iterable object (e.g., Array, Set, or a custom iterable).\n * @param chunkSize - The maximum size of each chunk. Must be a positive integer; non-integer values are truncated.\n *\n * @returns An iterable iterator that yields each chunk as an array of elements.\n */\nexport function* chunk<T>(\n  source: Iterable<T>,\n  chunkSize: number\n): IterableIterator<T[]> {\n  if (chunkSize < 1) {\n    return;\n  }\n  let chunk: T[] = [];\n  chunkSize = Math.trunc(chunkSize);\n  for (const value of source) {\n    if (chunk.push(value) >= chunkSize) {\n      yield chunk;\n      chunk = [];\n    }\n  }\n  if (chunk.length > 0) {\n    yield chunk;\n  }\n}\n","import { Bounded } from \"../../types/bounded\";\nimport { BoundedEvent } from \"../../types/boundedEvent\";\nimport { DoublyLinkedNode as Node } from \"../../types/doublyLinkedNode\";\nimport { List } from \"../../types/list\";\n\nimport { ARGS_MAX_LENGTH, LINKED_MAX_LENGTH } from \"../../utils/constants\";\nimport { copy, cut, get, toList } from \"../../utils/doublyLinkedNode\";\nimport { isInfinity, isLinkedLength, isNumber } from \"../../utils/is\";\nimport { chunk } from \"../../utils/iterable\";\nimport {\n  entries,\n  has,\n  keys,\n  values as getValues,\n} from \"../../utils/linkedNode\";\nimport { addIfBelow, clamp, isInRange, toInteger } from \"../../utils/math\";\n\nimport { CircularBase } from \"../circularBase\";\n\nexport class CircularDoublyLinkedList<T>\n  extends CircularBase<T>\n  implements Bounded<T>, List<T>\n{\n  /**\n   * @internal\n   * The maximum number of elements that can be stored in the collection.\n   */\n  protected _capacity: number;\n\n  /**\n   * @internal\n   * Whether capacity is finite (true) or infinite (false).\n   */\n  protected _isFinite: boolean;\n\n  /**\n   * @internal\n   * The root of the linked list\n   */\n  protected _root: Node<T>;\n\n  /**\n   * @internal\n   * The current size of the list (0 \\<= size \\<= capacity)\n   */\n  protected _size!: number;\n\n  /**\n   * Creates a standard linked list (no capacity restriction).\n   */\n  constructor();\n  /**\n   * Creates a linked list with the given capacity.\n   *\n   * @param capacity - the list's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a linked list with the given items. Capacity is set to the number of items.\n   *\n   * @param items - the values to store in the list.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    super();\n\n    // Initialize class variables\n    this._capacity = LINKED_MAX_LENGTH;\n    this._isFinite = false;\n    this._root = { value: undefined } as Node<T>;\n    this.clear();\n\n    // Case 1: input is null or undefined\n    if (capacity == null) {\n      return;\n    }\n\n    // Case 2: input is capacity\n    if (isNumber(capacity)) {\n      this.capacity = capacity;\n      return;\n    }\n\n    // Case 3: capacity is iterable\n    const [head, tail, size] = toList(capacity as Iterable<T>);\n    this._capacity = size;\n    this._isFinite = true;\n    if (size > 0) {\n      this._root.next = head!;\n      this._root.prev = tail!;\n      head!.prev = this._root;\n      tail!.next = this._root;\n      this._size = size;\n    }\n  }\n\n  get capacity(): number {\n    return this._isFinite ? this._capacity : Infinity;\n  }\n\n  get size(): number {\n    return this._size;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return CircularDoublyLinkedList.name;\n  }\n\n  set capacity(capacity: number) {\n    // Convert input to a number\n    capacity = +capacity;\n\n    // Convert input to a number\n    capacity = +capacity;\n\n    // Check capacity\n    if (isInfinity(capacity)) {\n      // If capacity is Infinity\n      capacity = LINKED_MAX_LENGTH;\n      this._isFinite = false;\n    } else if (isLinkedLength(capacity)) {\n      // If capacity is valid\n      this._isFinite = true;\n    } else {\n      // If capacity is invalid\n      throw new RangeError(\"Invalid capacity\");\n    }\n\n    // Update capacity\n    this._capacity = capacity;\n\n    // If current size fits within new capacity\n    if (this._size <= capacity) {\n      return;\n    }\n\n    // Shrink\n    const diff = this._size - capacity;\n    const [head, tail] = cut(this._root, diff);\n    this._size -= diff;\n\n    // Emit discarded items\n    for (const array of chunk(getValues(head, tail!.next), ARGS_MAX_LENGTH)) {\n      this._overflow(array);\n    }\n  }\n\n  at(index: number): T | undefined {\n    // Check index\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return undefined;\n    }\n\n    // Return value\n    return this._get(index).value;\n  }\n\n  clear(): void {\n    this._size = 0;\n    this._root.next = this._root;\n    this._root.prev = this._root;\n  }\n\n  delete(index: number): boolean {\n    // Check index\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return false;\n    }\n\n    // Delete value\n    const node = this._get(index);\n    node.prev!.next = node.next;\n    node.next!.prev = node.prev;\n    --this._size;\n\n    return true;\n  }\n\n  entries(): IterableIterator<[number, T]> {\n    return entries(this._root.next, this._root);\n  }\n\n  fill(value: T, start?: number, end?: number): this {\n    // Sanitize start\n    start = toInteger(start, 0);\n    start = clamp(addIfBelow(start, this._size), 0, this._size);\n\n    // Sanitize end\n    end = toInteger(end, this._size);\n    end = clamp(addIfBelow(end, this._size), 0, this._size);\n\n    // Update values\n    let node = this._get(start);\n    while (start < end) {\n      node.value = value;\n      node = node.next!;\n      ++start;\n    }\n\n    return this;\n  }\n\n  forEach(\n    callbackfn: (value: T, index: number, list: this) => void,\n    thisArg?: unknown\n  ): void {\n    let node = this._root;\n    for (let i = 0; i < this._size; ++i) {\n      node = node.next!;\n      callbackfn.call(thisArg, node.value, i, this);\n    }\n  }\n\n  has(value: T): boolean {\n    return has(this._root.next, value, this._root);\n  }\n\n  keys(): IterableIterator<number> {\n    return keys(this._root.next, this._root);\n  }\n\n  pop(): T | undefined {\n    // If list is empty\n    if (this._size <= 0) {\n      return undefined;\n    }\n\n    // Remove last value\n    const [head] = this._cut(this._size - 1, 1);\n\n    // Return value\n    return head!.value;\n  }\n\n  push(...values: T[]): number {\n    // Add values\n    this._insert(this._size, values);\n\n    // Return size\n    return this._size;\n  }\n\n  set(index: number, value: T): T | undefined {\n    // Check index\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return undefined;\n    }\n\n    // Update node\n    const node = this._get(index);\n    const prevValue = node.value;\n    node.value = value;\n\n    // Return previous value\n    return prevValue;\n  }\n\n  shift(): T | undefined {\n    // If list is empty\n    if (this._size <= 0) {\n      return undefined;\n    }\n\n    // Remove first value\n    const [head] = this._cut(0, 1);\n\n    // Return value\n    return head!.value;\n  }\n\n  slice(start?: number, end?: number): CircularDoublyLinkedList<T> {\n    const size = this._size;\n\n    // Sanitize inputs\n    start = clamp(addIfBelow(toInteger(start, 0), size), 0, size);\n    end = clamp(addIfBelow(toInteger(end, size), size), start, size);\n\n    // Check if empty\n    if (start >= end) {\n      return new CircularDoublyLinkedList<T>(0);\n    }\n\n    // Create segment copy\n    const node = this._get(start);\n    const [head, tail, length] = copy(node, end - start);\n\n    // Return copied segment as a list\n    const list = new CircularDoublyLinkedList<T>(length);\n    head!.prev = list._root;\n    tail!.next = list._root;\n    list._root.next = head;\n    list._root.prev = tail;\n    list._size = length;\n\n    // Return new list\n    return list;\n  }\n\n  splice(\n    start: number,\n    deleteCount?: number,\n    ...items: T[]\n  ): CircularDoublyLinkedList<T> {\n    const size = this._size;\n\n    // Sanitize inputs\n    start = clamp(addIfBelow(toInteger(start, 0), size), 0, size);\n    deleteCount = clamp(toInteger(deleteCount, 0), 0, size - start);\n\n    // Remove deleted items, if any\n    let list: CircularDoublyLinkedList<T>;\n    if (deleteCount <= 0) {\n      list = new CircularDoublyLinkedList<T>(0);\n    } else {\n      const [head, tail] = this._cut(start, deleteCount);\n      list = new CircularDoublyLinkedList<T>(deleteCount);\n      head!.prev = list._root;\n      tail!.next = list._root;\n      list._root.next = head;\n      list._root.prev = tail;\n      list._size = deleteCount;\n    }\n\n    // Add new items\n    this._insert(start, items);\n\n    // Return deleted items as a list\n    return list;\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return getValues(this._root.next, this._root);\n  }\n\n  unshift(...values: T[]): number {\n    // Add values\n    this._presert(0, values);\n\n    // Return new size\n    return this._size;\n  }\n\n  values(): IterableIterator<T> {\n    return getValues(this._root.next, this._root);\n  }\n\n  /**\n   * @internal\n   */\n  protected _cut(\n    start: number,\n    count: number\n  ): [Node<T>, Node<T>] | [undefined, undefined] {\n    // Get previous\n    const prev = this._get(start - 1)!;\n\n    // Cut and get removed segment\n    const [head, tail] = cut(prev, count);\n\n    // Update size\n    this._size -= count;\n\n    // Return cut segment\n    return [head, tail] as [Node<T>, Node<T>];\n  }\n\n  /**\n   * @internal\n   */\n  protected _get(index: number): Node<T> {\n    index -= index <= this._size / 2 ? -1 : this._size;\n    return get(this._root, index)!;\n  }\n\n  /**\n   * @internal\n   */\n  protected _insert(index: number, values: T[]): void {\n    // If no values\n    const N = values.length;\n    if (N <= 0) {\n      return;\n    }\n\n    // If no capacity\n    if (this._capacity <= 0) {\n      this._overflow(values);\n      return;\n    }\n\n    // Check free space\n    let free = this._capacity - this._size;\n    if (free >= N) {\n      this._safeInsert(index, values);\n      return;\n    }\n\n    // Check if \"infinite\" capacity yet not enough space\n    if (!this._isFinite) {\n      this._safeInsert(index, values.slice(0, free));\n      throw new Error(\"Out of memory\");\n    }\n\n    // Remove from head\n    if (index > 0) {\n      const shifted = Math.min(index, N - free);\n      const [head] = this._cut(0, shifted);\n      this._overflow(getValues(head));\n      index -= shifted;\n      free += shifted;\n    }\n\n    // Check free space\n    if (free >= N) {\n      this._safeInsert(index, values);\n      return;\n    }\n\n    // Remove from items and insert remaining\n    const mid = values.length - free;\n    this._overflow(values.slice(0, mid));\n    this._safeInsert(0, values.slice(mid));\n  }\n\n  /**\n   * @internal\n   *\n   * Emit an overflow event containing the items evicted from the collection.\n   *\n   * @param evicted - The items evicted from the collection.\n   */\n  protected _overflow(evicted: Iterable<T>): void {\n    if (!Array.isArray(evicted)) {\n      evicted = Array.from(evicted);\n    }\n    this._emitter.emit(BoundedEvent.Overflow, evicted);\n  }\n\n  /**\n   * @internal\n   */\n  protected _presert(index: number, values: T[]): void {\n    // If no values\n    const N = values.length;\n    if (N <= 0) {\n      return;\n    }\n\n    // If no capacity\n    if (this._capacity <= 0) {\n      this._overflow(values);\n      return;\n    }\n\n    // Check free space\n    let free = this._capacity - this._size;\n    if (free >= N) {\n      this._safeInsert(index, values);\n      return;\n    }\n\n    // Check if \"infinite\" capacity yet not enough space\n    if (!this._isFinite) {\n      this._safeInsert(0, values.slice(values.length - free));\n      throw new Error(\"Out of memory\");\n    }\n\n    // Remove from tail\n    if (index < this._size) {\n      const popped = Math.min(this._size - index, N - free);\n      const [head] = this._cut(this._size - popped, popped);\n      this._overflow(getValues(head));\n      free += popped;\n    }\n\n    // Check free space\n    if (free >= N) {\n      this._safeInsert(index, values);\n      return;\n    }\n\n    // Remove from items and insert remaining\n    this._overflow(values.slice(free));\n    this._safeInsert(this._size, values.slice(0, free));\n  }\n\n  /**\n   * @internal\n   */\n  protected _safeInsert(index: number, values: T[]): void {\n    // Sanitize input\n    if (values.length <= 0) {\n      return;\n    }\n\n    // Create segment\n    const [head, tail, size] = toList(values);\n\n    // Insert segment\n    const prev = this._get(index - 1);\n    const next = prev.next!;\n    head!.prev = prev;\n    tail!.next = next;\n    next.prev = tail!;\n    prev.next = head;\n\n    // Update list state\n    this._size += size;\n  }\n}\n","import { BoundedEvent } from \"../../types/boundedEvent\";\nimport { Bounded } from \"../../types/bounded\";\nimport { Deque } from \"../../types/deque\";\n\nimport { CircularDoublyLinkedList } from \"../list/circularDoublyLinkedList\";\n\n/**\n * A circular deque is similar to a traditional deque, but uses a fixed-size,\n * circular buffer. When the deque reaches its maximum capacity and a new\n * element is added, the oldest is discarded, thus maintaining its size.\n *\n * This structure efficiently utilizes memory for applications where only the\n * most recent additions are of interest and older data can be discarded.\n *\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularLinkedDeque<T> implements Bounded<T>, Deque<T> {\n  /**\n   * @internal\n   */\n  protected _list: CircularDoublyLinkedList<T>;\n\n  /**\n   * Creates a new stack with `capacity` defaulted to `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new stack with the given capacity.\n   *\n   * @param capacity - the stack's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new stack. Initial capacity is the number of items given.\n   *\n   * @param items - the values to store in the stack.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    this._list = new CircularDoublyLinkedList(capacity as number);\n  }\n\n  get capacity(): number {\n    return this._list.capacity;\n  }\n\n  get size(): number {\n    return this._list.size;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return CircularLinkedDeque.name;\n  }\n\n  set capacity(capacity: number) {\n    this._list.capacity = capacity;\n  }\n\n  first(): T | undefined {\n    return this._list.at(0);\n  }\n\n  front(): T | undefined {\n    return this._list.at(0);\n  }\n\n  clear(): void {\n    this._list.clear();\n  }\n\n  entries(): IterableIterator<[number, T]> {\n    return this._list.entries();\n  }\n\n  forEach(\n    callbackfn: (value: T, index: number, collection: this) => void,\n    thisArg?: unknown\n  ): void {\n    this._list.forEach((v, i) => callbackfn.call(thisArg, v, i, this), thisArg);\n  }\n\n  has(value: T): boolean {\n    return this._list.has(value);\n  }\n\n  keys(): IterableIterator<number> {\n    return this._list.keys();\n  }\n\n  last(): T | undefined {\n    return this._list.at(-1);\n  }\n\n  pop(): T | undefined {\n    return this._list.pop();\n  }\n\n  push(...elems: T[]): number {\n    return this._list.push(...elems);\n  }\n\n  shift(): T | undefined {\n    return this._list.shift();\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.values();\n  }\n\n  top(): T | undefined {\n    return this._list.at(-1);\n  }\n\n  unshift(...elems: T[]): number {\n    return this._list.unshift(...elems);\n  }\n\n  values(): IterableIterator<T> {\n    return this._list.values();\n  }\n\n  addListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.addListener(event, listener);\n    return this;\n  }\n\n  on(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.on(event, listener);\n    return this;\n  }\n\n  prependListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.prependListener(event, listener);\n    return this;\n  }\n\n  removeListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.removeListener(event, listener);\n    return this;\n  }\n}\n","import { Bounded, BoundedEvent } from \"../..\";\nimport { LinkedNode as Node } from \"../../types/linkedNode\";\nimport { List } from \"../../types/list\";\nimport { ARGS_MAX_LENGTH, LINKED_MAX_LENGTH } from \"../../utils/constants\";\nimport { isInfinity, isLinkedLength, isNumber } from \"../../utils/is\";\nimport { chunk } from \"../../utils/iterable\";\nimport {\n  copy,\n  cut,\n  entries,\n  get,\n  has,\n  keys,\n  toList,\n  values,\n} from \"../../utils/linkedNode\";\nimport { addIfBelow, clamp, isInRange, toInteger } from \"../../utils/math\";\nimport { CircularBase } from \"../circularBase\";\n\n// splice, unshift\n\nexport class CircularLinkedList<T>\n  extends CircularBase<T>\n  implements Bounded<T>, List<T>\n{\n  /**\n   * @internal\n   * The maximum number of elements that can be stored in the collection.\n   */\n  protected _capacity: number;\n\n  /**\n   * @internal\n   * Whether capacity is finite (true) or infinite (false).\n   */\n  protected _isFinite: boolean;\n\n  /**\n   * @internal\n   * The root of the linked list\n   */\n  protected _root: Node<T>;\n\n  /**\n   * @internal\n   * The current size of the list (0 \\<= size \\<= capacity)\n   */\n  protected _size!: number;\n\n  /**\n   * @internal\n   * The last node in the linked list.\n   */\n  protected _tail!: Node<T>;\n\n  /**\n   * Creates a standard linked list (no capacity restriction).\n   */\n  constructor();\n  /**\n   * Creates a linked list with the given capacity.\n   *\n   * @param capacity - the list's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a linked list with the given items. Capacity is set to the number of items.\n   *\n   * @param items - the values to store in the list.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    super();\n\n    // Initialize class variables\n    this._capacity = LINKED_MAX_LENGTH;\n    this._isFinite = false;\n    this._root = { value: undefined } as Node<T>;\n    this.clear();\n\n    // Case 1: input is null or undefined\n    if (capacity == null) {\n      return;\n    }\n\n    // Case 2: input is capacity\n    if (isNumber(capacity)) {\n      this.capacity = capacity;\n      return;\n    }\n\n    // Case 3: capacity is iterable\n    const [head, tail, size] = toList(capacity as Iterable<T>);\n    this._capacity = size;\n    this._isFinite = true;\n    if (size > 0) {\n      this._root.next = head;\n      this._tail = tail!;\n      this._size = size;\n    }\n  }\n\n  get capacity(): number {\n    return this._isFinite ? this._capacity : Infinity;\n  }\n\n  get size(): number {\n    return this._size;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return CircularLinkedList.name;\n  }\n\n  set capacity(capacity: number) {\n    // Convert input to a number\n    capacity = +capacity;\n\n    // Check capacity\n    if (isInfinity(capacity)) {\n      // If capacity is Infinity\n      capacity = LINKED_MAX_LENGTH;\n      this._isFinite = false;\n    } else if (isLinkedLength(capacity)) {\n      // If capacity is valid\n      this._isFinite = true;\n    } else {\n      // If capacity is invalid\n      throw new RangeError(\"Invalid capacity\");\n    }\n\n    // Update capacity\n    this._capacity = capacity;\n\n    // If current size fits within new capacity\n    if (this._size <= capacity) {\n      return;\n    }\n\n    // Shrink\n    const diff = this._size - capacity;\n    const [head] = cut(this._root, diff);\n    this._size -= diff;\n\n    // Update tail, if needed\n    if (this._size <= 0) {\n      this._tail = this._root;\n    }\n\n    // Emit discarded items\n    this._overflow(head);\n  }\n\n  at(index?: number): T | undefined {\n    // Sanitize input\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return undefined;\n    }\n\n    // Return value\n    return this._get(index)!.value;\n  }\n\n  clear(): void {\n    this._size = 0;\n    this._root.next = undefined;\n    this._tail = this._root;\n  }\n\n  delete(index: number): boolean {\n    // Sanitize input\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return false;\n    }\n\n    // Delete value\n    this._cut(index, 1);\n\n    return true;\n  }\n\n  entries(): IterableIterator<[number, T]> {\n    return entries(this._root.next);\n  }\n\n  fill(value: T, start?: number, end?: number): this {\n    const size = this._size;\n\n    // Sanitize inputs\n    start = clamp(addIfBelow(toInteger(start, 0), size), 0, size);\n    end = clamp(addIfBelow(toInteger(end, size), size), start, size);\n    if (start >= end) {\n      return this;\n    }\n\n    // Fill values\n    let node = this._get(start)!;\n    for (let i = start; i < end; ++i) {\n      node.value = value;\n      node = node.next!;\n    }\n\n    // Return list\n    return this;\n  }\n\n  forEach(\n    callbackfn: (value: T, index: number, list: this) => void,\n    thisArg?: unknown\n  ): void {\n    let node = this._root;\n    for (let i = 0; i < this._size; ++i) {\n      node = node.next!;\n      callbackfn.call(thisArg, node.value, i, this);\n    }\n  }\n\n  has(value: T): boolean {\n    return has(this._root.next, value);\n  }\n\n  keys(): IterableIterator<number> {\n    return keys(this._root.next);\n  }\n\n  pop(): T | undefined {\n    // If list is empty\n    if (this._size <= 0) {\n      return undefined;\n    }\n\n    // Remove last value\n    const [head] = this._cut(this._size - 1, 1);\n\n    // Return value\n    return head!.value;\n  }\n\n  push(...values: T[]): number {\n    // Add values\n    this._insert(this._size, values);\n\n    // Return size\n    return this._size;\n  }\n\n  set(index: number, value: T): T | undefined {\n    // Sanitize input\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return undefined;\n    }\n\n    // Set value\n    const node = this._get(index);\n    const prevValue = node.value;\n    node.value = value;\n\n    // Return previous value\n    return prevValue;\n  }\n\n  shift(): T | undefined {\n    // If list is empty\n    if (this._size <= 0) {\n      return undefined;\n    }\n\n    // Remove first value\n    const [head] = this._cut(0, 1);\n\n    // Return value\n    return head!.value;\n  }\n\n  slice(start?: number, end?: number): CircularLinkedList<T> {\n    const size = this._size;\n\n    // Sanitize inputs\n    start = clamp(addIfBelow(toInteger(start, 0), size), 0, size);\n    end = clamp(addIfBelow(toInteger(end, size), size), start, size);\n\n    // Check if empty\n    if (start >= end) {\n      return new CircularLinkedList<T>(0);\n    }\n\n    // Create segment copy\n    const node = this._get(start);\n    const [head, tail, length] = copy(node, end - start);\n\n    // Return copied segment as a list\n    const list = new CircularLinkedList<T>(length);\n    list._root.next = head;\n    list._tail = tail ?? list._root;\n    list._size = length;\n\n    // Return new list\n    return list;\n  }\n\n  splice(\n    start: number,\n    deleteCount?: number,\n    ...items: T[]\n  ): CircularLinkedList<T> {\n    const size = this._size;\n\n    // Sanitize inputs\n    start = clamp(addIfBelow(toInteger(start, 0), size), 0, size);\n    deleteCount = clamp(toInteger(deleteCount, 0), 0, size - start);\n\n    // Remove deleted items, if any\n    let list: CircularLinkedList<T>;\n    if (deleteCount <= 0) {\n      list = new CircularLinkedList<T>(0);\n    } else {\n      const [head, tail] = this._cut(start, deleteCount);\n      list = new CircularLinkedList<T>(deleteCount);\n      list._root.next = head;\n      list._tail = tail!;\n      list._size = deleteCount;\n    }\n\n    // Add new items\n    this._insert(start, items);\n\n    // Return deleted items as a list\n    return list;\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return values(this._root.next);\n  }\n\n  unshift(...values: T[]): number {\n    // Add values\n    this._presert(0, values);\n\n    // Return new size\n    return this._size;\n  }\n\n  values(): IterableIterator<T> {\n    return values(this._root.next);\n  }\n\n  /**\n   * @internal\n   */\n  protected _cut(\n    start: number,\n    count: number\n  ): [Node<T>, Node<T>] | [undefined, undefined] {\n    // Get previous\n    const prev = this._get(start - 1)!;\n\n    // Cut and get removed segment\n    const [head, tail] = cut(prev, count);\n\n    // Update size\n    this._size -= count;\n\n    // Update tail\n    if (start >= this._size) {\n      this._tail = prev;\n    }\n\n    // Return cut segment\n    return [head, tail] as [Node<T>, Node<T>];\n  }\n\n  /**\n   * @internal\n   */\n  protected _get(index: number): Node<T> {\n    return ++index == this._size ? this._tail : get(this._root, index)!;\n  }\n\n  /**\n   * @internal\n   */\n  protected _insert(index: number, values: T[]): void {\n    // If no values\n    const N = values.length;\n    if (N <= 0) {\n      return;\n    }\n\n    // If no capacity\n    if (this._capacity <= 0) {\n      this._overflow(values);\n      return;\n    }\n\n    // Check free space\n    let free = this._capacity - this._size;\n    if (free >= N) {\n      this._safeInsert(index, values);\n      return;\n    }\n\n    // Check if \"infinite\" capacity yet not enough space\n    if (!this._isFinite) {\n      this._safeInsert(index, values.slice(0, free));\n      throw new Error(\"Out of memory\");\n    }\n\n    // Remove from head\n    if (index > 0) {\n      const shifted = Math.min(index, N - free);\n      const [head] = this._cut(0, shifted);\n      this._overflow(head);\n      index -= shifted;\n      free += shifted;\n    }\n\n    // Check free space\n    if (free >= N) {\n      this._safeInsert(index, values);\n      return;\n    }\n\n    // Remove from items and insert remaining\n    const mid = values.length - free;\n    this._overflow(values.slice(0, mid));\n    this._safeInsert(0, values.slice(mid));\n  }\n\n  /**\n   * @internal\n   *\n   * Emit an overflow event containing the items evicted from the collection.\n   *\n   * @param evicted - The items evicted from the collection.\n   */\n  protected _overflow(evicted?: T[] | Node<T>): void {\n    if (evicted == null) {\n      return;\n    }\n    if (Array.isArray(evicted)) {\n      this._emitter.emit(BoundedEvent.Overflow, evicted);\n      return;\n    }\n    for (const array of chunk(values(evicted), ARGS_MAX_LENGTH)) {\n      this._emitter.emit(BoundedEvent.Overflow, array);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  protected _presert(index: number, values: T[]): void {\n    // If no values\n    const N = values.length;\n    if (N <= 0) {\n      return;\n    }\n\n    // If no capacity\n    if (this._capacity <= 0) {\n      this._overflow(values);\n      return;\n    }\n\n    // Check free space\n    let free = this._capacity - this._size;\n    if (free >= N) {\n      this._safeInsert(index, values);\n      return;\n    }\n\n    // Check if \"infinite\" capacity yet not enough space\n    if (!this._isFinite) {\n      this._safeInsert(0, values.slice(values.length - free));\n      throw new Error(\"Out of memory\");\n    }\n\n    // Remove from tail\n    if (index < this._size) {\n      const popped = Math.min(this._size - index, N - free);\n      const [head] = this._cut(this._size - popped, popped);\n      this._overflow(head);\n      free += popped;\n    }\n\n    // Check free space\n    if (free >= N) {\n      this._safeInsert(index, values);\n      return;\n    }\n\n    // Remove from items and insert remaining\n    this._overflow(values.slice(free));\n    this._safeInsert(this._size, values.slice(0, free));\n  }\n\n  /**\n   * @internal\n   */\n  protected _safeInsert(index: number, values: T[]): void {\n    // Sanitize input\n    if (values.length <= 0) {\n      return;\n    }\n\n    // Create segment\n    const [head, tail, size] = toList(values);\n\n    // Insert segment\n    const prev = this._get(index - 1);\n    tail!.next = prev.next;\n    prev.next = head;\n\n    // Update list state\n    this._tail = index < this._size ? this._tail : tail!;\n    this._size += size;\n  }\n}\n","import { SkipLink, SkipCore, SkipNode } from \"../types/skipList\";\nimport { log } from \"./math\";\n\n/**\n * Calculates the maximum level for a skip list based on the given probability\n * factor and expected size.\n *\n * The maximum level determines how many forward pointers each element in the\n * skip list can have, which impacts the overall speed of search, insertion,\n * and deletion operations within the list.\n *\n * @param p - The probability factor used for determining the level. It should\n *          be a number between 0 and 1 (exclusive). The probability factor\n *          affects the sparsity of the skip list; a lower value results in a\n *          shorter, less dense list, while a higher value results in a\n *          taller, denser list.\n * @param expectedSize - The expected number of elements in the skip list. It\n *                     should be a positive integer. The expected size\n *                     influences the optimal maximum level for the list.\n *\n * @returns The calculated optimal maximum level for the skip list. Returns 1\n *          if the probability factor is less than or equal to 0 or the\n *          expected size is less than or equal to 1. Returns Infinity if the\n *          probability factor is 1 or more, indicating an unbounded number of\n *          levels, and likely an error in inputs.\n */\nexport function calcMaxLevel(p: number, expectedSize: number): number {\n  if (p <= 0 || expectedSize <= 1) {\n    return 1;\n  }\n  if (p >= 1) {\n    return Infinity;\n  }\n  return Math.ceil(log(expectedSize, 1 / p));\n}\n\n/**\n * Creates a copy of a segment from a skip list, starting at a specified\n * position and including a specified number of nodes.\n *\n * The copied segment is initialized with its own root node and returns\n * the new list's root, tail nodes at each level, and the total number\n * of nodes copied.\n *\n * @param root - The root {@link SkipNode} of the original skip list from\n *               which the copy operation begins.\n * @param start - The zero-based position in the original list from which to\n *                start copying nodes.\n * @param count - The number of nodes to copy from the start position. If the\n *                count exceeds the number of nodes available, only the\n *                available nodes are copied.\n * @returns A tuple containing:\n *          - The root {@link SkipNode} of the newly created skip list.\n *          - An array of {@link SkipNode}s representing the tail nodes at\n *            each level of the new skip list.\n *          - An integer representing the total number of nodes copied.\n */\nexport function copy<T>(\n  root: SkipNode<T>,\n  start: number,\n  distance: number\n): SkipCore<T> {\n  // Create new root\n  let levels = root.levels.length;\n  const segRoot = gen(undefined as T, levels);\n\n  // Check distance\n  if (distance <= 0) {\n    return { root: segRoot, size: 0, tails: [segRoot] };\n  }\n\n  // Initialize new list\n  const tails = new Array<SkipNode<T>>(levels).fill(segRoot);\n  const indexes = new Array<number>(levels).fill(-1);\n\n  // Get initial node\n  let node: SkipNode<T> | undefined = getClosest(root, start)[0];\n  node = node.levels[0].next;\n\n  // For each node\n  levels = 1;\n  let size = 0;\n  let index = 0;\n  while (node != null && index < distance) {\n    // Update maximum level\n    const L = node.levels.length;\n    levels = levels >= L ? levels : L;\n\n    // Create the duplicate node\n    const dupe = gen(node.value, L);\n\n    // Attach the duplicate at each level\n    for (let lvl = 0; lvl < L; ++lvl) {\n      tails[lvl].levels[lvl] = { next: dupe, span: index - indexes[lvl] };\n      tails[lvl] = dupe;\n      indexes[lvl] = index;\n    }\n\n    // Move to the next node\n    const { next, span } = node.levels[0];\n    index += span;\n    node = next;\n    ++size;\n  }\n\n  // Truncate the output list to the maximum level\n  tails.length = levels;\n  segRoot.levels.length = levels;\n\n  // Update the tail pointers\n  index = indexes[0] + 1;\n  for (let i = 0; i < levels; ++i) {\n    tails[i].levels[i] = { next: undefined, span: index - indexes[i] };\n  }\n\n  // Return the copy\n  return { root: segRoot, size, tails };\n}\n\n/**\n * Iterates through a skip list, yielding each node's index\n * (position in the list) and value as a tuple.\n *\n * Iteration starts from the given node and continues the end of the list.\n * This generator function provides a convenient way to enumerate all nodes in\n * a skip list, similar to how `Array.prototype.entries()` works for arrays.\n *\n * @param node - The node at which to start iterating.\n */\nexport function* entries<T>(node?: SkipNode<T>): Generator<[number, T]> {\n  for (let i = 0; node != null; ++i) {\n    yield [i, node.value];\n    node = node.levels[0].next;\n  }\n}\n\n/**\n * Generates a new skip list node.\n *\n * @param value - The value to be stored in the new skip list node.\n * @param levels - The number of levels the node participates in within the skip list. Defaults to `1`.\n * @param span - The uniform distance to the next node at each level. Defaults to `1`.\n * @param next - The uniform next node at each level. Defaults to `undefined`.\n *\n * @returns A {@link SkipNode} object populated with the specified value and levels array. Each\n *          level in the array is initialized with a `next` pointer and `span` distance set to\n *          the specified values.\n */\nexport function gen<T>(\n  value: T,\n  levels = 1,\n  span = 1,\n  next?: SkipNode<T>\n): SkipNode<T> {\n  const array = new Array<SkipLink<T>>(levels);\n  for (let i = 0; i < levels; ++i) {\n    array[i] = { next, span };\n  }\n  return { value, levels: array };\n}\n\n/**\n * Retrieves the node at the specified distance (span) from the given node.\n *\n * @param node - The node from which to start.\n * @param distance - The distance (span) of the node to retrieve.\n *\n * @returns The node at the specified distance, or `undefined` if not found.\n */\nexport function get<T>(\n  node: SkipNode<T>,\n  distance: number\n): SkipNode<T> | undefined {\n  [node, distance] = getClosest(node, distance);\n  return distance === 0 ? node : undefined;\n}\n\n/**\n * Retrieves the node at the specified distance (span) from the given\n * node, or the closest node within the intended distance.\n *\n * @param node - The node from which to start.\n * @param distance - The distance (span) of the node to retrieve.\n *\n * @returns A tuple of the resulting node and remaining distance.\n * If the intended node was found, the tuple is `[intended node, 0]`.\n * Otherwise, the tuple is `[closest node, remaining distance]`.\n */\nexport function getClosest<T>(\n  node: SkipNode<T>,\n  distance: number\n): [SkipNode<T>, number] {\n  // Check distance\n  if (distance <= 0) {\n    return [node, distance];\n  }\n\n  // Find node\n  let lvl = node.levels.length - 1;\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    const { next, span } = node.levels[lvl];\n    if (span <= distance && next != null) {\n      // Do nothing\n    } else if (--lvl < 0) {\n      return [node, distance];\n    } else {\n      continue;\n    }\n\n    if (span == distance) {\n      return [next, 0];\n    }\n\n    distance -= span;\n    node = next;\n  }\n}\n\n/**\n * Creates a generator that yields each node in a skip list at a specified level.\n *\n * Iteration begins from a given node up to, but not including, an optional end node. Defaults to level `0`.\n *\n * @param node - The starting {@link SkipNode} from which the iteration begins. If not defined, no nodes are yielded.\n * @param end - An optional {@link SkipNode} at which to end the iteration, exclusive. If provided, the iteration\n *              will halt before yielding this node. If `end` is `undefined`, the iteration will continue until\n *              the end of the list.\n * @param level - The level at which to traverse the skip list, starting from 0 for the base level. Defaults to `0`\n *                if not specified. If a negative value is given, or if the start `node` does not reach this level,\n *                no nodes are yielded.\n */\nexport function* getNodes<T>(\n  node?: SkipNode<T>,\n  level = 0\n): Generator<SkipNode<T>> {\n  if (node == null || level < 0 || node.levels.length <= level) {\n    return;\n  }\n  while (node != null) {\n    yield node;\n    node = node.levels[level].next;\n  }\n}\n\n/**\n * Determines whether a skip list contains a node with a specified value.\n *\n * @param node - The node from which to start searching.\n * @param value - The value to search for.\n *\n * @returns `true` if the specified value is found, `false` otherwise.\n */\nexport function has<T>(node: SkipNode<T> | undefined, value: T): boolean {\n  while (node != null) {\n    if (node.value === value) {\n      return true;\n    }\n    node = node.levels[0].next;\n  }\n  return false;\n}\n\n/**\n * Iterates through a skip list, yielding each node's index\n * (position in the list).\n *\n * This generator function provides a convenient way to enumerate all nodes in\n * a skip list, similar to how `Array.prototype.entries()` works for arrays.\n *\n * @param node - The node at which to start iterating.\n */\nexport function* keys<T>(node?: SkipNode<T>): Generator<number> {\n  for (let i = 0; node != null; ++i) {\n    yield i;\n    node = node!.levels[0].next;\n  }\n}\n\n/**\n * Iterates through a skip list, yielding each node's height.\n *\n * Iteration starts from the `node` node and continues until\n * the end of the list.\n *\n * @param node - The node at which to start iterating.\n */\nexport function* levels<T>(node?: SkipNode<T>): Generator<number> {\n  while (node != null) {\n    yield node.levels.length;\n    node = node.levels[0].next;\n  }\n}\n\n/**\n * Constructs a skip list from an array of levels and an array of values.\n *\n * @param levels - An array of integers that determines the number of\n *                 levels of the corresponding value in the `values` array.\n * @param values - An array of values to be stored in the skip list. Each\n *                 value is assigned to a new node in the list.\n *\n * @returns A tuple containing three elements:\n *          - The first element is the root {@link SkipNode} of the skip list. This is a dummy node immediately\n *            prior to the first value.\n *          - The second element is an array of {@link SkipNode}s representing the tail nodes at each level.\n *          - The third element is an integer `X` representing the number of nodes successfully added to the list,\n *            not including the root node.\n *\n * @remarks\n * - If the lengths of the input arrays do not match, the function operates on the smallest length.\n * - A dummy root node is created and updated to have up to the maximum level in the `levels` array.\n */\nexport function toList<T>(levels: number[], values: T[]): SkipCore<T> {\n  // Get # of values (X) and max level (Y)\n  let Y = -Infinity;\n  const X = Math.min(levels.length, values.length);\n  for (let x = 0; x < X; ++x) {\n    if (Y < levels[x]) {\n      Y = levels[x];\n    }\n  }\n\n  // Check inputs\n  if (Y <= 0 || X <= 0) {\n    const root = gen(undefined as T);\n    return { root, size: 0, tails: [root] };\n  }\n\n  // Create root node and tails array\n  const root: SkipNode<T> = gen(undefined as T, Y, X + 1);\n  const tails = new Array(Y).fill(root);\n\n  // For each value\n  for (let x = 0; x < X; ++x) {\n    // Create node\n    const span = X - x;\n    const nextY = levels[x];\n    const next = gen(values[x], nextY, span);\n\n    // Add node to list\n    for (let y = 0; y < nextY; ++y) {\n      const levels = tails[y].levels;\n      levels[y] = { next, span: levels[y].span - span };\n      tails[y] = next;\n    }\n  }\n\n  // Return root, tails and list length\n  return { root, size: X, tails };\n}\n\n/**\n * Reduces the height of the skip list to the specified level.\n *\n * @param root - The root node of the skip list.\n * @param level - The target level.\n */\nexport function truncateLevels<T>(\n  root: SkipNode<T> | undefined,\n  level: number\n): void {\n  // Check inputs\n  if (root == null || root.levels.length <= level) {\n    return;\n  }\n\n  // Truncate nodes\n  let node: SkipNode<T> = root;\n  while (node != null) {\n    const next = node.levels[level].next;\n    node.levels.length = level;\n    node = next!;\n  }\n}\n\n/**\n * Iterates through a skip list, yielding each node's value.\n *\n * This generator function provides a convenient way to enumerate all nodes in\n * a skip list, similar to how `Array.prototype.entries()` works for arrays.\n *\n * @param node - The node at which to start iterating.\n */\nexport function* values<T>(node?: SkipNode<T>): Generator<T> {\n  while (node != null) {\n    yield node.value;\n    node = node.levels[0].next;\n  }\n}\n","import { SkipCore, SkipNode, SkipStack } from \"../types/skipList\";\n\nimport { gen as genNode } from \"./skipNode\";\n\n/**\n * Creates a copy of the provided skip stack.\n *\n * @param stack - The {@link SkipStack} to be cloned.\n * @returns The copy of the input {@link SkipStack}.\n */\nexport function clone<T>(stack: SkipStack<T>): SkipStack<T> {\n  const N = stack.length;\n  const dupe: SkipStack<T> = new Array(N);\n  for (let i = 0; i < N; ++i) {\n    const { index, node } = stack[i];\n    dupe[i] = { index, node };\n  }\n  return dupe;\n}\n\n/**\n * Cuts a segment from a given skip list.\n *\n * The cut starts at the specified position and spans the given distance. The\n * cut segment is returned as a new skip list.\n *\n * @param core - The {@link SkipCore} representing the skip list from which to cut the segment.\n *               This skip list will be modified to reflect the removal.\n * @param start - The zero-based index indicating the start position of the cut, inclusive.\n * @param distance - The number of elements to be included in the cut segment.\n *\n * @returns A new {@link SkipCore} representing the skip list segment that has been cut.\n *\n * @remarks\n * - The height (levels) of the original list may be reduced if segment removal results in empty levels.\n * - The cut segment's height (levels) may be less than the original list. It will only contain\n *   levels that include nodes within the segment.\n */\nexport function cut<T>(\n  core: SkipCore<T>,\n  start: number,\n  distance: number\n): SkipCore<T> {\n  // Initialize output list\n  const segRoot = genNode(undefined as T);\n  const seg: SkipCore<T> = { root: segRoot, size: 0, tails: [segRoot] };\n\n  // Check inputs\n  if (distance <= 0) {\n    return seg;\n  }\n\n  // Initialize constants\n  const prevStack = getClosest(gen(core.root, -1), start);\n  const tailStack = getClosest(clone(prevStack), distance);\n  const end = tailStack[0].index + tailStack[0].node.levels[0].span;\n\n  // Update inputs\n  let levels = core.root.levels.length;\n  start = prevStack[0].index + prevStack[0].node.levels[0].span;\n  distance = end - start;\n\n  // Detach segment from participating levels\n  let lvl: number;\n  for (lvl = 0; lvl < levels; ++lvl) {\n    const prev = prevStack[lvl];\n    const tail = tailStack[lvl];\n\n    // Check if segment exists at this level\n    if (prev.index >= tail.index) {\n      break;\n    }\n\n    // Connect segment start to new root\n    let edge = prev.node.levels[lvl];\n    let span = prev.index + edge.span - start;\n    segRoot.levels[lvl] = { next: edge.next, span };\n\n    // Remove segment from list\n    edge = tail.node.levels[lvl];\n    span = tail.index - prev.index + (edge.span - distance);\n    prev.node.levels[lvl] = { next: edge.next, span };\n\n    // Detach segment end\n    tail.node.levels[lvl] = { next: undefined, span: end - tail.index };\n    seg.tails[lvl] = tail.node;\n  }\n\n  if (lvl < levels) {\n    // Remove segment from higher levels\n    while (lvl < levels) {\n      const prev = prevStack[lvl];\n      const { next, span } = prev.node.levels[lvl];\n      prev.node.levels[lvl] = { next: next, span: span - distance };\n      ++lvl;\n    }\n  } else {\n    // Remove empty levels from the source list\n    const links = core.root.levels;\n    while (lvl > 1 && links[lvl - 1].next == null) {\n      --lvl;\n    }\n    levels = lvl;\n    links.length = levels;\n    core.tails.length = levels;\n  }\n\n  // Update tails from source list\n  if (end >= core.size) {\n    for (lvl = 0; lvl < levels; ++lvl) {\n      core.tails[lvl] = prevStack[lvl].node;\n    }\n  }\n\n  // Update source list's size\n  core.size -= distance;\n\n  // Return removed segment\n  seg.size = distance;\n  return seg;\n}\n\n/**\n * Generates a skip stack filled with pointers to the given node and index.\n *\n * @param node - The {@link SkipNode} to which all pointers in the generated stack will point.\n * @param index - The index in the skip list at which the node is located. Defaults to `0`.\n *\n * @returns A {@link SkipStack} array, where each level points to `node` with index `index`.\n *          The length of this array is equal to the number of levels in the input node.\n */\nexport function gen<T>(node: SkipNode<T>, index = 0): SkipStack<T> {\n  const N = node.levels.length;\n  const stack: SkipStack<T> = new Array(N);\n  for (let i = 0; i < N; ++i) {\n    stack[i] = { index, node };\n  }\n  return stack;\n}\n\n/**\n * Moves the input stack to point to the nodes closest to a specified distance.\n *\n * @param stack - The {@link SkipStack} representing the current pointers at various levels of the skip list.\n * @param distance - The forward distance to travel. The starting point is based on `stack`'s lowest level.\n *\n * @returns A {@link SkipStack} with pointers to the nodes closest to the specified distance, based\n *          on the initial positions indicated by the input stack.\n *\n * @remarks\n * - If the specified distance is 0 or negative, the stack is not modified, as no traversal is needed.\n * - If the target distance exceeds the bounds of the skip list, the result will point to the furthest possible\n *   nodes within the list.\n */\nexport function getClosest<T>(\n  stack: SkipStack<T>,\n  distance: number\n): SkipStack<T> {\n  // Check inputs\n  if (distance <= 0 || stack.length <= 0) {\n    return stack;\n  }\n\n  let lvl = stack.length - 1;\n  let ptr = stack[lvl];\n  const target = stack[0].index + distance;\n\n  // Find node\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    const { next, span } = ptr.node.levels[lvl];\n    const nextIndex = ptr.index + span;\n\n    if (nextIndex <= target && next != null) {\n      // Do nothing\n    } else if (--lvl < 0) {\n      break;\n    } else {\n      ptr = stack[lvl];\n      continue;\n    }\n\n    ptr = { index: nextIndex, node: next };\n    stack[lvl] = ptr;\n\n    if (nextIndex == target) {\n      break;\n    }\n  }\n\n  for (let i = 0; i < lvl; ++i) {\n    stack[i] = { index: ptr.index, node: ptr.node };\n  }\n\n  return stack;\n}\n\n/**\n * Inserts a skip list segment (`src`) into another skip list (`dest`) at a specified index.\n *\n * @param dest - The {@link SkipCore} representing the destination skip list into which the segment is to be\n *               inserted. This skip list will be modified to include the nodes from the source segment.\n * @param index - The zero-based position within the destination list at which the source segment is to be inserted.\n * @param src - The {@link SkipCore} representing the source skip list segment to be inserted into the destination\n *              list. This skip list's tail nodes will be modified to contain links within the destination list.\n *\n * @remarks\n * - The function may increase the height (number of levels) of the destination list if the source segment has\n *   more levels than the destination. This ensures that the merged list can accommodate the full structure of\n *   the segment being inserted.\n */\nexport function insert<T>(\n  dest: SkipCore<T>,\n  index: number,\n  src: SkipCore<T>\n): void {\n  // Check source values\n  if (src.size <= 0) {\n    return;\n  }\n\n  // Increase destination's height if necessary\n  const minY = src.tails.length;\n  for (let y = dest.tails.length; y < minY; ++y) {\n    dest.root.levels[y] = { next: undefined, span: dest.size + 1 };\n    dest.tails[y] = dest.root;\n  }\n\n  // Attach segment at given index\n  const prevs = getClosest(gen(dest.root, -1), index);\n  for (let y = 0; y < minY; ++y) {\n    const prev = prevs[y].node;\n    const prevI = prevs[y].index;\n\n    const prevEdge = prev.levels[y];\n    const tail = src.tails[y];\n    const tailEdge = tail.levels[y];\n    const nextI = prevI + prevEdge.span;\n    const nextD = nextI - index;\n    const tailD = tailEdge.span;\n    tail.levels[y] = { next: prevEdge.next, span: nextD + tailD };\n\n    const rootEdge = src.root.levels[y];\n    const headD = rootEdge.span - 1;\n    const prevD = index - prevI;\n    prev.levels[y] = { next: rootEdge.next, span: prevD + headD };\n  }\n\n  // Update higher levels\n  const maxY = dest.tails.length;\n  for (let y = minY; y < maxY; ++y) {\n    const levels = prevs[y].node.levels;\n    const { next, span } = levels[y];\n    levels[y] = { next, span: span + src.size };\n  }\n\n  // Update tails\n  if (index === dest.size) {\n    for (let y = 0; y < minY; ++y) {\n      dest.tails[y] = src.tails[y];\n    }\n  }\n\n  // Update size\n  dest.size += src.size;\n}\n","import { BoundedEvent } from \"../../types/boundedEvent\";\nimport { Bounded, BoundedConfig } from \"../../types/bounded\";\nimport { ARGS_MAX_LENGTH, LINKED_MAX_LENGTH } from \"../../utils/constants\";\nimport {\n  SkipList,\n  SkipListConfig,\n  SkipCore,\n  SkipNode,\n} from \"../../types/skipList\";\n\nimport {\n  isArrayLength,\n  isInfinity,\n  isIterable,\n  isLinkedLength,\n  isNumber,\n} from \"../../utils/is\";\nimport { chunk } from \"../../utils/iterable\";\nimport {\n  addIfBelow,\n  clamp,\n  isInRange,\n  randomRun,\n  toInteger,\n} from \"../../utils/math\";\nimport * as NodeUtils from \"../../utils/skipNode\";\nimport * as StackUtils from \"../../utils/skipStack\";\n\nimport { CircularBase } from \"../circularBase\";\n\nexport interface CircularSkipListConfig extends BoundedConfig, SkipListConfig {}\n\nexport class CircularSkipList<T>\n  extends CircularBase<T>\n  implements Bounded<T>, SkipList<T>\n{\n  /**\n   * @internal\n   * The maximum number of elements that can be stored in the collection.\n   */\n  protected _capacity: number;\n\n  /**\n   * @internal\n   * Whether capacity is finite (true) or infinite (false).\n   */\n  protected _isFinite: boolean;\n\n  /**\n   * @internal\n   * The maximum number of levels in the skip list.\n   */\n  protected _maxLevel: number;\n\n  /**\n   * @internal\n   * The probability factor used to randomly determine the levels\n   * of new nodes. Should be a value between 0 and 1, where a lower\n   * value results in fewer levels on average.\n   */\n  protected _p: number;\n\n  /**\n   * @internal\n   * The root of the skip list\n   */\n  protected _root: SkipNode<T>;\n\n  /**\n   * @internal\n   * The current size of the list (0 \\<= size \\<= capacity)\n   */\n  protected _size: number;\n\n  /**\n   * @internal\n   * The last nodes in the skip list at each level.\n   */\n  protected _tails: SkipNode<T>[];\n\n  constructor();\n  constructor(capacity?: number | null);\n  constructor(config: CircularSkipListConfig);\n  constructor(items: Iterable<T>);\n  constructor(config?: CircularSkipListConfig | Iterable<T> | null | number) {\n    super();\n\n    // Initialize class variables\n    this._capacity = LINKED_MAX_LENGTH;\n    this._isFinite = false;\n    this._p = 0.5;\n    this._maxLevel = NodeUtils.calcMaxLevel(this._p, LINKED_MAX_LENGTH);\n    this._root = NodeUtils.gen(undefined as T);\n    this._size = 0;\n    this._tails = [this._root];\n\n    // Case 1: input is null or undefined\n    if (config == null) {\n      return;\n    }\n\n    // Case 2: input is capacity\n    if (isNumber(config)) {\n      this.capacity = config;\n      return;\n    }\n\n    // Case 3: input is config\n    if (!isIterable(config)) {\n      this.capacity = config.capacity ?? this._capacity;\n      this.p = config.p ?? this._p;\n      const size = config.expectedSize ?? this._capacity;\n      this.maxLevel = config.maxLevel ?? NodeUtils.calcMaxLevel(this._p, size);\n      return;\n    }\n\n    // Case 4: input is an iterable\n    for (const vals of chunk(config, ARGS_MAX_LENGTH)) {\n      this._insert(this._size, vals);\n    }\n    this._capacity = this._size;\n    this._isFinite = true;\n  }\n\n  get capacity(): number {\n    return this._isFinite ? this._capacity : Infinity;\n  }\n\n  get levels(): number {\n    return this._root.levels.length;\n  }\n\n  get maxLevel(): number {\n    return this._maxLevel;\n  }\n\n  get p(): number {\n    return this._p;\n  }\n\n  get size(): number {\n    return this._size;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return CircularSkipList.name;\n  }\n\n  set capacity(capacity: number) {\n    // Convert input to a number\n    capacity = +capacity;\n\n    // Check capacity\n    if (isInfinity(capacity)) {\n      // If capacity is Infinity\n      capacity = LINKED_MAX_LENGTH;\n      this._isFinite = false;\n    } else if (isLinkedLength(capacity)) {\n      // If capacity is valid\n      this._isFinite = true;\n    } else {\n      // If capacity is invalid\n      throw new RangeError(\"Invalid capacity\");\n    }\n\n    // Update capacity\n    this._capacity = capacity;\n\n    // If current size fits within new capacity\n    if (this._size <= capacity) {\n      return;\n    }\n\n    // Shrink list and emit discarded items\n    const { root } = this._cut(0, this._size - capacity);\n    this._overflow(root.levels[0].next);\n  }\n\n  set maxLevel(maxLevel: number) {\n    // Convert input to number\n    maxLevel = +maxLevel;\n\n    // If input is invalid\n    if (!isArrayLength(maxLevel) || maxLevel <= 0) {\n      throw new RangeError(\"Invalid maxLevel\");\n    }\n\n    // Update\n    this._maxLevel = maxLevel;\n\n    // Remove excess levels\n    if (maxLevel < this.levels) {\n      NodeUtils.truncateLevels(this._root, maxLevel);\n    }\n  }\n\n  set p(p: number) {\n    // Convert input to number\n    p = +p;\n\n    // If input is invalid\n    if (isNaN(p) || p < 0 || p > 1) {\n      throw new RangeError(\"Invalid p\");\n    }\n\n    // Update\n    this._p = p;\n  }\n\n  at(index: number): T | undefined {\n    // Sanitize input\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return undefined;\n    }\n\n    // Return value\n    return NodeUtils.get(this._root, index + 1)!.value;\n  }\n\n  clear(): void {\n    this._size = 0;\n    this._tails = [this._root];\n    this._root.levels.length = 1;\n    this._root.levels[0] = { next: undefined, span: 1 };\n  }\n\n  delete(index: number): boolean {\n    // Sanitize input\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return false;\n    }\n\n    // Delete value\n    this._cut(index, 1);\n\n    // Return success\n    return true;\n  }\n\n  entries(): IterableIterator<[number, T]> {\n    return NodeUtils.entries(this._root.levels[0].next);\n  }\n\n  fill(value: T, start?: number, end?: number): this {\n    const size = this._size;\n\n    // Sanitize inputs\n    start = clamp(addIfBelow(toInteger(start, 0), size), 0, size);\n    end = clamp(addIfBelow(toInteger(end, size), size), start, size);\n    if (start >= end) {\n      return this;\n    }\n\n    // Fill values\n    let node = NodeUtils.get(this._root, start + 1)!;\n    for (let i = start; i < end; ++i) {\n      node.value = value;\n      node = node.levels[0].next!;\n    }\n\n    // Return list\n    return this;\n  }\n\n  forEach(\n    callbackfn: (value: T, index: number, list: this) => void,\n    thisArg?: unknown\n  ): void {\n    let node = this._root;\n    for (let i = 0; i < this._size; ++i) {\n      node = node.levels[0].next!;\n      callbackfn.call(thisArg, node.value, i, this);\n    }\n  }\n\n  has(value: T): boolean {\n    return NodeUtils.has(this._root.levels[0].next, value);\n  }\n\n  keys(): IterableIterator<number> {\n    return NodeUtils.keys(this._root.levels[0].next);\n  }\n\n  pop(): T | undefined {\n    // If list is empty\n    if (this._size <= 0) {\n      return undefined;\n    }\n\n    // Remove last value\n    const { root } = this._cut(this._size - 1, 1);\n\n    // Return value\n    return root.levels[0].next!.value;\n  }\n\n  push(...values: T[]): number {\n    // Add values\n    this._insert(this._size, values);\n\n    // Return new size\n    return this._size;\n  }\n\n  set(index: number, value: T): T | undefined {\n    // Sanitize input\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return undefined;\n    }\n\n    // Set value\n    const node = NodeUtils.get(this._root, index + 1)!;\n    const prevValue = node.value;\n    node.value = value;\n\n    // Return previous value\n    return prevValue;\n  }\n\n  shift(): T | undefined {\n    // If list is empty\n    if (this._size <= 0) {\n      return undefined;\n    }\n\n    // Remove first value\n    const { root } = this._cut(0, 1);\n\n    // Return value\n    return root.levels[0].next!.value;\n  }\n\n  slice(start?: number, end?: number): CircularSkipList<T> {\n    const size = this._size;\n\n    // Sanitize inputs\n    start = clamp(addIfBelow(toInteger(start, 0), size), 0, size);\n    end = clamp(addIfBelow(toInteger(end, size), size), start, size);\n\n    // Create config\n    const config: CircularSkipListConfig = {\n      capacity: 0,\n      p: this._p,\n      maxLevel: this._maxLevel,\n    };\n\n    // Check if empty\n    if (start >= end) {\n      return new CircularSkipList<T>(config);\n    }\n\n    // Create segment copy\n    const core = NodeUtils.copy(this._root, start, end - start);\n\n    // Return copied segment as a list\n    config.capacity = core.size;\n    const list = new CircularSkipList<T>(config);\n    list._root = core.root;\n    list._tails = core.tails;\n    list._size = core.size;\n\n    return list;\n  }\n\n  splice(\n    start: number,\n    deleteCount?: number,\n    ...items: T[]\n  ): CircularSkipList<T> {\n    const size = this._size;\n\n    // Sanitize inputs\n    start = clamp(addIfBelow(toInteger(start, 0), size), 0, size);\n    deleteCount = clamp(toInteger(deleteCount, 0), 0, size - start);\n\n    // Remove deleted items\n    const core = this._cut(start, deleteCount);\n\n    // Add new items\n    this._insert(start, items);\n\n    // Return deleted items as a list\n    const list = new CircularSkipList<T>({\n      capacity: deleteCount,\n      p: this._p,\n      maxLevel: this._maxLevel,\n    });\n    list._root = core.root;\n    list._tails = core.tails;\n    list._size = core.size;\n\n    return list;\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.values();\n  }\n\n  unshift(...values: T[]): number {\n    // Add values\n    this._presert(0, values);\n\n    // Return new size\n    return this._size;\n  }\n\n  values(): IterableIterator<T> {\n    return NodeUtils.values(this._root.levels[0].next);\n  }\n\n  /**\n   * @internal\n   */\n  protected _cut(start: number, count: number): SkipCore<T> {\n    // Create list core\n    const core = { root: this._root, size: this._size, tails: this._tails };\n\n    // Cut and get removed segment\n    const seg = StackUtils.cut(core, start, count);\n\n    // Update list state\n    this._size = core.size;\n    this._tails = core.tails;\n\n    // Return cut segment\n    return seg;\n  }\n\n  /**\n   * @internal\n   */\n  protected _insert(index: number, values: T[]): void {\n    // If no values\n    const N = values.length;\n    if (N <= 0) {\n      return;\n    }\n\n    // If no capacity\n    if (this._capacity <= 0) {\n      this._overflow(values);\n      return;\n    }\n\n    // Check free space\n    let free = this._capacity - this._size;\n    if (free >= N) {\n      this._safeInsert(index, values);\n      return;\n    }\n\n    // Check if \"infinite\" capacity yet not enough space\n    if (!this._isFinite) {\n      this._safeInsert(index, values.slice(0, free));\n      throw new Error(\"Out of memory\");\n    }\n\n    // Remove from head\n    if (index > 0) {\n      const shifted = Math.min(index, N - free);\n      const { root } = this._cut(0, shifted);\n      this._overflow(root.levels[0].next);\n      index -= shifted;\n      free += shifted;\n    }\n\n    // Check free space\n    if (free >= N) {\n      this._safeInsert(index, values);\n      return;\n    }\n\n    // Remove from items and insert remaining\n    const mid = values.length - free;\n    this._overflow(values.slice(0, mid));\n    this._safeInsert(0, values.slice(mid));\n  }\n\n  /**\n   * @internal\n   *\n   * Emit an overflow event containing the items evicted from the collection.\n   *\n   * @param evicted - The items evicted from the collection.\n   */\n  protected _overflow(evicted?: T[] | SkipNode<T>): void {\n    if (evicted == null) {\n      return;\n    }\n    if (Array.isArray(evicted)) {\n      this._emitter.emit(BoundedEvent.Overflow, evicted);\n      return;\n    }\n    for (const array of chunk(NodeUtils.values(evicted), ARGS_MAX_LENGTH)) {\n      this._emitter.emit(BoundedEvent.Overflow, array);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  protected _presert(index: number, values: T[]): void {\n    // If no values\n    const N = values.length;\n    if (N <= 0) {\n      return;\n    }\n\n    // If no capacity\n    if (this._capacity <= 0) {\n      this._overflow(values);\n      return;\n    }\n\n    // Check free space\n    let free = this._capacity - this._size;\n    if (free >= N) {\n      this._safeInsert(index, values);\n      return;\n    }\n\n    // Check if \"infinite\" capacity yet not enough space\n    if (!this._isFinite) {\n      this._safeInsert(0, values.slice(values.length - free));\n      throw new Error(\"Out of memory\");\n    }\n\n    // Remove from tail\n    if (index < this._size) {\n      const popped = Math.min(this._size - index, N - free);\n      const { root } = this._cut(this._size - popped, popped);\n      this._overflow(root.levels[0].next);\n      free += popped;\n    }\n\n    // Check free space\n    if (free >= N) {\n      this._safeInsert(index, values);\n      return;\n    }\n\n    // Remove from items and insert remaining\n    this._overflow(values.slice(free));\n    this._safeInsert(this._size, values.slice(0, free));\n  }\n\n  /**\n   * @internal\n   */\n  protected _safeInsert(index: number, values: T[]): void {\n    // Create levels\n    const N = values.length;\n    const levels = new Array<number>(N);\n    for (let i = 0; i < N; ++i) {\n      levels[i] = randomRun(this._p, 1, this._maxLevel);\n    }\n\n    // Create segment\n    const seg = NodeUtils.toList(levels, values);\n\n    // Insert segment\n    const core = { root: this._root, size: this._size, tails: this._tails };\n    StackUtils.insert(core, index, seg);\n\n    // Update list state\n    this._size = core.size;\n    this._tails = core.tails;\n  }\n}\n","import { Bounded } from \"../../types/bounded\";\nimport { BoundedEvent } from \"../../types/boundedEvent\";\nimport { Collection } from \"../../types/collection\";\nimport { isInfinity, isNumber, isSafeCount } from \"../../utils/is\";\n\nimport { CircularBase } from \"../circularBase\";\n\n/**\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularMap<K, V>\n  extends CircularBase<[K, V]>\n  implements Bounded<[K, V]>, Map<K, V>, Collection<K, V>\n{\n  /**\n   * @internal\n   * The maximum number of elements that can be stored in the collection.\n   */\n  protected _capacity: number;\n\n  /**\n   * @internal\n   * The internal map.\n   */\n  protected _map: Map<K, V>;\n\n  /**\n   * Creates a new map with `capacity` defaulted to `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new map with the given capacity.\n   *\n   * @param capacity - the map's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new map. Initial capacity is the number of unique items given.\n   *\n   * @param items - the values to store in the map.\n   */\n  constructor(items: Iterable<[K, V]>);\n  constructor(capacity?: number | null | Iterable<[K, V]>) {\n    super();\n\n    // Initialize class variables\n    this._capacity = Infinity;\n    this._map = new Map();\n\n    // Case 1: capacity is null, undefined or Infinity\n    capacity = capacity ?? Infinity;\n    if (isInfinity(capacity)) {\n      return;\n    }\n\n    // Case 2: capacity is zero or a safe positive integer\n    if (isNumber(capacity)) {\n      if (!isSafeCount(capacity)) {\n        throw new RangeError(\"Invalid capacity\");\n      }\n      this._capacity = capacity;\n      return;\n    }\n\n    // Case 3: capacity is iterable\n    this._map = new Map(capacity as Iterable<[K, V]>);\n    this._capacity = this._map.size;\n  }\n\n  /**\n   * @returns the maximum number of elements that can be stored.\n   */\n  get capacity(): number {\n    return this._capacity;\n  }\n\n  /**\n   * @returns the number of values in the map.\n   */\n  get size(): number {\n    return this._map.size;\n  }\n\n  /**\n   * Return the type of the object.\n   */\n  get [Symbol.toStringTag](): string {\n    return CircularMap.name;\n  }\n\n  /**\n   * The maximum number of elements that can be stored in the map.\n   */\n  set capacity(capacity: number) {\n    // Convert input to a number\n    capacity = +capacity;\n\n    // Check if input is valid\n    if (!isInfinity(capacity) && !isSafeCount(capacity)) {\n      throw new RangeError(\"Invalid capacity\");\n    }\n\n    // Check if capacity is changing\n    if (capacity === this._capacity) {\n      return;\n    }\n\n    // Update capacity\n    this._capacity = capacity;\n\n    // Check if size is within capacity\n    if (this.size <= capacity) {\n      return;\n    }\n\n    // Check if new capacity is zero\n    if (capacity === 0) {\n      const evicted = Array.from(this._map);\n      this.clear();\n      this._emitter.emit(BoundedEvent.Overflow, evicted);\n      return;\n    }\n\n    // Shrink down map.\n    const evicted: [K, V][] = [];\n    const iter = this._map.entries();\n    for (let n = this.size - capacity; n > 0; --n) {\n      const entry = iter.next().value;\n      this._map.delete(entry[0]);\n      evicted.push(entry);\n    }\n    this._emitter.emit(BoundedEvent.Overflow, evicted);\n  }\n\n  /**\n   * Removes all elements from the map.\n   */\n  clear(): void {\n    this._map.clear();\n  }\n\n  /**\n   * Deletes a specified value from the map.\n   *\n   * @returns `true` if the value existed in the map and has been removed, or `false` otherwise.\n   */\n  delete(key: K): boolean {\n    return this._map.delete(key);\n  }\n\n  /**\n   * Iterate through the map's entries.\n   *\n   * **Note:** Modifying the map during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of [key, value] pairs for every entry.\n   */\n  entries(): IterableIterator<[K, V]> {\n    return this._map.entries();\n  }\n\n  /**\n   * Performs the specified action for each value in the map.\n   *\n   * **Note:** Modifying the map during iteration may cause unexpected behavior.\n   *\n   * @param callbackfn - A function that accepts up to three arguments. It is called once per value.\n   * @param thisArg - An object to which the `this` keyword refers to in the `callbackfn` function. Defaults to `undefined`.\n   */\n  forEach(\n    callbackfn: (value: V, key: K, map: this) => void,\n    thisArg?: unknown\n  ): void {\n    for (const [key, value] of this._map.entries()) {\n      callbackfn.call(thisArg, value, key, this);\n    }\n  }\n\n  /**\n   * Returns the associated value of the given key from the map.\n   *\n   * If the associated value is an object, then you will get a reference to that object; any change made to the object will effectively modify it inside the map.\n   *\n   * @returns the value associated with the specified key, or `undefined` if no value is associated.\n   */\n  get(key: K): V | undefined {\n    return this._map.get(key);\n  }\n\n  /**\n   * Determines whether a given value is in the map.\n   *\n   * @param key - The key to search for.\n   *\n   * @returns `true` if the value was found, `false` otherwise.\n   */\n  has(key: K): boolean {\n    return this._map.has(key);\n  }\n\n  /**\n   * Iterate through the map's keys.\n   *\n   * **Note:** Modifying the map during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of the map's keys.\n   */\n  keys(): IterableIterator<K> {\n    return this._map.keys();\n  }\n\n  /**\n   * Sets the specified key-value pair in the map.\n   *\n   * @param key - the key to add\n   * @param value - the key's value.\n   */\n  set(key: K, value: V): this {\n    // Base case: map has no capacity.\n    if (this.capacity < 1) {\n      this._emitter.emit(BoundedEvent.Overflow, [[key, value]]);\n      return this;\n    }\n\n    // Evict excess items\n    const evicted: [K, V][] = [];\n    if (!this._map.delete(key) && this.size >= this.capacity) {\n      const entry = this._map.entries().next().value;\n      this._map.delete(entry[0]);\n      evicted.push(entry);\n    }\n\n    // Add value\n    this._map.set(key, value);\n\n    // Emit evicted\n    if (evicted.length > 0) {\n      this._emitter.emit(BoundedEvent.Overflow, evicted);\n    }\n\n    return this;\n  }\n\n  /**\n   * Iterate through the map's values.\n   *\n   * **Note:** Modifying the map during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of values.\n   */\n  [Symbol.iterator](): IterableIterator<[K, V]> {\n    return this._map.entries();\n  }\n\n  /**\n   * Iterate through the map's values.\n   *\n   * **Note:** Modifying the map during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of the map's values.\n   */\n  values(): IterableIterator<V> {\n    return this._map.values();\n  }\n}\n","import { Queue } from \"../../types/queue\";\nimport { Bounded } from \"../../types/bounded\";\n\nimport { CircularLinkedList } from \"../list/circularLinkedList\";\nimport { BoundedEvent } from \"../..\";\n\n/**\n * A circular queue is similar to a traditional queue, but uses a fixed-size,\n * circular buffer. When the queue reaches its maximum capacity and a new\n * element is added, the oldest is discarded, thus maintaining its size.\n *\n * This structure efficiently utilizes memory for applications where only the\n * most recent additions are of interest and older data can be discarded.\n *\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularLinkedQueue<T> implements Bounded<T>, Queue<T> {\n  /**\n   * @internal\n   */\n  protected _list: CircularLinkedList<T>;\n\n  /**\n   * Creates a new stack with `capacity` defaulted to `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new stack with the given capacity.\n   *\n   * @param capacity - the stack's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new stack. Initial capacity is the number of items given.\n   *\n   * @param items - the values to store in the stack.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    this._list = new CircularLinkedList(capacity as number);\n  }\n\n  get capacity(): number {\n    return this._list.capacity;\n  }\n\n  get size(): number {\n    return this._list.size;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return CircularLinkedQueue.name;\n  }\n\n  set capacity(capacity: number) {\n    this._list.capacity = capacity;\n  }\n\n  clear(): void {\n    this._list.clear();\n  }\n\n  entries(): IterableIterator<[number, T]> {\n    return this._list.entries();\n  }\n\n  first(): T | undefined {\n    return this._list.at(0);\n  }\n\n  forEach(\n    callbackfn: (value: T, index: number, collection: this) => void,\n    thisArg?: unknown\n  ): void {\n    this._list.forEach((v, i) => callbackfn.call(thisArg, v, i, this), thisArg);\n  }\n\n  front(): T | undefined {\n    return this._list.at(0);\n  }\n\n  has(value: T): boolean {\n    return this._list.has(value);\n  }\n\n  keys(): IterableIterator<number> {\n    return this._list.keys();\n  }\n\n  push(...elems: T[]): number {\n    return this._list.push(...elems);\n  }\n\n  shift(): T | undefined {\n    return this._list.shift();\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.values();\n  }\n\n  values(): IterableIterator<T> {\n    return this._list.values();\n  }\n\n  addListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.addListener(event, listener);\n    return this;\n  }\n\n  on(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.on(event, listener);\n    return this;\n  }\n\n  prependListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.prependListener(event, listener);\n    return this;\n  }\n\n  removeListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.removeListener(event, listener);\n    return this;\n  }\n}\n","import { BoundedEvent } from \"../../types/boundedEvent\";\nimport { Queue } from \"../../types/queue\";\nimport { Bounded } from \"../../types/bounded\";\nimport { CircularArrayList } from \"../list/circularArrayList\";\n\n/**\n * A circular queue is similar to a traditional queue, but uses a fixed-size,\n * circular buffer. When the queue reaches its maximum capacity and a new\n * element is added, the oldest is discarded, thus maintaining its size.\n *\n * This structure efficiently utilizes memory for applications where only the\n * most recent additions are of interest and older data can be discarded.\n *\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularQueue<T> implements Bounded<T>, Queue<T> {\n  /**\n   * @internal\n   */\n  protected list: CircularArrayList<T>;\n\n  /**\n   * Creates a new queue. Default `capacity` is `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new queue with the given capacity.\n   *\n   * @param capacity - the queue's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new queue from the given items. `capacity` will equal the number of items.\n   *\n   * @param items - the initial values in the queue.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    this.list = new CircularArrayList(capacity as number);\n  }\n\n  get capacity(): number {\n    return this.list.capacity;\n  }\n\n  get size(): number {\n    return this.list.size;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return CircularQueue.name;\n  }\n\n  set capacity(capacity: number) {\n    this.list.capacity = capacity;\n  }\n\n  clear(): void {\n    this.list.clear();\n  }\n\n  entries(): IterableIterator<[number, T]> {\n    return this.list.entries();\n  }\n\n  first(): T | undefined {\n    return this.list.first();\n  }\n\n  forEach(\n    callbackfn: (value: T, index: number, collection: this) => void,\n    thisArg?: unknown\n  ): void {\n    return this.list.forEach((v, i) => callbackfn.call(thisArg, v, i, this));\n  }\n\n  front(): T | undefined {\n    return this.list.first();\n  }\n\n  has(value: T): boolean {\n    return this.list.has(value);\n  }\n\n  keys(): IterableIterator<number> {\n    return this.list.keys();\n  }\n\n  push(...elems: T[]): number {\n    return this.list.push(...elems);\n  }\n\n  shift(): T | undefined {\n    return this.list.shift();\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.list.values();\n  }\n\n  values(): IterableIterator<T> {\n    return this.list.values();\n  }\n\n  addListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.addListener(event, listener);\n    return this;\n  }\n\n  on(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.on(event, listener);\n    return this;\n  }\n\n  prependListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.prependListener(event, listener);\n    return this;\n  }\n\n  removeListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.removeListener(event, listener);\n    return this;\n  }\n}\n","import { Bounded } from \"../../types/bounded\";\nimport { BoundedEvent } from \"../../types/boundedEvent\";\nimport { Collection } from \"../../types/collection\";\nimport { isInfinity, isNumber, isSafeCount } from \"../../utils/is\";\n\nimport { CircularBase } from \"../circularBase\";\n\n/**\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularSet<T>\n  extends CircularBase<T>\n  implements Bounded<T>, Set<T>, Collection<T, T>\n{\n  /**\n   * @internal\n   * The maximum number of elements that can be stored in the collection.\n   */\n  protected _capacity: number;\n\n  /**\n   * @internal\n   * The internal set.\n   */\n  protected set: Set<T>;\n\n  /**\n   * Creates a new set with `capacity` defaulted to `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new set with the given capacity.\n   *\n   * @param capacity - the set's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new set. Initial capacity is the number of unique items given.\n   *\n   * @param items - the values to store in the set.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    super();\n\n    // Initialize class variables\n    this._capacity = Infinity;\n    this.set = new Set();\n\n    // Case 1: capacity is null, undefined or Infinity\n    capacity = capacity ?? Infinity;\n    if (isInfinity(capacity)) {\n      return;\n    }\n\n    // Case 2: capacity is zero or a safe positive integer\n    if (isNumber(capacity)) {\n      if (!isSafeCount(capacity)) {\n        throw new RangeError(\"Invalid capacity\");\n      }\n      this._capacity = capacity;\n      return;\n    }\n\n    // Case 3: capacity is iterable\n    this.set = new Set(capacity as Iterable<T>);\n    this._capacity = this.set.size;\n  }\n\n  /**\n   * @returns the maximum number of elements that can be stored.\n   */\n  get capacity(): number {\n    return this._capacity;\n  }\n\n  /**\n   * @returns the number of values in the set.\n   */\n  get size(): number {\n    return this.set.size;\n  }\n\n  /**\n   * Return the type of the object.\n   */\n  get [Symbol.toStringTag](): string {\n    return CircularSet.name;\n  }\n\n  /**\n   * The maximum number of elements that can be stored in the set.\n   */\n  set capacity(capacity: number) {\n    // Convert input to a number\n    capacity = +capacity;\n\n    // Check if input is valid\n    if (!isInfinity(capacity) && !isSafeCount(capacity)) {\n      throw new RangeError(\"Invalid capacity\");\n    }\n\n    // Check if capacity is changing\n    if (capacity === this._capacity) {\n      return;\n    }\n\n    // Update capacity\n    this._capacity = capacity;\n\n    // Check if set is within capacity\n    if (this.size <= capacity) {\n      return;\n    }\n\n    // Check if new capacity is zero\n    if (capacity === 0) {\n      const evicted = Array.from(this.set);\n      this.clear();\n      this._emitter.emit(BoundedEvent.Overflow, evicted);\n      return;\n    }\n\n    // Shrink down map.\n    const evicted: T[] = [];\n    const iter = this.set.values();\n    for (let n = this.size - capacity; n > 0; --n) {\n      const value = iter.next().value;\n      this.set.delete(value);\n      evicted.push(value);\n    }\n    this._emitter.emit(BoundedEvent.Overflow, evicted);\n  }\n\n  /**\n   * Adds the specified value to the set.\n   *\n   * @param value - the value to add.\n   */\n  add(value: T): this {\n    // Base case: set has no capacity.\n    if (this.capacity < 1) {\n      this._emitter.emit(BoundedEvent.Overflow, [value]);\n      return this;\n    }\n\n    // Evict excess items\n    const evicted: T[] = [];\n    if (!this.set.delete(value) && this.size >= this.capacity) {\n      const out = this.set.values().next().value;\n      this.set.delete(out);\n      evicted.push(out);\n    }\n\n    // Add value\n    this.set.add(value);\n\n    // Emit evicted\n    if (evicted.length > 0) {\n      this._emitter.emit(BoundedEvent.Overflow, evicted);\n    }\n\n    return this;\n  }\n\n  /**\n   * Removes all elements from the set.\n   */\n  clear(): void {\n    this.set.clear();\n  }\n\n  /**\n   * Deletes a specified value from the set.\n   *\n   * @returns `true` if the value existed in the set and has been removed, or `false` otherwise.\n   */\n  delete(value: T): boolean {\n    return this.set.delete(value);\n  }\n\n  /**\n   * Iterate through the set's entries.\n   *\n   * **Note:** Modifying the set during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of [key, value] pairs for every entry.\n   */\n  entries(): IterableIterator<[T, T]> {\n    return this.set.entries();\n  }\n\n  /**\n   * Performs the specified action for each value in the set.\n   *\n   * **Note:** Modifying the set during iteration may cause unexpected behavior.\n   *\n   * @param callbackfn - A function that accepts up to three arguments. It is called once per value.\n   * @param thisArg - An object to which the `this` keyword refers to in the `callbackfn` function. Defaults to `undefined`.\n   */\n  forEach(\n    callbackfn: (value: T, key: T, set: this) => void,\n    thisArg?: unknown\n  ): void {\n    for (const key of this.set.keys()) {\n      callbackfn.call(thisArg, key, key, this);\n    }\n  }\n\n  /**\n   * Determines whether a given value is in the set.\n   *\n   * @param value - The value to search for.\n   *\n   * @returns `true` if the value was found, `false` otherwise.\n   */\n  has(value: T): boolean {\n    return this.set.has(value);\n  }\n\n  /**\n   * Iterate through the set's keys.\n   *\n   * **Note:** Modifying the set during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of the set's keys.\n   */\n  keys(): IterableIterator<T> {\n    return this.set.keys();\n  }\n\n  /**\n   * Iterate through the set's values.\n   *\n   * **Note:** Modifying the set during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of the set's values.\n   */\n  values(): IterableIterator<T> {\n    return this.set.keys();\n  }\n\n  /**\n   * Iterate through the set's values.\n   *\n   * **Note:** Modifying the set during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of values.\n   */\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.set.values();\n  }\n}\n","import { Stack } from \"../../types/stack\";\nimport { Bounded } from \"../../types/bounded\";\nimport { BoundedEvent, CircularDoublyLinkedList } from \"../..\";\n\n/**\n * A circular stack is similar to a traditional stack, but uses a fixed-size,\n * circular buffer. When the stack reaches its maximum capacity and a new\n * element is added, the oldest is discarded, thus maintaining its size.\n *\n * This structure efficiently utilizes memory for applications where only the\n * most recent additions are of interest and older data can be discarded.\n *\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularLinkedStack<T> implements Bounded<T>, Stack<T> {\n  /**\n   * @internal\n   */\n  protected _list: CircularDoublyLinkedList<T>;\n\n  /**\n   * Creates a new stack with `capacity` defaulted to `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new stack with the given capacity.\n   *\n   * @param capacity - the stack's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new stack. Initial capacity is the number of items given.\n   *\n   * @param items - the values to store in the stack.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    this._list = new CircularDoublyLinkedList(capacity as number);\n  }\n\n  get capacity(): number {\n    return this._list.capacity;\n  }\n\n  get size(): number {\n    return this._list.size;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return CircularLinkedStack.name;\n  }\n\n  set capacity(capacity: number) {\n    this._list.capacity = capacity;\n  }\n\n  clear(): void {\n    this._list.clear();\n  }\n\n  entries(): IterableIterator<[number, T]> {\n    return this._list.entries();\n  }\n\n  forEach(\n    callbackfn: (value: T, index: number, collection: this) => void,\n    thisArg?: unknown\n  ): void {\n    this._list.forEach((v, i) => callbackfn.call(thisArg, v, i, this), thisArg);\n  }\n\n  has(value: T): boolean {\n    return this._list.has(value);\n  }\n\n  keys(): IterableIterator<number> {\n    return this._list.keys();\n  }\n\n  last(): T | undefined {\n    return this._list.at(-1);\n  }\n\n  pop(): T | undefined {\n    return this._list.pop();\n  }\n\n  push(...elems: T[]): number {\n    return this._list.push(...elems);\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.values();\n  }\n\n  top(): T | undefined {\n    return this._list.at(-1);\n  }\n\n  values(): IterableIterator<T> {\n    return this._list.values();\n  }\n\n  addListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.addListener(event, listener);\n    return this;\n  }\n\n  on(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.on(event, listener);\n    return this;\n  }\n\n  prependListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.prependListener(event, listener);\n    return this;\n  }\n\n  removeListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this._list.removeListener(event, listener);\n    return this;\n  }\n}\n","import { BoundedEvent } from \"../../types/boundedEvent\";\nimport { Stack } from \"../../types/stack\";\nimport { Bounded } from \"../../types/bounded\";\nimport { CircularArrayList } from \"../list/circularArrayList\";\n\n/**\n * A circular stack is similar to a traditional stack, but uses a fixed-size,\n * circular buffer. When the stack reaches its maximum capacity and a new\n * element is added, the oldest is discarded, thus maintaining its size.\n *\n * This structure efficiently utilizes memory for applications where only the\n * most recent additions are of interest and older data can be discarded.\n *\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularStack<T> implements Bounded<T>, Stack<T> {\n  /**\n   * @internal\n   */\n  protected list: CircularArrayList<T>;\n\n  /**\n   * Creates a new stack. Default `capacity` is `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new stack with the given capacity.\n   *\n   * @param capacity - the stack's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new stack from the given items. `capacity` will equal the number of items.\n   *\n   * @param items - the initial values in the stack.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    this.list = new CircularArrayList(capacity as number);\n  }\n\n  get capacity(): number {\n    return this.list.capacity;\n  }\n\n  get size(): number {\n    return this.list.size;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return CircularStack.name;\n  }\n\n  set capacity(capacity: number) {\n    this.list.capacity = capacity;\n  }\n\n  clear(): void {\n    this.list.clear();\n  }\n\n  entries(): IterableIterator<[number, T]> {\n    return this.list.entries();\n  }\n\n  forEach(\n    callbackfn: (value: T, index: number, collection: this) => void,\n    thisArg?: unknown\n  ): void {\n    return this.list.forEach((v, i) => callbackfn.call(thisArg, v, i, this));\n  }\n\n  has(value: T): boolean {\n    return this.list.has(value);\n  }\n\n  keys(): IterableIterator<number> {\n    return this.list.keys();\n  }\n\n  last(): T | undefined {\n    return this.list.last();\n  }\n\n  pop(): T | undefined {\n    return this.list.pop();\n  }\n\n  push(...elems: T[]): number {\n    return this.list.push(...elems);\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.list.values();\n  }\n\n  top(): T | undefined {\n    return this.list.last();\n  }\n\n  values(): IterableIterator<T> {\n    return this.list.values();\n  }\n\n  addListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.addListener(event, listener);\n    return this;\n  }\n\n  on(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.on(event, listener);\n    return this;\n  }\n\n  prependListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.prependListener(event, listener);\n    return this;\n  }\n\n  removeListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.removeListener(event, listener);\n    return this;\n  }\n}\n"],"names":["BoundedEvent","EventEmitter","CircularBase","emitter","__publicField","event","listener","ARGS_MAX_LENGTH","ARRAY_MAX_LENGTH","LINKED_MAX_LENGTH","isArrayLength","value","isInfinity","isIterable","isLinkedLength","isNumber","isSafeCount","addIfBelow","addend","target","clamp","min","max","isInRange","log","base","randomRun","probability","randomFn","toInteger","defaultValue","CircularArrayList","capacity","index","start","end","vals","ranges","i","deleteCount","ext","size","callbackfn","thisArg","N","newSize","items","prevValue","from","to","j","out","addCount","replaceCount","a","b","free","shifted","mid","vIndex","popped","newHead","evicted","temp","diff","tail","externalIndex","head","CircularDeque","v","elems","copy","node","distance","root","dupe","cut","prev","count","get","entries","has","keys","toList","values","singlyCut","singlyGet","chunk","source","chunkSize","CircularDoublyLinkedList","array","getValues","length","list","next","CircularLinkedDeque","CircularLinkedList","calcMaxLevel","p","expectedSize","levels","segRoot","gen","tails","indexes","getClosest","L","lvl","span","Y","X","x","nextY","y","truncateLevels","level","clone","stack","core","genNode","seg","prevStack","tailStack","edge","links","ptr","nextIndex","insert","dest","src","minY","prevs","prevI","prevEdge","tailEdge","nextD","tailD","rootEdge","headD","prevD","maxY","CircularSkipList","config","NodeUtils.calcMaxLevel","NodeUtils.gen","maxLevel","NodeUtils.truncateLevels","NodeUtils.get","NodeUtils.entries","NodeUtils.has","NodeUtils.keys","NodeUtils.copy","NodeUtils.values","StackUtils.cut","NodeUtils.toList","StackUtils.insert","CircularMap","iter","n","entry","key","CircularLinkedQueue","CircularQueue","CircularSet","CircularLinkedStack","CircularStack"],"mappings":"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"}