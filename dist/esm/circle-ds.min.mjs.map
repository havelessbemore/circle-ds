{"version":3,"file":"circle-ds.min.mjs","sources":["../../src/types/boundedEvent.ts","../../__vite-browser-external","../../src/circle/circularBase.ts","../../src/utils/constants.ts","../../src/utils/is.ts","../../src/utils/math.ts","../../src/circle/circularArrayList.ts","../../src/circle/circularDeque.ts","../../src/utils/linkedNode.ts","../../src/utils/doublyLinkedNode.ts","../../src/circle/circularDoublyLinkedList.ts","../../src/circle/circularLinkedDeque.ts","../../src/circle/circularLinkedList.ts","../../src/circle/circularLinkedQueue.ts","../../src/circle/circularLinkedStack.ts","../../src/circle/circularMap.ts","../../src/circle/circularQueue.ts","../../src/circle/circularSet.ts","../../src/circle/circularStack.ts"],"sourcesContent":["/**\n * An enumeration of event types supported by {@link Bounded} collections.\n *\n * This object defines a set of constants representing event names that can\n * be emitted by instances of collections implementing the {@link Bounded} interface.\n * These events signify specific actions or changes in the state of the collection.\n *\n * Defined events include:\n * - `Overflow`: Indicates that the collection has reached its capacity, and\n *   as a result, one or more elements have been removed to accommodate new elements.\n *   This event is triggered during operations that add elements to the collection when\n *   it exceeds its capacity, or when capacity is updated below the collection's current\n *   size. Listeners attached to this event will receive an array of elements that were\n *   removed due to the overflow. Removed elements may be sent across 1 or more event\n *   instances.\n *\n * This object is marked as `const` to ensure that its properties are read-only,\n * preventing modification of event names which could lead to inconsistencies in\n * event handling across the application.\n */\nexport const BoundedEvent = {\n  Overflow: \"overflow\",\n} as const;\n","export default {}","import EventEmitter from \"events\";\nimport { BoundedEvent } from \"../types/boundedEvent\";\nimport { ValueOf } from \"../types/valueOf\";\n\nexport class CircularBase<T> {\n  /**\n   * The event emitter.\n   * @internal\n   */\n  protected emitter: EventEmitter;\n\n  constructor(emitter = new EventEmitter()) {\n    this.emitter = emitter;\n  }\n\n  /**\n   * Appends the listener function to the listeners array for the\n   * {@link BoundedEvent.Overflow} event.\n   *\n   * * No checks are made to see if the listener has already been added.\n   * Multiple calls with the same of event + listener combination will\n   * result in the listener being added and called multiple times.\n   *\n   * * By default, event listeners are invoked in the order they are added.\n   * The `prependListener()` method can be used as an alternative to add\n   * the event listener to the beginning of the listeners array.\n   *\n   * @param event - The name of the event.\n   * @param listener - The callback function. It will\n   * receive an array of elements that have been removed due to overflow.\n   * This can happen when elements are added while the collection is at\n   * capacity, or when capacity is reduced below the current size.\n   *\n   * @returns the collection.\n   */\n  addListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this;\n  addListener(\n    event: ValueOf<typeof BoundedEvent>,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    listener: (...args: any[]) => void\n  ): this {\n    this.emitter.addListener(event, listener);\n    return this;\n  }\n\n  /**\n   * Appends the listener function to the listeners array for the\n   * {@link BoundedEvent.Overflow} event.\n   *\n   * * No checks are made to see if the listener has already been added.\n   * Multiple calls with the same of event + listener combination will\n   * result in the listener being added and called multiple times.\n   *\n   * * By default, event listeners are invoked in the order they are added.\n   * The `prependListener()` method can be used as an alternative to add\n   * the event listener to the beginning of the listeners array.\n   *\n   * @param event - The name of the event.\n   * @param listener - The callback function. It will\n   * receive an array of elements that have been removed due to overflow.\n   * This can happen when elements are added while the collection is at\n   * capacity, or when capacity is reduced below the current size.\n   *\n   * @returns the collection.\n   */\n  on(event: typeof BoundedEvent.Overflow, listener: (elems: T[]) => void): this;\n  on(\n    event: ValueOf<typeof BoundedEvent>,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    listener: (...args: any[]) => void\n  ): this {\n    this.emitter.on(event, listener);\n    return this;\n  }\n\n  /**\n   * Adds the listener function to the beginning of the listeners array for\n   * the {@link BoundedEvent.Overflow} event.\n   *\n   * * No checks are made to see if the listener has already been added.\n   * Multiple calls with the same of event + listener combination will\n   * result in the listener being added and called multiple times.\n   *\n   * * Alternatively, the `addListener()` method can be used to add\n   * the event listener to the end of the listeners array.\n   *\n   * @param event - The name of the event.\n   * @param listener - The callback function. It will\n   * receive an array of elements that have been removed due to overflow.\n   * This can happen when elements are added while the collection is at\n   * capacity, or when capacity is reduced below the current size.\n   *\n   * @returns the collection.\n   */\n  prependListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this;\n  prependListener(\n    event: ValueOf<typeof BoundedEvent>,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    listener: (...args: any[]) => void\n  ): this {\n    this.emitter.prependListener(event, listener);\n    return this;\n  }\n\n  /**\n   * Removes the specified listener from the listener array for the event.\n   *\n   * At most once instance of a listener will be removed. If a listener\n   * has been added multiple times for the same event, this method should\n   * be called once per instance.\n   *\n   * @param event - The name of the event.\n   * @param listener - The callback function.\n   *\n   * @returns the collection.\n   */\n  removeListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this;\n  removeListener(\n    event: ValueOf<typeof BoundedEvent>,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    listener: (...args: any[]) => void\n  ): this {\n    this.emitter.removeListener(event, listener);\n    return this;\n  }\n}\n","/**\n * Represents the maximum number of arguments that can be passed to a function.\n *\n * While ECMAScript specifications do not explicitly limit the number of function arguments,\n * practical limits are imposed by JavaScript engine implementations. Different engines can\n * have different maximums, so a conservative value is used to prevent runtime errors.\n *\n * For more details, see the\n * {@link https://262.ecma-international.org/14.0/#sec-list-and-record-specification-type | ECMAScript Specification},\n * section \"6.2.2 The List and Record Specification Types\".\n */\nexport const ARGS_MAX_LENGTH = 16383; // 2**14 - 1\n\n/**\n * Defines the maximum allowable length of an array.\n *\n * According to the ECMAScript specification, the length property of an array is\n * an unsigned 32-bit integer, so its range is 0 to 2**32 - 1, inclusive. Beyond this,\n * operations that modify the array length (e.g., `push`, `pop`, `unshift`, `shift`)\n * may fail or behave unexpectedly.\n *\n * For more details, see the\n * {@link https://262.ecma-international.org/14.0/#sec-arraycreate | ECMAScript Specification},\n * section \"10.4.2.2 ArrayCreate\".\n */\nexport const ARRAY_MAX_LENGTH = 4294967295; // 2**32 - 1;\n","import { ARRAY_MAX_LENGTH } from \"./constants\";\n\n/**\n * Checks if a given value is an integer within a valid array length range.\n *\n * This function is useful for validating array lengths before attempting operations\n * that could result in a `RangeError` due to invalid array size.\n *\n * @param value - The value to check.\n *\n * @returns `true` if the value is an integer within the `[0, ARRAY_MAX_LENGTH]` range, `false` otherwise.\n */\nexport function isArrayLength(value: unknown): value is number {\n  return (\n    Number.isInteger(value) &&\n    (value as number) >= 0 &&\n    (value as number) <= ARRAY_MAX_LENGTH\n  );\n}\n\n/**\n * Determines whether the provided value is a function.\n *\n * @param value - The value to check.\n *\n * @returns `true` if the value is a function, `false` otherwise.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isFunction(value: unknown): value is Function {\n  return typeof value === \"function\";\n}\n\n/**\n * Checks if a given value is positive infinity.\n *\n * @param value - The value to check.\n *\n * @returns `true` if the value is positive infinity, `false` otherwise.\n */\nexport function isInfinity(value: unknown): boolean {\n  return value === Number.POSITIVE_INFINITY;\n}\n\n/**\n * Determines whether the provided value is iterable.\n *\n * This is useful for determining if a value can be used\n * in a `for...of` loop or with spread syntax.\n *\n * @param value - The value to check.\n *\n * @returns `true` if the value implements the iterable protocol, `false` otherwise.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function isIterable(value: any): value is Iterable<unknown> {\n  return typeof value?.[Symbol.iterator] === \"function\";\n}\n\n/**\n * Determines whether the provided value is a number.\n *\n * This includes `NaN` and `Infinity`, so consider additional\n * checks if those values are not desirable.\n *\n * @param value - The value to check.\n *\n * @returns `true` if the value is of type number, `false` otherwise.\n */\nexport function isNumber(value: unknown): value is number {\n  return typeof value === \"number\";\n}\n\n/**\n * Checks if a given value is a safe integer greater than or equal to 0.\n *\n * This is useful for validating counts or sizes that must be within the safe\n * integer range to prevent precision loss.\n *\n * @param value - The value to check.\n *\n * @returns `true` if the value is a safe integer and non-negative, `false` otherwise.\n */\nexport function isSafeCount(value: unknown): value is number {\n  return Number.isSafeInteger(value) && (value as number) >= 0;\n}\n\n/**\n * Determines whether the provided value is a symbol.\n *\n * @param value - The value to check.\n *\n * @returns `true` if the value is a symbol, `false` otherwise.\n */\nexport function isSymbol(value: unknown): value is symbol {\n  return typeof value === \"symbol\";\n}\n","/**\n * Adds a specified addend to a value if the value is below a given target.\n *\n * @param value - The initial number.\n * @param addend - The number added if the value is below the target.\n * @param target - The target number for comparison. If the value is below this\n * number, the addend will be added. Defaults to 0 if not specified.\n */\nexport function addIfBelow(value: number, addend: number, target = 0): number {\n  return value >= target ? value : value + addend;\n}\n\n/**\n * Restricts a given numerical value within a specified range [min, max].\n *\n * If the provided value is less than the minimum, the minimum is returned.\n * If it is greater than the maximum, the maximum is returned. If the value\n * is within the range, the value itself is returned. An error is thrown if\n * the minimum range value is greater than the maximum range value, as this\n * represents an invalid range.\n *\n * @param value - The numerical value to clamp.\n * @param min - The minimum allowable value of the range.\n * @param max - The maximum allowable value of the range.\n *\n * @returns The clamped value within the specified range.\n *\n * @throws `RangeError` If `min` is greater than `max`.\n */\nexport function clamp(value: number, min: number, max: number): number {\n  if (min > max) {\n    throw new RangeError(\"Invalid clamp range; min must be <= max\");\n  }\n  if (value <= min) {\n    return min;\n  }\n  return value <= max ? value : max;\n}\n\n/**\n * Checks if a given numeric value falls within a specified range.\n *\n * @param value - The numeric value to check.\n * @param min - The inclusive lower bound of the range.\n * @param max - The exclusive upper bound of the range.\n *\n * @returns - `true` if `value` is within the range `[min, max)`, `false` otherwise.\n */\nexport function isInRange(value: number, min: number, max: number): boolean {\n  return value >= min && value < max;\n}\n\n/**\n * Calculates the logarithm of a given value with the specified base.\n *\n * This function uses natural logarithms (`Math.log`) for its calculations.\n * If either the value or the base is less than or equal to 0, `NaN` is returned\n * to indicate an invalid operation, as logarithms are not defined for non-positive\n * values and bases.\n *\n * @param value - The numerical value for which to calculate the logarithm. Must be positive.\n * @param base - The base of the logarithm. Must be positive.\n *\n * @returns The calculated logarithm of the value with the given base, or `NaN` for invalid inputs.\n */\nexport function log(value: number, base: number): number {\n  return value >= 0 && base > 0 ? Math.log(value) / Math.log(base) : NaN;\n}\n\n/**\n * Generates a number representing the length of a consecutive run based on a\n * probability threshold.\n *\n * This function iteratively increments a counter as long as the randomly\n * generated numbers from `randomFn` are less than the specified probability\n * threshold `p`, or until the counter reaches the maximum `max`.\n *\n * The function is useful for simulations or models that require a random yet\n * probabilistically constrained sequence length, such as simulating streaks or\n * runs in games of chance.\n *\n * @param p - The probability threshold. Defaults to 0.5.\n * @param max - The maximum value the of the run. Defaults to Infinity.\n * @param min - The starting value of the run. Defaults to 0.\n * @param randomFn - A function that generates a random number. Defaults to `Math.random`.\n *\n * @returns The length of the run.\n */\nexport function randomRun(\n  p = 0.5,\n  max = Infinity,\n  min = 0,\n  randomFn = Math.random\n): number {\n  while (min < max && randomFn() < p) {\n    ++min;\n  }\n  return min;\n}\n\n/**\n * Attempts to convert a given value to an integer.\n *\n * The function first tries to convert the value to a number. If the result\n * is not valid (i.e. `NaN`), the given `defaultValue` is returned. Otherwise,\n * the function truncates the number to an integer using `Math.trunc`.\n *\n * This is useful for ensuring numerical operations are performed on integers,\n * with a controllable fallback for invalid inputs.\n *\n * @param value - The value to convert to an integer. This can be of any type.\n * @param defaultValue - The fallback value to return if conversion fails. Defaults to 0.\n *\n * @returns The converted integer, or `defaultValue` if conversion is not possible.\n */\nexport function toInteger(value?: unknown, defaultValue = 0): number {\n  value = +value!;\n  return isNaN(value as number) ? defaultValue : Math.trunc(value as number);\n}\n","import { CircularBase } from \"./circularBase\";\nimport { BoundedEvent } from \"../types/boundedEvent\";\nimport { isArrayLength, isInfinity, isNumber } from \"../utils/is\";\nimport { Bounded } from \"../types/bounded\";\nimport { ARRAY_MAX_LENGTH } from \"../utils/constants\";\nimport { List } from \"../types/list\";\nimport { addIfBelow, clamp, isInRange, toInteger } from \"../utils/math\";\n\nexport class CircularArrayList<T>\n  extends CircularBase<T>\n  implements Bounded<T>, List<T>\n{\n  /**\n   * The maximum number of elements that can be stored in the collection.\n   * @internal\n   */\n  protected _capacity: number;\n\n  /**\n   * The index representing the first element.\n   * @internal\n   */\n  protected head: number;\n\n  /**\n   * Whether capacity is finite (true) or infinite (false).\n   */\n  protected isFinite: boolean;\n\n  /**\n   * The index one more than the last element.\n   * @internal\n   */\n  protected next: number;\n\n  /**\n   * The number of elements.\n   * @internal\n   */\n  protected _size: number;\n\n  /**\n   * The stored values.\n   * @internal\n   */\n  protected vals: T[];\n\n  /**\n   * Creates a new list. Default `capacity` is `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new list with the given capacity.\n   *\n   * @param capacity - the list's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new list from the given items. `capacity` will equal the number of items.\n   *\n   * @param items - the initial values in the list.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    super();\n\n    // Initialize class variables\n    this._capacity = ARRAY_MAX_LENGTH;\n    this.head = 0;\n    this.isFinite = false;\n    this._size = 0;\n    this.next = 0;\n    this.vals = [];\n\n    // If capacity is null, undefined, or Infinity\n    if (capacity == null || isInfinity(capacity)) {\n      return;\n    }\n\n    // If capacity is a number\n    if (isNumber(capacity)) {\n      // If capacity is invalid\n      if (!isArrayLength(capacity)) {\n        throw new RangeError(\"Invalid capacity\");\n      }\n      // If capacity is valid\n      this._capacity = capacity;\n      this.isFinite = true;\n      return;\n    }\n\n    // If capacity is an iterable\n    this.vals = Array.from(capacity as Iterable<T>);\n    this._capacity = this.vals.length;\n    this.isFinite = true;\n    this._size = this._capacity;\n  }\n\n  get capacity(): number {\n    return this.isFinite ? this._capacity : Infinity;\n  }\n\n  get size(): number {\n    return this._size;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return CircularArrayList.name;\n  }\n\n  set capacity(capacity: number) {\n    // Convert capacity to a number\n    capacity = +capacity;\n\n    // Check capacity\n    if (isInfinity(capacity)) {\n      // If capacity is Infinity\n      capacity = ARRAY_MAX_LENGTH;\n      this.isFinite = false;\n    } else if (isArrayLength(capacity)) {\n      // If capacity is valid\n      this.isFinite = true;\n    } else {\n      // If capacity is invalid\n      throw new RangeError(\"Invalid capacity\");\n    }\n\n    // Update collection\n    if (this._size <= 0) {\n      // If collection is empty\n      this._capacity = capacity;\n      this.clear();\n    } else if (capacity < this._capacity) {\n      // If capacity is decreasing\n      this.shrink(capacity);\n    } else if (capacity > this._capacity) {\n      // If capacity is increasing\n      this.grow(capacity);\n    }\n  }\n\n  at(index?: number): T | undefined {\n    // Sanitize input\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return undefined;\n    }\n\n    // Return value\n    return this.vals[this.toIndex(index)];\n  }\n\n  clear(): void {\n    this._size = 0;\n    this.head = 0;\n    this.next = 0;\n    this.vals.length = 0;\n  }\n\n  /*\n  copyWithin(target: number, start: number, end?: number): this {\n    const size = this._size;\n\n    // Sanitize inputs\n    target = clamp(addIfBelow(toInteger(target, 0), size), 0, size);\n    start = clamp(addIfBelow(toInteger(start, 0), size), 0, size);\n    const temp = target > start ? target - start : 0;\n    end = clamp(addIfBelow(toInteger(end, size), size), start, size - temp);\n\n    // Copy within\n    this._copyWithin(target, start, end);\n\n    // Return list\n    return this;\n  }\n  */\n\n  /**\n   * @internal\n   */\n  protected _copyWithin(target: number, start: number, end: number): void {\n    // If copying in-place or nothing to copy\n    if (target == start || start >= end) {\n      return;\n    }\n\n    // Get source data segments\n    const capacity = this._capacity - 1;\n    const vals = this.vals;\n    const ranges = this.toRanges(start, end);\n\n    if (target <= start || end <= target) {\n      // Copy from left to right\n      target = this.toIndex(target);\n      for (const [min, max] of ranges) {\n        for (let i = min; i < max; ++i) {\n          vals[target] = vals[i];\n          target = target < capacity ? target + 1 : 0;\n        }\n      }\n    } else {\n      // Copy from right to left\n      target = this.toIndex(target + (end - start));\n      for (const [min, max] of ranges.reverse()) {\n        for (let i = max - 1; i >= min; --i) {\n          target = target > 0 ? target - 1 : capacity;\n          vals[target] = vals[i];\n        }\n      }\n    }\n  }\n\n  delete(index: number): boolean {\n    // Sanitize input\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return false;\n    }\n\n    // Delete value\n    this._delete(index, 1);\n\n    // Return success\n    return true;\n  }\n\n  /**\n   * @internal\n   */\n  protected _delete(index: number, deleteCount: number): void {\n    this._copyWithin(index, index + deleteCount, this._size);\n    this._pop(deleteCount);\n  }\n\n  *entries(): IterableIterator<[number, T]> {\n    for (let ext = 0; ext < this._size; ++ext) {\n      yield [ext, this.vals[this.toIndex(ext)]];\n    }\n  }\n\n  fill(value: T, start?: number, end?: number): this {\n    const size = this._size;\n\n    // Sanitize inputs\n    start = clamp(addIfBelow(toInteger(start, 0), size), 0, size);\n    end = clamp(addIfBelow(toInteger(end, size), size), start, size);\n\n    // Fill values\n    this._fill(value, start, end);\n\n    // Return list\n    return this;\n  }\n\n  /**\n   * @internal\n   */\n  protected _fill(value: T, start: number, end: number): void {\n    for (const [min, max] of this.toRanges(start, end)) {\n      this.vals.fill(value, min, max);\n    }\n  }\n\n  first(): T | undefined {\n    return this._size > 0 ? this.vals[this.head] : undefined;\n  }\n\n  forEach(\n    callbackfn: (value: T, index: number, collection: this) => void,\n    thisArg?: unknown\n  ): void {\n    const N = this._size;\n    for (let ext = 0; ext < N && ext < this._size; ++ext) {\n      const value = this.vals[this.toIndex(ext)];\n      callbackfn.call(thisArg, value, ext, this);\n    }\n  }\n\n  has(value: T): boolean {\n    const vals = this.vals;\n    for (const [min, max] of this.toRanges(0, this._size)) {\n      for (let i = min; i < max; ++i) {\n        if (value === vals[i]) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  *keys(): IterableIterator<number> {\n    for (let ext = 0; ext < this._size; ++ext) {\n      yield ext;\n    }\n  }\n\n  last(): T | undefined {\n    return this._size > 0 ? this.vals[this.toIndex(this._size - 1)] : undefined;\n  }\n\n  pop(): T | undefined {\n    // If list is empty\n    if (this._size <= 0) {\n      return undefined;\n    }\n\n    // Get and remove first value\n    const value = this.vals[this.toIndex(this._size - 1)];\n    this._pop(1);\n\n    // Return value\n    return value;\n  }\n\n  /**\n   * @internal\n   */\n  protected _pop(N: number): void {\n    // Remove values\n    const newSize = this._size - N;\n    this._fill(undefined as T, newSize, this._size);\n\n    // Update state\n    this.next = this.toIndex(newSize);\n    this._size = newSize;\n  }\n\n  push(...values: T[]): number {\n    // If no values\n    if (values.length <= 0) {\n      return this._size;\n    }\n\n    // If no capacity\n    if (this._capacity <= 0) {\n      this._overflow(values);\n      return this._size;\n    }\n\n    // Push values\n    this._insert(this._size, values);\n\n    // Return new size\n    return this._size;\n  }\n\n  set(index: number, value: T): T | undefined {\n    // Sanitize input\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return undefined;\n    }\n\n    // Update value\n    index = this.toIndex(index);\n    const prevValue = this.vals[index];\n    this.vals[index] = value;\n\n    // Return previous value\n    return prevValue;\n  }\n\n  shift(): T | undefined {\n    // If list is empty\n    if (this._size <= 0) {\n      return undefined;\n    }\n\n    // Get and remove last value\n    const value = this.vals[this.head];\n    this._shift(1);\n\n    // Return value\n    return value;\n  }\n\n  /**\n   * @internal\n   */\n  protected _shift(N: number): void {\n    // Remove values\n    this._fill(undefined as T, 0, N);\n\n    // Update state\n    this.head = this.toIndex(N);\n    this._size -= N;\n  }\n\n  slice(start?: number, end?: number): CircularArrayList<T> {\n    const size = this._size;\n\n    // Sanitize inputs\n    start = clamp(addIfBelow(toInteger(start, 0), size), 0, size);\n    end = clamp(addIfBelow(toInteger(end, size), size), start, size);\n\n    // Return slice\n    return this.toList(this._slice(start, end));\n  }\n\n  /**\n   * @internal\n   */\n  protected _slice(start: number, end: number): T[] {\n    const from = this.vals;\n    const to = new Array<T>(end - start);\n\n    let j = 0;\n    for ([start, end] of this.toRanges(start, end)) {\n      for (let i = start; i < end; ++i) {\n        to[j++] = from[i];\n      }\n    }\n\n    return to;\n  }\n\n  splice(\n    start: number,\n    deleteCount?: number,\n    ...items: T[]\n  ): CircularArrayList<T> {\n    const size = this._size;\n\n    // Sanitize inputs\n    start = clamp(addIfBelow(toInteger(start, 0), size), 0, size);\n    deleteCount = clamp(toInteger(deleteCount, 0), 0, size - start);\n\n    // Create output\n    const out = this.toList(this._slice(start, start + deleteCount));\n\n    // Update list\n    this._splice(start, deleteCount, items);\n\n    // Return output\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  protected _splice(start: number, deleteCount: number, items: T[] = []): void {\n    const addCount = items.length;\n    const replaceCount = Math.min(deleteCount, addCount);\n    const vals = this.vals;\n\n    // Replace values\n    let j = 0;\n    for (const [a, b] of this.toRanges(start, start + replaceCount)) {\n      for (let i = a; i < b; ++i) {\n        vals[i] = items[j++];\n      }\n    }\n\n    // If done\n    if (deleteCount == addCount) {\n      return;\n    }\n\n    // Insert remaining values or finish deletions\n    start += replaceCount;\n    deleteCount < addCount\n      ? this._insert(start, items, replaceCount)\n      : this._delete(start, deleteCount - addCount);\n  }\n\n  /**\n   * @internal\n   */\n  protected _insert(\n    start: number,\n    items: T[],\n    min = 0,\n    max = items.length\n  ): void {\n    const N = max - min;\n\n    // Check free space\n    let free = this._capacity - this._size;\n    if (free >= N) {\n      this._safeInsert(start, items, min, max);\n      return;\n    }\n\n    // Check if \"infinite\" capacity yet not enough space\n    if (!this.isFinite) {\n      this._safeInsert(start, items, min, min + free);\n      throw new Error(\"Out of memory\");\n    }\n\n    // Remove from head\n    if (start > 0) {\n      const shifted = Math.min(start, N - free);\n      this._overflow(this._slice(0, shifted));\n      this._shift(shifted);\n      start -= shifted;\n      free += shifted;\n    }\n\n    // Check free space\n    if (free >= N) {\n      this._safeInsert(start, items, min, max);\n      return;\n    }\n\n    // Remove from items and insert remaining\n    const mid = max - free;\n    this._overflow(items.slice(min, mid));\n    this._safePresert(0, items, mid, max);\n  }\n\n  /**\n   * @internal\n   */\n  protected _safeInsert(\n    vIndex: number,\n    items: T[],\n    min = 0,\n    max = items.length\n  ): void {\n    const N = max - min;\n    const vals = this.vals;\n\n    // Make space\n    this._copyWithin(vIndex + N, vIndex, this._size);\n\n    // Insert into space\n    for (const [start, end] of this.toRanges(vIndex, vIndex + N)) {\n      for (let i = start; i < end; ++i) {\n        vals[i] = items[min++];\n      }\n    }\n\n    // Update state\n    this._size += N;\n    this.next = this.toIndex(this._size);\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.values();\n  }\n\n  unshift(...values: T[]): number {\n    // If no values\n    if (values.length <= 0) {\n      return this._size;\n    }\n\n    // If no capacity\n    if (this._capacity <= 0) {\n      this._overflow(values);\n      return this._size;\n    }\n\n    // Presert values\n    this._presert(0, values);\n\n    // Return new size\n    return this._size;\n  }\n\n  /**\n   * @internal\n   */\n  protected _presert(\n    end: number,\n    items: T[],\n    min = 0,\n    max = items.length\n  ): void {\n    const N = max - min;\n\n    // Check free space\n    let free = this._capacity - this._size;\n    if (free >= N) {\n      this._safePresert(end, items, min, max);\n      return;\n    }\n\n    // Check if \"infinite\" capacity yet not enough space\n    if (!this.isFinite) {\n      this._safePresert(end, items, max - free, max);\n      throw new Error(\"Out of memory\");\n    }\n\n    // Remove from tail\n    if (end < this._size) {\n      const popped = Math.min(this._size - end, N - free);\n      this._overflow(this._slice(this._size - popped, this._size));\n      this._pop(popped);\n      free += popped;\n    }\n\n    // Check free space\n    if (free >= N) {\n      this._safePresert(end, items, min, max);\n      return;\n    }\n\n    // Remove from items and insert remaining\n    const mid = min + free;\n    this._overflow(items.slice(mid, max));\n    this._safeInsert(this._size, items, min, mid);\n  }\n\n  /**\n   * @internal\n   */\n  protected _safePresert(\n    vIndex: number,\n    items: T[],\n    min = 0,\n    max = items.length\n  ): void {\n    const capacity = this._capacity;\n    const N = max - min;\n    const vals = this.vals;\n\n    // Make space\n    const newHead = capacity - N;\n    this._copyWithin(newHead, 0, vIndex);\n\n    // Insert into space\n    vIndex += newHead;\n    for (const [start, end] of this.toRanges(vIndex, vIndex + N)) {\n      for (let i = start; i < end; ++i) {\n        vals[i] = items[min++];\n      }\n    }\n\n    // Update state\n    this._size += N;\n    this.head = this.toIndex(newHead);\n  }\n\n  *values(): IterableIterator<T> {\n    for (let ext = 0; ext < this._size; ++ext) {\n      yield this.vals[this.toIndex(ext)];\n    }\n  }\n\n  /**\n   * @internal\n   *\n   * Emit an overflow event containing the items evicted from the collection.\n   *\n   * @param evicted - The items evicted from the collection.\n   */\n  protected _overflow(evicted: T[]): void {\n    this.emitter.emit(BoundedEvent.Overflow, evicted);\n  }\n\n  /**\n   * @internal\n   *\n   * Grow capacity.\n   *\n   * @param capacity - the new capacity\n   */\n  protected grow(capacity: number): void {\n    // Check if list is sequential: [    H123456T    ]\n    if (this.isSequential()) {\n      this.sequentialReset(capacity);\n      return;\n    }\n\n    // Queue is not sequential: [456T    H123]\n    if (this._size <= this.head) {\n      // [H123456T] = A + B = N\n      const temp = this._size - this.next;\n      this.vals.copyWithin(temp, 0, this.next);\n      this.vals.copyWithin(0, this.head, this.head + temp);\n      this.vals.length = this._size;\n      this.head = 0;\n      this.next = this._size;\n    } else if (this.head + this._size <= capacity) {\n      // [        H123456T] = 2B < 2N\n      this.vals.length = this.head + this._size;\n      this.vals.copyWithin(this._capacity, 0, this.next);\n      this.vals.fill(undefined as T, 0, this.next);\n      this.next = (this.head + this._size) % capacity;\n    } /* else if (this.next + this._size <= capacity) {\n      // [    H123456T] = A + 2B = N + B < 2N\n      const temp = this._capacity - this.head;\n      this.vals.length = capacity;\n      this.vals.copyWithin(this.next, this.head, this._capacity);\n      this.vals.copyWithin(this.next + temp, 0, this.next);\n      this.vals.fill(undefined as T, 0, this.next);\n      this.vals.length = this.next + this._size;\n      this.head = this.next;\n      this.next = (this.head + this._size) % capacity;\n    } */ else {\n      // [6T      H12345] = B + D < 2B < 2N\n      const diff = capacity - this._capacity;\n      this.vals.length = capacity;\n      this.vals.copyWithin(this._capacity, 0, diff);\n      this.vals.copyWithin(0, diff, this.next);\n      const temp = Math.max(diff, this.next - diff);\n      this.vals.fill(undefined as T, temp, this.next);\n      this.next -= diff;\n    }\n\n    // Update capacity\n    this._capacity = capacity;\n  }\n\n  /**\n   * @internal\n   *\n   * Returns whether the list is stored sequentially in memory.\n   *\n   * @returns `true` if the list is sequential in memory, `false` otherwise.\n   */\n  protected isSequential(): boolean {\n    return this.head < this.next || this.next <= 0;\n  }\n\n  /**\n   * @internal\n   *\n   * Adjusts the list to fit within the given capacity.\n   *\n   * Assumes the list:\n   * - is sequential in memory.\n   * - fits in the given capacity (size \\<= capacity).\n   *\n   * @param capacity - The new capacity.\n   *\n   * @returns `true` if the list was reset, `false` otherwise.\n   */\n  protected sequentialReset(capacity: number): boolean {\n    const tail = this.head + this._size;\n\n    // If list fits in current location: [    H------T    ]\n    if (tail <= capacity) {\n      this.vals.length = tail;\n      this.next = this.vals.length % capacity;\n\n      // If list must be fully moved: [H------T    ]\n    } else if (this.head >= capacity) {\n      this.vals.copyWithin(0, this.head, tail);\n      this.vals.length = this._size;\n      this.head = 0;\n      this.next = this._size % capacity;\n\n      // If list must be partially moved: [--T  H----]\n    } else {\n      this.vals.copyWithin(0, capacity, tail);\n      this.vals.length = capacity;\n      this.next = tail - capacity;\n    }\n\n    this._capacity = capacity;\n    return true;\n  }\n\n  /**\n   * @internal\n   *\n   * Shrink capacity.\n   *\n   * @param capacity - the new capacity\n   */\n  protected shrink(capacity: number): void {\n    // Handle overflow\n    if (this._size > capacity) {\n      const shifted = this._size - capacity;\n      this._overflow(this._slice(0, shifted));\n      this._shift(shifted);\n    }\n\n    // Check if list is sequential: [    H123456T    ]\n    if (this.isSequential()) {\n      this.sequentialReset(capacity);\n      return;\n    }\n\n    // Shift 1st half of list: [456T....H123] -> [456T..H123]\n    const diff = this._capacity - capacity;\n    this.vals.copyWithin(this.head - diff, this.head, this._capacity);\n    this.vals.length = capacity;\n    this.head -= diff;\n    this._capacity = capacity;\n  }\n\n  /**\n   * @internal\n   */\n  protected toIndex(externalIndex: number): number {\n    return (this.head + externalIndex) % this._capacity;\n  }\n\n  /**\n   * @internal\n   */\n  protected toList(values: T[]): CircularArrayList<T> {\n    const out = new CircularArrayList<T>(0);\n    out.vals = values;\n    out._size = values.length;\n    out._capacity = values.length;\n    return out;\n  }\n\n  /**\n   * @internal\n   */\n  protected toRanges(min: number, max: number): [number, number][] {\n    const head = this.head;\n    const mid = this._capacity - head;\n    if (max <= mid) {\n      return [[head + min, head + max]];\n    }\n    if (min >= mid) {\n      return [[min - mid, max - mid]];\n    }\n    return [\n      [head + min, this._capacity],\n      [0, max - mid],\n    ];\n  }\n}\n","import { BoundedEvent } from \"../types/boundedEvent\";\nimport { Bounded } from \"../types/bounded\";\nimport { Deque } from \"..\";\nimport { CircularArrayList } from \"./circularArrayList\";\n\n/**\n * A circular deque is similar to a traditional deque, but uses a fixed-size,\n * circular buffer. When the deque reaches its maximum capacity and a new\n * element is added, the oldest is discarded, thus maintaining its size.\n *\n * This structure efficiently utilizes memory for applications where only the\n * most recent additions are of interest and older data can be discarded.\n *\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularDeque<T> implements Bounded<T>, Deque<T> {\n  /**\n   * @internal\n   */\n  protected list: CircularArrayList<T>;\n\n  /**\n   * Creates a new deque. Default `capacity` is `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new deque with the given capacity.\n   *\n   * @param capacity - the deque's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new deque from the given items. `capacity` will equal the number of items.\n   *\n   * @param items - the initial values in the deque.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    this.list = new CircularArrayList(capacity as number);\n  }\n\n  get capacity(): number {\n    return this.list.capacity;\n  }\n\n  get size(): number {\n    return this.list.size;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return CircularDeque.name;\n  }\n\n  set capacity(capacity: number) {\n    this.list.capacity = capacity;\n  }\n\n  clear(): void {\n    this.list.clear();\n  }\n\n  entries(): IterableIterator<[number, T]> {\n    return this.list.entries();\n  }\n\n  first(): T | undefined {\n    return this.list.first();\n  }\n\n  forEach(\n    callbackfn: (value: T, index: number, collection: this) => void,\n    thisArg?: unknown\n  ): void {\n    return this.list.forEach((v, i) => callbackfn.call(thisArg, v, i, this));\n  }\n\n  front(): T | undefined {\n    return this.list.first();\n  }\n\n  has(value: T): boolean {\n    return this.list.has(value);\n  }\n\n  keys(): IterableIterator<number> {\n    return this.list.keys();\n  }\n\n  last(): T | undefined {\n    return this.list.last();\n  }\n\n  pop(): T | undefined {\n    return this.list.pop();\n  }\n\n  push(...elems: T[]): number {\n    return this.list.push(...elems);\n  }\n\n  shift(): T | undefined {\n    return this.list.shift();\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.list.values();\n  }\n\n  top(): T | undefined {\n    return this.list.last();\n  }\n\n  unshift(...elems: T[]): number {\n    return this.list.unshift(...elems);\n  }\n\n  values(): IterableIterator<T> {\n    return this.list.values();\n  }\n\n  addListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.addListener(event, listener);\n    return this;\n  }\n\n  on(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.on(event, listener);\n    return this;\n  }\n\n  prependListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.prependListener(event, listener);\n    return this;\n  }\n\n  removeListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.removeListener(event, listener);\n    return this;\n  }\n}\n","import { LinkedNode } from \"../types/linkedNode\";\n\n/**\n * Removes and returns a segment of a linked list as a new list.\n *\n * This operation modifies the original list by removing the specified\n * range of nodes and returning the new list's head and tail as a tuple.\n * If `count` \\<= zero, the function returns [undefined, undefined].\n * If `count` \\> len(prev), a `TypeError` is thrown.\n *\n * @param prev - The node preceding the start of the section to be cut.\n * @param count - The number of nodes to include in the cut.\n *\n * @returns A tuple containing the head and tail of the removed segment,\n * or [undefined, undefined] if `count` \\<= zero.\n *\n * @throws - {@link TypeError}\n * thrown if `count` \\> `len(prev)`\n */\nexport function cut<N extends LinkedNode<unknown>>(\n  prev: N,\n  count: number\n): [N, N] | [undefined, undefined] {\n  if (count <= 0) {\n    return [undefined, undefined];\n  }\n  const head = prev.next!;\n  const tail = get(head, count - 1)!;\n  prev.next = tail.next;\n  tail.next = undefined;\n  return [head, tail];\n}\n\n/**\n * Iterates through a linked list, yielding each node's index\n * (position in the list) and value as a tuple.\n *\n * Iteration starts from the `node` node and continues until either the end\n * of the list, or the `end` node if provided.\n *\n * This generator function provides a convenient way to enumerate all nodes in\n * a linked list, similar to how `Array.prototype.entries()` works for arrays.\n *\n * @param node - The node at which to start iterating.\n * @param end - An optional node at which to end (exclusive).\n * If not provided, iteration continues until the end of the list.\n *\n * @throws - {@link TypeError}\n * thrown if an `end` node is provided but not encountered before the end of the list.\n */\nexport function* entries<T>(\n  node?: LinkedNode<T>,\n  end?: LinkedNode<T>\n): Generator<[number, T]> {\n  for (let i = 0; node != end; ++i) {\n    yield [i, node!.value];\n    node = node!.next;\n  }\n}\n\n/**\n * Retrieves the node at the specified distance from the given node.\n *\n * This function iterates through the linked list starting from the `node`\n * node, moving `index` nodes away in the list.\n *\n * @param node - The node from which to start.\n * @param index - The forward distance of the node to retrieve.\n *\n * @returns The node at the specified index,\n * or `undefined` if `index` does not exist.\n */\nexport function get<N extends LinkedNode<unknown>>(\n  node: N | undefined,\n  index: number\n): N | undefined {\n  if (index < 0) {\n    return undefined;\n  }\n  for (let i = 0; node != null && i < index; ++i) {\n    node = node.next;\n  }\n  return node;\n}\n\n/**\n * Determines whether a linked list contains a node with a specified value.\n *\n * Iteration starts from the `node` node and continues until either the end\n * of the list, or the `end` node if provided.\n *\n * @param node - The node from which to start searching.\n * @param value - The value to search for.\n * @param end - An optional node at which to end the search (exclusive).\n * If not provided, the search continues until the end of the list.\n *\n * @returns `true` if the specified value is found, `false` otherwise.\n *\n * @throws - {@link TypeError}\n * thrown if an `end` node is provided but not encountered before the end of the list.\n *\n */\nexport function has<T>(\n  node: LinkedNode<T> | undefined,\n  value: T,\n  end?: LinkedNode<T>\n): boolean {\n  while (node != end) {\n    if (node!.value === value) {\n      return true;\n    }\n    node = node!.next;\n  }\n  return false;\n}\n\n/**\n * Inserts a new sequence of values into a linked list right after a specified node.\n *\n * @param prev - The node in the linked list after which the new values will be inserted.\n * @param values - An iterable of values to be inserted.\n * @returns The last node that was inserted into the list, or `prev` if no values were inserted.\n */\nexport function insert<T>(\n  prev: LinkedNode<T>,\n  values: Iterable<T>\n): LinkedNode<T> {\n  // Convert values to list\n  const [head, tail, size] = toList(values);\n\n  // If no values\n  if (size <= 0) {\n    return prev;\n  }\n\n  // Add values\n  tail!.next = prev.next;\n  prev.next = head;\n\n  return tail!;\n}\n\n/**\n * Iterates through a linked list, yielding each node's index\n * (position in the list).\n *\n * Iteration starts from the `node` node and continues until either the end\n * of the list, or the `end` node if provided.\n *\n * This generator function provides a convenient way to enumerate all nodes in\n * a linked list, similar to how `Array.prototype.entries()` works for arrays.\n *\n * @param node - The node at which to start iterating.\n * @param end - An optional node at which to end (exclusive).\n * If not provided, iteration continues until the end of the list.\n *\n * @throws - {@link TypeError}\n * thrown if an `end` node is provided but not encountered before the end of the list.\n */\nexport function* keys<T>(\n  node?: LinkedNode<T>,\n  end?: LinkedNode<T>\n): Generator<number> {\n  for (let i = 0; node != end; ++i) {\n    yield i;\n    node = node!.next;\n  }\n}\n\n/**\n * Finds the tail of the linked list and the distance to it.\n *\n * This function iterates through the linked list starting from the `node`\n * node, counting each node until it reaches the tail of the list (\n * where node.next is null or undefined).\n *\n * @param node - The node from which to start counting.\n *\n * @returns a tuple with the tail and distance to it.\n */\nexport function getTail(node?: null): [undefined, -1];\nexport function getTail<N extends LinkedNode<unknown>>(node: N): [N, number];\nexport function getTail<N extends LinkedNode<unknown>>(\n  node?: N | null\n): [N, number] | [undefined, -1];\nexport function getTail<N extends LinkedNode<unknown>>(\n  node?: N | null\n): [N, number] | [undefined, -1] {\n  if (node == null) {\n    return [undefined, -1];\n  }\n  let count = 0;\n  while (node.next != null) {\n    node = node.next;\n    ++count;\n  }\n  return [node, count];\n}\n\n/**\n * Converts a linked list into an array of values.\n *\n * The conversion starts from the `node` node and includes all nodes up to the\n * end of the list, or the `end` node if provided.\n *\n * @param node - The node at which to start converting.\n * @param end - An optional node at which to end (exclusive).\n * If not provided, conversion continues until the end of the list.\n *\n * @returns An array with the values of the list from `node` to `end`.\n *\n * @throws - {@link TypeError}\n * thrown if an `end` node is provided but not encountered before the end of the list.\n */\nexport function toArray<T>(node?: LinkedNode<T>, end?: LinkedNode<T>): T[] {\n  const array: T[] = [];\n\n  while (node != end) {\n    array.push(node!.value);\n    node = node!.next;\n  }\n\n  return array;\n}\n\n/**\n * Converts an iterable collection of values into a linked list and returns\n * the head, tail and size of the list.\n *\n * If the iterable is empty, the function returns a triple containing\n * `[undefined, undefined, 0]` to indicate that no list was created.\n *\n * @param values - The iterable collection of elements.\n *\n * @returns A triple containing the head, tail and size of the list.\n * Returns `[undefined, undefined, 0]` if the iterable is empty.\n */\nexport function toList<T>(\n  values: Iterable<T>\n): [LinkedNode<T>, LinkedNode<T>, number] | [undefined, undefined, 0] {\n  const root = {} as LinkedNode<T>;\n\n  let count = 0;\n  let tail = root;\n  for (const value of values) {\n    tail.next = { value };\n    tail = tail.next;\n    ++count;\n  }\n\n  return root.next === undefined\n    ? [undefined, undefined, 0]\n    : [root.next, tail, count];\n}\n\n/**\n * Iterates through a linked list, yielding each node's value.\n *\n * Iteration starts from the `node` node and continues until either the end\n * of the list, or the `end` node if provided.\n *\n * This generator function provides a convenient way to enumerate all nodes in\n * a linked list, similar to how `Array.prototype.entries()` works for arrays.\n *\n * @param node - The node at which to start iterating.\n * @param end - An optional node at which to end (exclusive).\n * If not provided, iteration continues until the end of the list.\n *\n * @throws - {@link TypeError}\n * thrown if an `end` node is provided but not encountered before the end of the list.\n */\nexport function* values<T>(\n  head?: LinkedNode<T>,\n  end?: LinkedNode<T>\n): Generator<T> {\n  for (let i = 0; head != end; ++i) {\n    yield head!.value;\n    head = head!.next;\n  }\n}\n","import { DoublyLinkedNode } from \"../types/doublyLinkedNode\";\n\nimport { get as singlyGet, cut as singlyCut } from \"./linkedNode\";\n\n/**\n * Removes and returns a segment of a linked list as a new list.\n *\n * This operation modifies the original list by removing the specified\n * range of nodes and returning the new list's head and tail as a tuple.\n * If `count` \\<= zero, the function returns [undefined, undefined].\n * If `count` \\> len(prev), a `TypeError` is thrown.\n *\n * @param prev - The node preceding the start of the section to be cut.\n * @param count - The number of nodes to include in the cut.\n *\n * @returns A tuple containing the head and tail of the removed segment,\n * or [undefined, undefined] if `count` \\<= zero.\n *\n * @throws - {@link TypeError}\n * thrown if `count` \\> `len(prev)`\n */\nexport function cut<N extends DoublyLinkedNode<unknown>>(\n  root: N,\n  count: number\n): [N, N] | [undefined, undefined] {\n  if (count <= 0) {\n    return [undefined, undefined];\n  }\n  const [head, tail] = singlyCut(root, count) as [N, N];\n  head.prev = undefined;\n  if (root.next != null) {\n    root.next.prev = root;\n  }\n  return [head, tail];\n}\n\n/**\n * Retrieves the node at the specified distance from the given node.\n *\n * This function iterates through the linked list starting from the `node`\n * node, moving `index` nodes away in the list.\n *\n * @param node - The node from which to start.\n * @param index - The forward distance of the node to retrieve.\n *\n * @returns The node at the specified index,\n * or `undefined` if `index` does not exist.\n */\nexport function get<N extends DoublyLinkedNode<unknown>>(\n  node: N | undefined,\n  index: number\n): N | undefined {\n  if (index >= 0) {\n    return singlyGet(node, index);\n  }\n  for (let i = 0; node != null && i > index; --i) {\n    node = node.prev;\n  }\n  return node;\n}\n\n/**\n * Inserts a new sequence of values into a linked list right after a specified node.\n *\n * @param prev - The node in the linked list after which the new values will be inserted.\n * @param values - An iterable of values to be inserted.\n *\n * @returns The last node that was inserted into the list, or `prev` if no values were inserted.\n */\nexport function insert<T>(\n  prev: DoublyLinkedNode<T>,\n  values: T[]\n): DoublyLinkedNode<T> {\n  // Convert values to list\n  const [head, tail, size] = toList(values);\n\n  // If no values\n  if (size <= 0) {\n    return prev;\n  }\n\n  // Add values\n  const next = prev.next;\n  prev.next = head;\n  head!.prev = prev;\n  tail!.next = next;\n  if (next != null) {\n    next.prev = tail;\n  }\n\n  return tail!;\n}\n\n/**\n * Converts an iterable collection of values into a linked list and returns\n * the head, tail and size of the list.\n *\n * If the iterable is empty, the function returns a triple containing\n * `[undefined, undefined, 0]` to indicate that no list was created.\n *\n * @param values - The iterable collection of elements.\n *\n * @returns A triple containing the head, tail and size of the list.\n * Returns `[undefined, undefined, 0]` if the iterable is empty.\n */\nexport function toList<T>(\n  values: Iterable<T>\n):\n  | [DoublyLinkedNode<T>, DoublyLinkedNode<T>, number]\n  | [undefined, undefined, 0] {\n  const root = {} as DoublyLinkedNode<T>;\n\n  let count = 0;\n  let tail = root;\n  for (const value of values) {\n    tail.next = { prev: tail, value } as DoublyLinkedNode<T>;\n    tail = tail.next;\n    ++count;\n  }\n\n  if (count <= 0) {\n    return [undefined, undefined, 0];\n  }\n\n  root.next!.prev = undefined;\n  return [root.next!, tail, count];\n}\n","import { Bounded, BoundedEvent } from \"..\";\nimport { DoublyLinkedNode as Node } from \"../types/doublyLinkedNode\";\nimport { List } from \"../types/list\";\nimport { cut, get, toList } from \"../utils/doublyLinkedNode\";\nimport { isInfinity, isNumber, isSafeCount } from \"../utils/is\";\nimport { entries, has, keys, toArray, values } from \"../utils/linkedNode\";\nimport { addIfBelow, clamp, isInRange, toInteger } from \"../utils/math\";\nimport { CircularBase } from \"./circularBase\";\n\nexport class CircularDoublyLinkedList<T>\n  extends CircularBase<T>\n  implements Bounded<T>, List<T>\n{\n  /**\n   * The maximum number of elements that can be stored in the collection.\n   * @internal\n   */\n  protected _capacity: number;\n\n  /**\n   * The root of the linked list\n   * @internal\n   */\n  protected root: Node<T>;\n\n  /**\n   * The current size of the list (0 \\<= size \\<= capacity)\n   * @internal\n   */\n  protected _size!: number;\n\n  /**\n   * Creates a standard linked list (no capacity restriction).\n   */\n  constructor();\n  /**\n   * Creates a linked list with the given capacity.\n   *\n   * @param capacity - the list's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a linked list with the given items. Capacity is set to the number of items.\n   *\n   * @param items - the values to store in the list.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    super();\n\n    // Initialize class variables\n    this._capacity = Infinity;\n    this.root = { value: undefined } as Node<T>;\n    this.clear();\n\n    // Case 1: capacity is null, undefined or Infinity\n    capacity = capacity ?? Infinity;\n    if (isInfinity(capacity)) {\n      return;\n    }\n\n    // Case 2: capacity is zero or a positive safe integer\n    if (isNumber(capacity)) {\n      if (!isSafeCount(capacity)) {\n        throw new RangeError(\"Invalid capacity\");\n      }\n      this._capacity = capacity;\n      return;\n    }\n\n    // Case 3: capacity is iterable\n    const [head, tail, size] = toList(capacity as Iterable<T>);\n    this._capacity = size;\n    if (size > 0) {\n      this.root.next = head!;\n      this.root.prev = tail!;\n      head!.prev = this.root;\n      tail!.next = this.root;\n      this._size = size;\n    }\n  }\n\n  get capacity(): number {\n    return this._capacity;\n  }\n\n  get size(): number {\n    return this._size;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return CircularDoublyLinkedList.name;\n  }\n\n  set capacity(capacity: number) {\n    // Convert input to a number\n    capacity = +capacity;\n\n    // If input is NaN, below zero, or a non-integer\n    if (!isInfinity(capacity) && !isSafeCount(capacity)) {\n      throw new RangeError(\"Invalid capacity\");\n    }\n\n    // Update capacity\n    this._capacity = capacity;\n\n    // If current size fits within new capacity\n    if (this._size <= capacity) {\n      return;\n    }\n\n    // Shrink\n    const diff = this._size - capacity;\n    const [head, tail] = cut(this.root, diff);\n    this._size -= diff;\n\n    // Emit discarded items\n    this.emitter.emit(BoundedEvent.Overflow, toArray(head, tail!.next));\n  }\n\n  at(index: number): T | undefined {\n    // Check index\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return undefined;\n    }\n\n    // Return value\n    return this.get(index).value;\n  }\n\n  clear(): void {\n    this._size = 0;\n    this.root.next = this.root;\n    this.root.prev = this.root;\n  }\n\n  delete(index: number): boolean {\n    // Check index\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return false;\n    }\n\n    // Delete value\n    const node = this.get(index);\n    node.prev!.next = node.next;\n    node.next!.prev = node.prev;\n    --this._size;\n\n    return true;\n  }\n\n  entries(): IterableIterator<[number, T]> {\n    return entries(this.root.next, this.root);\n  }\n\n  fill(value: T, start?: number, end?: number): this {\n    // Sanitize start\n    start = toInteger(start, 0);\n    start = clamp(addIfBelow(start, this._size), 0, this._size);\n\n    // Sanitize end\n    end = toInteger(end, this._size);\n    end = clamp(addIfBelow(end, this._size), 0, this._size);\n\n    // Update values\n    let node = this.get(start);\n    while (start < end) {\n      node.value = value;\n      node = node.next!;\n      ++start;\n    }\n\n    return this;\n  }\n\n  forEach(\n    callbackfn: (value: T, index: number, list: this) => void,\n    thisArg?: unknown\n  ): void {\n    let node = this.root;\n    for (let i = 0; i < this._size; ++i) {\n      node = node.next!;\n      callbackfn.call(thisArg, node.value, i, this);\n    }\n  }\n\n  has(value: T): boolean {\n    return has(this.root.next, value, this.root);\n  }\n\n  keys(): IterableIterator<number> {\n    return keys(this.root.next, this.root);\n  }\n\n  pop(): T | undefined {\n    // Check if empty\n    if (this._size <= 0) {\n      return undefined;\n    }\n\n    // Remove tail\n    const node = this.root.prev!;\n    node.prev!.next = node.next;\n    node.next!.prev = node.prev;\n    --this._size;\n\n    // Return value\n    return node.value;\n  }\n\n  push(...values: T[]): number {\n    // Case 1: No values\n    const N = values.length;\n    if (N <= 0) {\n      return this._size;\n    }\n\n    // Case 2: Zero capacity\n    const capacity = this._capacity;\n    if (capacity <= 0) {\n      this.emitter.emit(BoundedEvent.Overflow, values);\n      return this._size;\n    }\n\n    // Add values\n    this.append(this.root.prev!, values);\n\n    // Return size\n    return this._size;\n  }\n\n  set(index: number, value: T): T | undefined {\n    // Check index\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return undefined;\n    }\n\n    // Update node\n    const node = this.get(index);\n    const prevValue = node.value;\n    node.value = value;\n\n    // Return previous value\n    return prevValue;\n  }\n\n  shift(): T | undefined {\n    // Check if empty\n    if (this._size <= 0) {\n      return undefined;\n    }\n\n    // Remove head\n    const head = this.root.next!;\n    head.prev!.next = head.next;\n    head.next!.prev = head.prev;\n    --this._size;\n\n    // Return value\n    return head.value;\n  }\n\n  slice(start?: number, end?: number): CircularDoublyLinkedList<T> {\n    const out = new CircularDoublyLinkedList<T>();\n\n    // Check if empty\n    if (this._size <= 0) {\n      return out;\n    }\n\n    // Sanitize start\n    start = toInteger(start, 0);\n    start = clamp(addIfBelow(start, this._size), 0, this._size);\n\n    // Sanitize end\n    end = toInteger(end, this._size);\n    end = clamp(addIfBelow(end, this._size), 0, this._size);\n\n    // Add values to output\n    let prev = this.get(start - 1);\n    while (start < end) {\n      prev = prev.next!;\n      out.push(prev.value);\n      ++start;\n    }\n\n    // Return new list\n    return out;\n  }\n\n  splice(\n    start: number,\n    deleteCount?: number,\n    ...items: T[]\n  ): CircularDoublyLinkedList<T> {\n    const out = new CircularDoublyLinkedList<T>();\n\n    // Sanitize start\n    start = toInteger(start, 0);\n    start = clamp(addIfBelow(start, this._size), 0, this._size);\n\n    // Sanitize deleteCount\n    deleteCount = toInteger(deleteCount, 0);\n    deleteCount = clamp(deleteCount, 0, this._size - start);\n\n    // Get prev node\n    const prev = this.get(start - 1);\n\n    // Delete values\n    if (deleteCount > 0) {\n      const [head, tail] = cut(prev, deleteCount);\n      this._size -= deleteCount;\n      head!.prev = out.root;\n      tail!.next = out.root;\n      out.root.next = head;\n      out.root.prev = tail;\n      out._size = deleteCount;\n    }\n\n    // Add values\n    this.append(prev, items);\n    return out;\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return values(this.root.next, this.root);\n  }\n\n  unshift(...values: T[]): number {\n    // Case 1: No values\n    const N = values.length;\n    if (N <= 0) {\n      return this._size;\n    }\n\n    // Case 2: Zero capacity\n    const capacity = this._capacity;\n    if (capacity <= 0) {\n      this.emitter.emit(BoundedEvent.Overflow, values);\n      return this._size;\n    }\n\n    // Add values\n    this.prepend(this.root.next!, values);\n\n    // Return size\n    return this._size;\n  }\n\n  values(): IterableIterator<T> {\n    return values(this.root.next, this.root);\n  }\n\n  /**\n   * @internal\n   */\n  protected append(tail: Node<T>, values: T[]): Node<T> {\n    const root = this.root;\n    const next = tail.next!;\n    const evicted: T[] = [];\n    const capacity = this._capacity;\n\n    // Add values\n    let size = this._size;\n    const N = values.length;\n    for (let i = 0; i < N; ++i) {\n      const curr = { prev: tail, value: values[i] } as Node<T>;\n      tail.next = curr;\n      tail = curr;\n      if (size < capacity) {\n        ++size;\n      } else {\n        evicted.push(root.next!.value);\n        root.next = root.next!.next;\n      }\n    }\n    tail.next = next;\n    next.prev = tail;\n    root.next!.prev = root;\n\n    // Emit evicted items\n    if (evicted.length > 0) {\n      this.emitter.emit(BoundedEvent.Overflow, evicted);\n    }\n\n    // Update size\n    this._size = size;\n\n    // Return last node\n    return tail;\n  }\n\n  /**\n   * @internal\n   */\n  protected get(index: number): Node<T> {\n    index -= index <= this._size / 2 ? -1 : this._size;\n    return get(this.root, index)!;\n  }\n\n  /**\n   * @internal\n   */\n  protected prepend(next: Node<T>, values: T[]): Node<T> {\n    const root = this.root;\n    const prev = next.prev!;\n    const evicted: T[] = [];\n    const capacity = this._capacity;\n\n    // Add values\n    let size = this._size;\n    for (let i = values.length - 1; i >= 0; --i) {\n      const curr = { next, value: values[i] } as Node<T>;\n      next.prev = curr;\n      next = curr;\n      if (size < capacity) {\n        ++size;\n      } else {\n        evicted.push(root.prev!.value);\n        root.prev = root.prev!.prev;\n      }\n    }\n    next.prev = prev;\n    prev.next = next;\n    root.prev!.next = root;\n\n    // Emit evicted items\n    if (evicted.length > 0) {\n      this.emitter.emit(BoundedEvent.Overflow, evicted.reverse());\n    }\n\n    // Update size\n    this._size = size;\n\n    // Return last node\n    return next;\n  }\n}\n","import { BoundedEvent } from \"../types/boundedEvent\";\nimport { Bounded } from \"../types/bounded\";\nimport { Deque } from \"../types/deque\";\n\nimport { CircularDoublyLinkedList } from \"./circularDoublyLinkedList\";\n\n/**\n * A circular deque is similar to a traditional deque, but uses a fixed-size,\n * circular buffer. When the deque reaches its maximum capacity and a new\n * element is added, the oldest is discarded, thus maintaining its size.\n *\n * This structure efficiently utilizes memory for applications where only the\n * most recent additions are of interest and older data can be discarded.\n *\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularLinkedDeque<T> implements Bounded<T>, Deque<T> {\n  /**\n   * @internal\n   */\n  protected list: CircularDoublyLinkedList<T>;\n\n  /**\n   * Creates a new stack with `capacity` defaulted to `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new stack with the given capacity.\n   *\n   * @param capacity - the stack's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new stack. Initial capacity is the number of items given.\n   *\n   * @param items - the values to store in the stack.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    this.list = new CircularDoublyLinkedList(capacity as number);\n  }\n\n  get capacity(): number {\n    return this.list.capacity;\n  }\n\n  get size(): number {\n    return this.list.size;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return CircularLinkedDeque.name;\n  }\n\n  set capacity(capacity: number) {\n    this.list.capacity = capacity;\n  }\n\n  first(): T | undefined {\n    return this.list.at(0);\n  }\n\n  front(): T | undefined {\n    return this.list.at(0);\n  }\n\n  clear(): void {\n    this.list.clear();\n  }\n\n  entries(): IterableIterator<[number, T]> {\n    return this.list.entries();\n  }\n\n  forEach(\n    callbackfn: (value: T, index: number, collection: this) => void,\n    thisArg?: unknown\n  ): void {\n    this.list.forEach((v, i) => callbackfn.call(thisArg, v, i, this), thisArg);\n  }\n\n  has(value: T): boolean {\n    return this.list.has(value);\n  }\n\n  keys(): IterableIterator<number> {\n    return this.list.keys();\n  }\n\n  last(): T | undefined {\n    return this.list.at(-1);\n  }\n\n  pop(): T | undefined {\n    return this.list.pop();\n  }\n\n  push(...elems: T[]): number {\n    return this.list.push(...elems);\n  }\n\n  shift(): T | undefined {\n    return this.list.shift();\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.values();\n  }\n\n  top(): T | undefined {\n    return this.list.at(-1);\n  }\n\n  unshift(...elems: T[]): number {\n    return this.list.unshift(...elems);\n  }\n\n  values(): IterableIterator<T> {\n    return this.list.values();\n  }\n\n  addListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.addListener(event, listener);\n    return this;\n  }\n\n  on(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.on(event, listener);\n    return this;\n  }\n\n  prependListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.prependListener(event, listener);\n    return this;\n  }\n\n  removeListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.removeListener(event, listener);\n    return this;\n  }\n}\n","import { Bounded, BoundedEvent } from \"..\";\nimport { LinkedNode as Node } from \"../types/linkedNode\";\nimport { List } from \"../types/list\";\nimport { isInfinity, isNumber, isSafeCount } from \"../utils/is\";\nimport {\n  cut,\n  entries,\n  get,\n  has,\n  keys,\n  toArray,\n  toList,\n  values,\n} from \"../utils/linkedNode\";\nimport { addIfBelow, clamp, isInRange, toInteger } from \"../utils/math\";\nimport { CircularBase } from \"./circularBase\";\n\nexport class CircularLinkedList<T>\n  extends CircularBase<T>\n  implements Bounded<T>, List<T>\n{\n  /**\n   * The maximum number of elements that can be stored in the collection.\n   * @internal\n   */\n  protected _capacity: number;\n\n  /**\n   * The root of the linked list\n   * @internal\n   */\n  protected root: Node<T>;\n\n  /**\n   * The current size of the list (0 \\<= size \\<= capacity)\n   * @internal\n   */\n  protected _size!: number;\n\n  /**\n   * The last node in the linked list.\n   * @internal\n   */\n  protected tail!: Node<T>;\n\n  /**\n   * Creates a standard linked list (no capacity restriction).\n   */\n  constructor();\n  /**\n   * Creates a linked list with the given capacity.\n   *\n   * @param capacity - the list's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a linked list with the given items. Capacity is set to the number of items.\n   *\n   * @param items - the values to store in the list.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    super();\n\n    // Initialize class variables\n    this._capacity = Infinity;\n    this.root = { value: undefined } as Node<T>;\n    this.clear();\n\n    // Case 1: capacity is null, undefined or Infinity\n    capacity = capacity ?? Infinity;\n    if (isInfinity(capacity)) {\n      return;\n    }\n\n    // Case 2: capacity is zero or a positive safe integer\n    if (isNumber(capacity)) {\n      if (!isSafeCount(capacity)) {\n        throw new RangeError(\"Invalid capacity\");\n      }\n      this._capacity = capacity;\n      return;\n    }\n\n    // Case 3: capacity is iterable\n    const [head, tail, size] = toList(capacity as Iterable<T>);\n    this._capacity = size;\n    if (size > 0) {\n      this.root.next = head;\n      this.tail = tail!;\n      this._size = size;\n    }\n  }\n\n  get capacity(): number {\n    return this._capacity;\n  }\n\n  get size(): number {\n    return this._size;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return CircularLinkedList.name;\n  }\n\n  set capacity(capacity: number) {\n    // Convert input to a number\n    capacity = +capacity;\n\n    // If input is NaN, below zero, or a non-integer\n    if (!isInfinity(capacity) && !isSafeCount(capacity)) {\n      throw new RangeError(\"Invalid capacity\");\n    }\n\n    // Update capacity\n    this._capacity = capacity;\n\n    // If current size fits within new capacity\n    if (this._size <= capacity) {\n      return;\n    }\n\n    // Shrink\n    const diff = this._size - capacity;\n    const [head] = cut(this.root, diff);\n    this._size -= diff;\n\n    // Update tail, if needed\n    if (this._size <= 0) {\n      this.tail = this.root;\n    }\n\n    // Emit discarded items\n    this.emitter.emit(BoundedEvent.Overflow, toArray(head));\n  }\n\n  at(index?: number): T | undefined {\n    // Check index\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return undefined;\n    }\n\n    // If tail\n    if (++index == this._size) {\n      return this.tail.value;\n    }\n\n    // Return value\n    return get(this.root, index)!.value;\n  }\n\n  clear(): void {\n    this._size = 0;\n    this.root.next = undefined;\n    this.tail = this.root;\n  }\n\n  delete(index: number): boolean {\n    // Check index\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return false;\n    }\n\n    // Delete value\n    const prev = get(this.root, index)!;\n    prev.next = prev.next!.next;\n    --this._size;\n\n    // Update tail, if needed\n    if (index == this._size) {\n      this.tail = prev;\n    }\n\n    return true;\n  }\n\n  entries(): IterableIterator<[number, T]> {\n    return entries(this.root.next);\n  }\n\n  fill(value: T, start?: number, end?: number): this {\n    // Sanitize start\n    start = toInteger(start, 0);\n    start = clamp(addIfBelow(start, this._size), 0, this._size);\n\n    // Sanitize end\n    end = toInteger(end, this._size);\n    end = clamp(addIfBelow(end, this._size), 0, this._size);\n\n    // Update values\n    let node = get(this.root, start + 1);\n    while (start < end) {\n      node!.value = value;\n      node = node!.next;\n      ++start;\n    }\n\n    return this;\n  }\n\n  forEach(\n    callbackfn: (value: T, index: number, list: this) => void,\n    thisArg?: unknown\n  ): void {\n    let node = this.root;\n    for (let i = 0; i < this._size; ++i) {\n      node = node.next!;\n      callbackfn.call(thisArg, node.value, i, this);\n    }\n  }\n\n  has(value: T): boolean {\n    return has(this.root.next, value);\n  }\n\n  keys(): IterableIterator<number> {\n    return keys(this.root.next);\n  }\n\n  pop(): T | undefined {\n    // Check if empty\n    if (this._size <= 0) {\n      return undefined;\n    }\n\n    // Remove and update tail\n    const value = this.tail.value;\n    this.tail = get(this.root, --this._size)!;\n    this.tail.next = undefined;\n\n    // Return value\n    return value;\n  }\n\n  push(...values: T[]): number {\n    // If no values\n    const N = values.length;\n    if (N <= 0) {\n      return this._size;\n    }\n\n    // If no capacity\n    const capacity = this._capacity;\n    if (capacity <= 0) {\n      this.emitter.emit(BoundedEvent.Overflow, values);\n      return this._size;\n    }\n\n    // Add values\n    this.tail = this.append(this.tail, values);\n\n    // Return size\n    return this._size;\n  }\n\n  set(index: number, value: T): T | undefined {\n    // Check index\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return undefined;\n    }\n\n    // Update node\n    const node = get(this.root, index + 1)!;\n    const prevValue = node.value;\n    node.value = value;\n\n    // Return previous value\n    return prevValue;\n  }\n\n  shift(): T | undefined {\n    // Check if empty\n    if (this._size <= 0) {\n      return undefined;\n    }\n\n    // Remove head\n    const head = this.root.next!;\n    this.root.next = head.next;\n    --this._size;\n\n    // Update tail, if needed\n    if (this._size <= 0) {\n      this.tail = this.root;\n    }\n\n    // Return value\n    return head.value;\n  }\n\n  slice(start?: number, end?: number): CircularLinkedList<T> {\n    const out = new CircularLinkedList<T>();\n\n    // Check if empty\n    if (this._size <= 0) {\n      return out;\n    }\n\n    // Sanitize start\n    start = toInteger(start, 0);\n    start = clamp(addIfBelow(start, this._size), 0, this._size);\n\n    // Sanitize end\n    end = toInteger(end, this._size);\n    end = clamp(addIfBelow(end, this._size), 0, this._size);\n\n    // Add values to output\n    let node = get(this.root, start)!;\n    while (start < end) {\n      node = node.next!;\n      out.push(node.value);\n      ++start;\n    }\n\n    // Return new list\n    return out;\n  }\n\n  splice(\n    start: number,\n    deleteCount?: number,\n    ...items: T[]\n  ): CircularLinkedList<T> {\n    const out = new CircularLinkedList<T>();\n\n    // Sanitize start\n    start = toInteger(start, 0);\n    start = clamp(addIfBelow(start, this._size), 0, this._size);\n\n    // Sanitize deleteCount\n    deleteCount = toInteger(deleteCount, 0);\n    deleteCount = clamp(deleteCount, 0, this._size - start);\n\n    // Get prev node\n    let prev = get(this.root, start)!;\n\n    // Delete values\n    if (deleteCount > 0) {\n      const [head, tail] = cut(prev, deleteCount);\n      this._size -= deleteCount;\n      out.root.next = head;\n      out.tail = tail!;\n      out._size = deleteCount;\n    }\n\n    // Add values\n    prev = this.append(prev, items);\n\n    // Update tail, if needed\n    if (prev.next == null) {\n      this.tail = prev;\n    }\n\n    return out;\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return values(this.root.next);\n  }\n\n  unshift(...values: T[]): number {\n    // Case 1: No values\n    let N = values.length;\n    if (N <= 0) {\n      return this._size;\n    }\n\n    // Case 2: No capacity\n    const capacity = this._capacity;\n    if (capacity <= 0) {\n      this.emitter.emit(BoundedEvent.Overflow, values);\n      return this._size;\n    }\n\n    // Reduce input\n    const diff = N <= capacity ? 0 : N - capacity;\n    N -= diff;\n\n    // Case 3: Discard list overflow\n    if (this._size + N > capacity) {\n      this._size = capacity - N;\n      const prev = get(this.root, this._size)!;\n      this.emitter.emit(BoundedEvent.Overflow, toArray(prev.next));\n      prev.next = undefined;\n      this.tail = prev;\n    }\n\n    // Discard input overflow\n    if (diff > 0) {\n      this.emitter.emit(BoundedEvent.Overflow, values.slice(N));\n      values.length = N;\n    }\n\n    // Add values\n    const [head, tail] = toList(values);\n    tail!.next = this.root.next;\n    this.root.next = head;\n\n    // Update tail, if needed\n    if (this._size <= 0) {\n      this.tail = tail!;\n    }\n\n    // Update size\n    this._size += N;\n    return this._size;\n  }\n\n  values(): IterableIterator<T> {\n    return values(this.root.next);\n  }\n\n  /**\n   * @internal\n   */\n  protected append(tail: Node<T>, values: T[], minIndex = 0): Node<T> {\n    const root = this.root;\n    const next = tail.next;\n    const evicted: T[] = [];\n    const capacity = this._capacity;\n\n    // Add values\n    let size = this._size;\n    const N = values.length;\n    for (let i = minIndex; i < N; ++i) {\n      const curr = { value: values[i] } as Node<T>;\n      tail.next = curr;\n      tail = curr;\n      if (size < capacity) {\n        ++size;\n      } else {\n        evicted.push(root.next!.value);\n        root.next = root.next!.next;\n      }\n    }\n    tail.next = next;\n\n    // Emit evicted items\n    if (evicted.length > 0) {\n      this.emitter.emit(BoundedEvent.Overflow, evicted);\n    }\n\n    // Update size\n    this._size = size;\n\n    // Return last node\n    return tail;\n  }\n}\n","import { Queue } from \"../types/queue\";\nimport { Bounded } from \"../types/bounded\";\n\nimport { CircularLinkedList } from \"./circularLinkedList\";\nimport { BoundedEvent } from \"..\";\n\n/**\n * A circular queue is similar to a traditional queue, but uses a fixed-size,\n * circular buffer. When the queue reaches its maximum capacity and a new\n * element is added, the oldest is discarded, thus maintaining its size.\n *\n * This structure efficiently utilizes memory for applications where only the\n * most recent additions are of interest and older data can be discarded.\n *\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularLinkedQueue<T> implements Bounded<T>, Queue<T> {\n  /**\n   * @internal\n   */\n  protected list: CircularLinkedList<T>;\n\n  /**\n   * Creates a new stack with `capacity` defaulted to `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new stack with the given capacity.\n   *\n   * @param capacity - the stack's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new stack. Initial capacity is the number of items given.\n   *\n   * @param items - the values to store in the stack.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    this.list = new CircularLinkedList(capacity as number);\n  }\n\n  get capacity(): number {\n    return this.list.capacity;\n  }\n\n  get size(): number {\n    return this.list.size;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return CircularLinkedQueue.name;\n  }\n\n  set capacity(capacity: number) {\n    this.list.capacity = capacity;\n  }\n\n  clear(): void {\n    this.list.clear();\n  }\n\n  entries(): IterableIterator<[number, T]> {\n    return this.list.entries();\n  }\n\n  first(): T | undefined {\n    return this.list.at(0);\n  }\n\n  forEach(\n    callbackfn: (value: T, index: number, collection: this) => void,\n    thisArg?: unknown\n  ): void {\n    this.list.forEach((v, i) => callbackfn.call(thisArg, v, i, this), thisArg);\n  }\n\n  front(): T | undefined {\n    return this.list.at(0);\n  }\n\n  has(value: T): boolean {\n    return this.list.has(value);\n  }\n\n  keys(): IterableIterator<number> {\n    return this.list.keys();\n  }\n\n  push(...elems: T[]): number {\n    return this.list.push(...elems);\n  }\n\n  shift(): T | undefined {\n    return this.list.shift();\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.values();\n  }\n\n  values(): IterableIterator<T> {\n    return this.list.values();\n  }\n\n  addListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.addListener(event, listener);\n    return this;\n  }\n\n  on(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.on(event, listener);\n    return this;\n  }\n\n  prependListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.prependListener(event, listener);\n    return this;\n  }\n\n  removeListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.removeListener(event, listener);\n    return this;\n  }\n}\n","import { Stack } from \"../types/stack\";\nimport { Bounded } from \"../types/bounded\";\nimport { BoundedEvent, CircularDoublyLinkedList } from \"..\";\n\n/**\n * A circular stack is similar to a traditional stack, but uses a fixed-size,\n * circular buffer. When the stack reaches its maximum capacity and a new\n * element is added, the oldest is discarded, thus maintaining its size.\n *\n * This structure efficiently utilizes memory for applications where only the\n * most recent additions are of interest and older data can be discarded.\n *\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularLinkedStack<T> implements Bounded<T>, Stack<T> {\n  /**\n   * @internal\n   */\n  protected list: CircularDoublyLinkedList<T>;\n\n  /**\n   * Creates a new stack with `capacity` defaulted to `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new stack with the given capacity.\n   *\n   * @param capacity - the stack's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new stack. Initial capacity is the number of items given.\n   *\n   * @param items - the values to store in the stack.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    this.list = new CircularDoublyLinkedList(capacity as number);\n  }\n\n  get capacity(): number {\n    return this.list.capacity;\n  }\n\n  get size(): number {\n    return this.list.size;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return CircularLinkedStack.name;\n  }\n\n  set capacity(capacity: number) {\n    this.list.capacity = capacity;\n  }\n\n  clear(): void {\n    this.list.clear();\n  }\n\n  entries(): IterableIterator<[number, T]> {\n    return this.list.entries();\n  }\n\n  forEach(\n    callbackfn: (value: T, index: number, collection: this) => void,\n    thisArg?: unknown\n  ): void {\n    this.list.forEach((v, i) => callbackfn.call(thisArg, v, i, this), thisArg);\n  }\n\n  has(value: T): boolean {\n    return this.list.has(value);\n  }\n\n  keys(): IterableIterator<number> {\n    return this.list.keys();\n  }\n\n  last(): T | undefined {\n    return this.list.at(-1);\n  }\n\n  pop(): T | undefined {\n    return this.list.pop();\n  }\n\n  push(...elems: T[]): number {\n    return this.list.push(...elems);\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.values();\n  }\n\n  top(): T | undefined {\n    return this.list.at(-1);\n  }\n\n  values(): IterableIterator<T> {\n    return this.list.values();\n  }\n\n  addListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.addListener(event, listener);\n    return this;\n  }\n\n  on(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.on(event, listener);\n    return this;\n  }\n\n  prependListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.prependListener(event, listener);\n    return this;\n  }\n\n  removeListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.removeListener(event, listener);\n    return this;\n  }\n}\n","import { Bounded } from \"../types/bounded\";\nimport { BoundedEvent } from \"../types/boundedEvent\";\nimport { Collection } from \"../types/collection\";\nimport { isInfinity, isNumber, isSafeCount } from \"../utils/is\";\n\nimport { CircularBase } from \"./circularBase\";\n\n/**\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularMap<K, V>\n  extends CircularBase<[K, V]>\n  implements Bounded<[K, V]>, Map<K, V>, Collection<K, V>\n{\n  /**\n   * The maximum number of elements that can be stored in the collection.\n   * @internal\n   */\n  protected _capacity: number;\n\n  /**\n   * The internal map.\n   * @internal\n   */\n  protected map: Map<K, V>;\n\n  /**\n   * Creates a new map with `capacity` defaulted to `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new map with the given capacity.\n   *\n   * @param capacity - the map's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new map. Initial capacity is the number of unique items given.\n   *\n   * @param items - the values to store in the map.\n   */\n  constructor(items: Iterable<[K, V]>);\n  constructor(capacity?: number | null | Iterable<[K, V]>) {\n    super();\n\n    // Initialize class variables\n    this._capacity = Infinity;\n    this.map = new Map();\n\n    // Case 1: capacity is null, undefined or Infinity\n    capacity = capacity ?? Infinity;\n    if (isInfinity(capacity)) {\n      return;\n    }\n\n    // Case 2: capacity is zero or a safe positive integer\n    if (isNumber(capacity)) {\n      if (!isSafeCount(capacity)) {\n        throw new RangeError(\"Invalid capacity\");\n      }\n      this._capacity = capacity;\n      return;\n    }\n\n    // Case 3: capacity is iterable\n    this.map = new Map(capacity as Iterable<[K, V]>);\n    this._capacity = this.map.size;\n  }\n\n  /**\n   * @returns the maximum number of elements that can be stored.\n   */\n  get capacity(): number {\n    return this._capacity;\n  }\n\n  /**\n   * @returns the number of values in the map.\n   */\n  get size(): number {\n    return this.map.size;\n  }\n\n  /**\n   * Return the type of the object.\n   */\n  get [Symbol.toStringTag](): string {\n    return CircularMap.name;\n  }\n\n  /**\n   * The maximum number of elements that can be stored in the map.\n   */\n  set capacity(capacity: number) {\n    // Convert input to a number\n    capacity = +capacity;\n\n    // Check if input is valid\n    if (!isInfinity(capacity) && !isSafeCount(capacity)) {\n      throw new RangeError(\"Invalid capacity\");\n    }\n\n    // Check if capacity is changing\n    if (capacity === this._capacity) {\n      return;\n    }\n\n    // Update capacity\n    this._capacity = capacity;\n\n    // Check if size is within capacity\n    if (this.size <= capacity) {\n      return;\n    }\n\n    // Check if new capacity is zero\n    if (capacity === 0) {\n      const evicted = Array.from(this.map);\n      this.clear();\n      this.emitter.emit(BoundedEvent.Overflow, evicted);\n      return;\n    }\n\n    // Shrink down map.\n    const evicted: [K, V][] = [];\n    const iter = this.map.entries();\n    for (let n = this.size - capacity; n > 0; --n) {\n      const entry = iter.next().value;\n      this.map.delete(entry[0]);\n      evicted.push(entry);\n    }\n    this.emitter.emit(BoundedEvent.Overflow, evicted);\n  }\n\n  /**\n   * Removes all elements from the map.\n   */\n  clear(): void {\n    this.map.clear();\n  }\n\n  /**\n   * Deletes a specified value from the map.\n   *\n   * @returns `true` if the value existed in the map and has been removed, or `false` otherwise.\n   */\n  delete(key: K): boolean {\n    return this.map.delete(key);\n  }\n\n  /**\n   * Iterate through the map's entries.\n   *\n   * **Note:** Modifying the map during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of [key, value] pairs for every entry.\n   */\n  entries(): IterableIterator<[K, V]> {\n    return this.map.entries();\n  }\n\n  /**\n   * Performs the specified action for each value in the map.\n   *\n   * **Note:** Modifying the map during iteration may cause unexpected behavior.\n   *\n   * @param callbackfn - A function that accepts up to three arguments. It is called once per value.\n   * @param thisArg - An object to which the `this` keyword refers to in the `callbackfn` function. Defaults to `undefined`.\n   */\n  forEach(\n    callbackfn: (value: V, key: K, map: this) => void,\n    thisArg?: unknown\n  ): void {\n    for (const [key, value] of this.map.entries()) {\n      callbackfn.call(thisArg, value, key, this);\n    }\n  }\n\n  /**\n   * Returns the associated value of the given key from the map.\n   *\n   * If the associated value is an object, then you will get a reference to that object; any change made to the object will effectively modify it inside the map.\n   *\n   * @returns the value associated with the specified key, or `undefined` if no value is associated.\n   */\n  get(key: K): V | undefined {\n    return this.map.get(key);\n  }\n\n  /**\n   * Determines whether a given value is in the map.\n   *\n   * @param key - The key to search for.\n   *\n   * @returns `true` if the value was found, `false` otherwise.\n   */\n  has(key: K): boolean {\n    return this.map.has(key);\n  }\n\n  /**\n   * Iterate through the map's keys.\n   *\n   * **Note:** Modifying the map during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of the map's keys.\n   */\n  keys(): IterableIterator<K> {\n    return this.map.keys();\n  }\n\n  /**\n   * Sets the specified key-value pair in the map.\n   *\n   * @param key - the key to add\n   * @param value - the key's value.\n   */\n  set(key: K, value: V): this {\n    // Base case: map has no capacity.\n    if (this.capacity < 1) {\n      this.emitter.emit(BoundedEvent.Overflow, [[key, value]]);\n      return this;\n    }\n\n    // Evict excess items\n    const evicted: [K, V][] = [];\n    if (!this.map.delete(key) && this.size >= this.capacity) {\n      const entry = this.map.entries().next().value;\n      this.map.delete(entry[0]);\n      evicted.push(entry);\n    }\n\n    // Add value\n    this.map.set(key, value);\n\n    // Emit evicted\n    if (evicted.length > 0) {\n      this.emitter.emit(BoundedEvent.Overflow, evicted);\n    }\n\n    return this;\n  }\n\n  /**\n   * Iterate through the map's values.\n   *\n   * **Note:** Modifying the map during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of values.\n   */\n  [Symbol.iterator](): IterableIterator<[K, V]> {\n    return this.map.entries();\n  }\n\n  /**\n   * Iterate through the map's values.\n   *\n   * **Note:** Modifying the map during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of the map's values.\n   */\n  values(): IterableIterator<V> {\n    return this.map.values();\n  }\n}\n","import { BoundedEvent } from \"../types/boundedEvent\";\nimport { Queue } from \"../types/queue\";\nimport { Bounded } from \"../types/bounded\";\nimport { CircularArrayList } from \"./circularArrayList\";\n\n/**\n * A circular queue is similar to a traditional queue, but uses a fixed-size,\n * circular buffer. When the queue reaches its maximum capacity and a new\n * element is added, the oldest is discarded, thus maintaining its size.\n *\n * This structure efficiently utilizes memory for applications where only the\n * most recent additions are of interest and older data can be discarded.\n *\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularQueue<T> implements Bounded<T>, Queue<T> {\n  /**\n   * @internal\n   */\n  protected list: CircularArrayList<T>;\n\n  /**\n   * Creates a new queue. Default `capacity` is `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new queue with the given capacity.\n   *\n   * @param capacity - the queue's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new queue from the given items. `capacity` will equal the number of items.\n   *\n   * @param items - the initial values in the queue.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    this.list = new CircularArrayList(capacity as number);\n  }\n\n  get capacity(): number {\n    return this.list.capacity;\n  }\n\n  get size(): number {\n    return this.list.size;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return CircularQueue.name;\n  }\n\n  set capacity(capacity: number) {\n    this.list.capacity = capacity;\n  }\n\n  clear(): void {\n    this.list.clear();\n  }\n\n  entries(): IterableIterator<[number, T]> {\n    return this.list.entries();\n  }\n\n  first(): T | undefined {\n    return this.list.first();\n  }\n\n  forEach(\n    callbackfn: (value: T, index: number, collection: this) => void,\n    thisArg?: unknown\n  ): void {\n    return this.list.forEach((v, i) => callbackfn.call(thisArg, v, i, this));\n  }\n\n  front(): T | undefined {\n    return this.list.first();\n  }\n\n  has(value: T): boolean {\n    return this.list.has(value);\n  }\n\n  keys(): IterableIterator<number> {\n    return this.list.keys();\n  }\n\n  push(...elems: T[]): number {\n    return this.list.push(...elems);\n  }\n\n  shift(): T | undefined {\n    return this.list.shift();\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.list.values();\n  }\n\n  values(): IterableIterator<T> {\n    return this.list.values();\n  }\n\n  addListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.addListener(event, listener);\n    return this;\n  }\n\n  on(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.on(event, listener);\n    return this;\n  }\n\n  prependListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.prependListener(event, listener);\n    return this;\n  }\n\n  removeListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.removeListener(event, listener);\n    return this;\n  }\n}\n","import { Bounded } from \"../types/bounded\";\nimport { BoundedEvent } from \"../types/boundedEvent\";\nimport { Collection } from \"../types/collection\";\nimport { isInfinity, isNumber, isSafeCount } from \"../utils/is\";\n\nimport { CircularBase } from \"./circularBase\";\n\n/**\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularSet<T>\n  extends CircularBase<T>\n  implements Bounded<T>, Set<T>, Collection<T, T>\n{\n  /**\n   * The maximum number of elements that can be stored in the collection.\n   * @internal\n   */\n  protected _capacity: number;\n\n  /**\n   * The internal set.\n   * @internal\n   */\n  protected set: Set<T>;\n\n  /**\n   * Creates a new set with `capacity` defaulted to `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new set with the given capacity.\n   *\n   * @param capacity - the set's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new set. Initial capacity is the number of unique items given.\n   *\n   * @param items - the values to store in the set.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    super();\n\n    // Initialize class variables\n    this._capacity = Infinity;\n    this.set = new Set();\n\n    // Case 1: capacity is null, undefined or Infinity\n    capacity = capacity ?? Infinity;\n    if (isInfinity(capacity)) {\n      return;\n    }\n\n    // Case 2: capacity is zero or a safe positive integer\n    if (isNumber(capacity)) {\n      if (!isSafeCount(capacity)) {\n        throw new RangeError(\"Invalid capacity\");\n      }\n      this._capacity = capacity;\n      return;\n    }\n\n    // Case 3: capacity is iterable\n    this.set = new Set(capacity as Iterable<T>);\n    this._capacity = this.set.size;\n  }\n\n  /**\n   * @returns the maximum number of elements that can be stored.\n   */\n  get capacity(): number {\n    return this._capacity;\n  }\n\n  /**\n   * @returns the number of values in the set.\n   */\n  get size(): number {\n    return this.set.size;\n  }\n\n  /**\n   * Return the type of the object.\n   */\n  get [Symbol.toStringTag](): string {\n    return CircularSet.name;\n  }\n\n  /**\n   * The maximum number of elements that can be stored in the set.\n   */\n  set capacity(capacity: number) {\n    // Convert input to a number\n    capacity = +capacity;\n\n    // Check if input is valid\n    if (!isInfinity(capacity) && !isSafeCount(capacity)) {\n      throw new RangeError(\"Invalid capacity\");\n    }\n\n    // Check if capacity is changing\n    if (capacity === this._capacity) {\n      return;\n    }\n\n    // Update capacity\n    this._capacity = capacity;\n\n    // Check if set is within capacity\n    if (this.size <= capacity) {\n      return;\n    }\n\n    // Check if new capacity is zero\n    if (capacity === 0) {\n      const evicted = Array.from(this.set);\n      this.clear();\n      this.emitter.emit(BoundedEvent.Overflow, evicted);\n      return;\n    }\n\n    // Shrink down map.\n    const evicted: T[] = [];\n    const iter = this.set.values();\n    for (let n = this.size - capacity; n > 0; --n) {\n      const value = iter.next().value;\n      this.set.delete(value);\n      evicted.push(value);\n    }\n    this.emitter.emit(BoundedEvent.Overflow, evicted);\n  }\n\n  /**\n   * Adds the specified value to the set.\n   *\n   * @param value - the value to add.\n   */\n  add(value: T): this {\n    // Base case: set has no capacity.\n    if (this.capacity < 1) {\n      this.emitter.emit(BoundedEvent.Overflow, [value]);\n      return this;\n    }\n\n    // Evict excess items\n    const evicted: T[] = [];\n    if (!this.set.delete(value) && this.size >= this.capacity) {\n      const out = this.set.values().next().value;\n      this.set.delete(out);\n      evicted.push(out);\n    }\n\n    // Add value\n    this.set.add(value);\n\n    // Emit evicted\n    if (evicted.length > 0) {\n      this.emitter.emit(BoundedEvent.Overflow, evicted);\n    }\n\n    return this;\n  }\n\n  /**\n   * Removes all elements from the set.\n   */\n  clear(): void {\n    this.set.clear();\n  }\n\n  /**\n   * Deletes a specified value from the set.\n   *\n   * @returns `true` if the value existed in the set and has been removed, or `false` otherwise.\n   */\n  delete(value: T): boolean {\n    return this.set.delete(value);\n  }\n\n  /**\n   * Iterate through the set's entries.\n   *\n   * **Note:** Modifying the set during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of [key, value] pairs for every entry.\n   */\n  entries(): IterableIterator<[T, T]> {\n    return this.set.entries();\n  }\n\n  /**\n   * Performs the specified action for each value in the set.\n   *\n   * **Note:** Modifying the set during iteration may cause unexpected behavior.\n   *\n   * @param callbackfn - A function that accepts up to three arguments. It is called once per value.\n   * @param thisArg - An object to which the `this` keyword refers to in the `callbackfn` function. Defaults to `undefined`.\n   */\n  forEach(\n    callbackfn: (value: T, key: T, set: this) => void,\n    thisArg?: unknown\n  ): void {\n    for (const key of this.set.keys()) {\n      callbackfn.call(thisArg, key, key, this);\n    }\n  }\n\n  /**\n   * Determines whether a given value is in the set.\n   *\n   * @param value - The value to search for.\n   *\n   * @returns `true` if the value was found, `false` otherwise.\n   */\n  has(value: T): boolean {\n    return this.set.has(value);\n  }\n\n  /**\n   * Iterate through the set's keys.\n   *\n   * **Note:** Modifying the set during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of the set's keys.\n   */\n  keys(): IterableIterator<T> {\n    return this.set.keys();\n  }\n\n  /**\n   * Iterate through the set's values.\n   *\n   * **Note:** Modifying the set during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of the set's values.\n   */\n  values(): IterableIterator<T> {\n    return this.set.keys();\n  }\n\n  /**\n   * Iterate through the set's values.\n   *\n   * **Note:** Modifying the set during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of values.\n   */\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.set.values();\n  }\n}\n","import { BoundedEvent } from \"../types/boundedEvent\";\nimport { Stack } from \"../types/stack\";\nimport { Bounded } from \"../types/bounded\";\nimport { CircularArrayList } from \"./circularArrayList\";\n\n/**\n * A circular stack is similar to a traditional stack, but uses a fixed-size,\n * circular buffer. When the stack reaches its maximum capacity and a new\n * element is added, the oldest is discarded, thus maintaining its size.\n *\n * This structure efficiently utilizes memory for applications where only the\n * most recent additions are of interest and older data can be discarded.\n *\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularStack<T> implements Bounded<T>, Stack<T> {\n  /**\n   * @internal\n   */\n  protected list: CircularArrayList<T>;\n\n  /**\n   * Creates a new stack. Default `capacity` is `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new stack with the given capacity.\n   *\n   * @param capacity - the stack's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new stack from the given items. `capacity` will equal the number of items.\n   *\n   * @param items - the initial values in the stack.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    this.list = new CircularArrayList(capacity as number);\n  }\n\n  get capacity(): number {\n    return this.list.capacity;\n  }\n\n  get size(): number {\n    return this.list.size;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return CircularStack.name;\n  }\n\n  set capacity(capacity: number) {\n    this.list.capacity = capacity;\n  }\n\n  clear(): void {\n    this.list.clear();\n  }\n\n  entries(): IterableIterator<[number, T]> {\n    return this.list.entries();\n  }\n\n  forEach(\n    callbackfn: (value: T, index: number, collection: this) => void,\n    thisArg?: unknown\n  ): void {\n    return this.list.forEach((v, i) => callbackfn.call(thisArg, v, i, this));\n  }\n\n  has(value: T): boolean {\n    return this.list.has(value);\n  }\n\n  keys(): IterableIterator<number> {\n    return this.list.keys();\n  }\n\n  last(): T | undefined {\n    return this.list.last();\n  }\n\n  pop(): T | undefined {\n    return this.list.pop();\n  }\n\n  push(...elems: T[]): number {\n    return this.list.push(...elems);\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.list.values();\n  }\n\n  top(): T | undefined {\n    return this.list.last();\n  }\n\n  values(): IterableIterator<T> {\n    return this.list.values();\n  }\n\n  addListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.addListener(event, listener);\n    return this;\n  }\n\n  on(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.on(event, listener);\n    return this;\n  }\n\n  prependListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.prependListener(event, listener);\n    return this;\n  }\n\n  removeListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.removeListener(event, listener);\n    return this;\n  }\n}\n"],"names":["BoundedEvent","EventEmitter","CircularBase","emitter","__publicField","event","listener","ARRAY_MAX_LENGTH","isArrayLength","value","isInfinity","isNumber","isSafeCount","addIfBelow","addend","target","clamp","min","max","isInRange","toInteger","defaultValue","CircularArrayList","capacity","index","start","end","vals","ranges","i","deleteCount","ext","size","callbackfn","thisArg","N","newSize","values","prevValue","from","to","j","items","out","addCount","replaceCount","a","b","free","shifted","mid","vIndex","popped","newHead","evicted","temp","diff","tail","externalIndex","head","CircularDeque","v","elems","cut","prev","count","get","entries","node","has","keys","toArray","array","toList","root","singlyCut","singlyGet","CircularDoublyLinkedList","next","curr","CircularLinkedDeque","CircularLinkedList","minIndex","CircularLinkedQueue","CircularLinkedStack","CircularMap","iter","n","entry","key","CircularQueue","CircularSet","CircularStack"],"mappings":"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"}