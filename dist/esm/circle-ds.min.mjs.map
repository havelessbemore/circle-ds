{"version":3,"file":"circle-ds.min.mjs","sources":["../../src/types/boundedEvent.ts","../../__vite-browser-external","../../src/circle/circularBase.ts","../../src/utils/constants.ts","../../src/utils/is.ts","../../src/circle/circularDeque.ts","../../src/utils/linkedNode.ts","../../src/utils/doublyLinkedNode.ts","../../src/utils/math.ts","../../src/circle/circularDoublyLinkedList.ts","../../src/circle/circularLinkedDeque.ts","../../src/circle/circularLinkedList.ts","../../src/circle/circularLinkedQueue.ts","../../src/circle/circularLinkedStack.ts","../../src/circle/circularMap.ts","../../src/circle/circularQueue.ts","../../src/circle/circularSet.ts","../../src/circle/circularStack.ts"],"sourcesContent":["/**\n * An enumeration of event types supported by {@link Bounded} collections.\n *\n * This object defines a set of constants representing event names that can\n * be emitted by instances of collections implementing the {@link Bounded} interface.\n * These events signify specific actions or changes in the state of the collection.\n *\n * Defined events include:\n * - `Overflow`: Indicates that the collection has reached its capacity, and\n *   as a result, one or more elements have been removed to accommodate new elements.\n *   This event is triggered during operations that add elements to the collection when\n *   it exceeds its capacity, or when capacity is updated below the collection's current\n *   size. Listeners attached to this event will receive an array of elements that were\n *   removed due to the overflow. Removed elements may be sent across 1 or more event\n *   instances.\n *\n * This object is marked as `const` to ensure that its properties are read-only,\n * preventing modification of event names which could lead to inconsistencies in\n * event handling across the application.\n */\nexport const BoundedEvent = {\n  Overflow: \"overflow\",\n} as const;\n","export default {}","import EventEmitter from \"events\";\nimport { BoundedEvent } from \"../types/boundedEvent\";\nimport { ValueOf } from \"../types/valueOf\";\n\nexport class CircularBase<T> {\n  /**\n   * The event emitter.\n   * @internal\n   */\n  protected emitter: EventEmitter;\n\n  constructor(emitter = new EventEmitter()) {\n    this.emitter = emitter;\n  }\n\n  /**\n   * Appends the listener function to the listeners array for the\n   * {@link BoundedEvent.Overflow} event.\n   *\n   * * No checks are made to see if the listener has already been added.\n   * Multiple calls with the same of event + listener combination will\n   * result in the listener being added and called multiple times.\n   *\n   * * By default, event listeners are invoked in the order they are added.\n   * The `prependListener()` method can be used as an alternative to add\n   * the event listener to the beginning of the listeners array.\n   *\n   * @param event - The name of the event.\n   * @param listener - The callback function. It will\n   * receive an array of elements that have been removed due to overflow.\n   * This can happen when elements are added while the collection is at\n   * capacity, or when capacity is reduced below the current size.\n   *\n   * @returns the collection.\n   */\n  addListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this;\n  addListener(\n    event: ValueOf<typeof BoundedEvent>,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    listener: (...args: any[]) => void\n  ): this {\n    this.emitter.addListener(event, listener);\n    return this;\n  }\n\n  /**\n   * Appends the listener function to the listeners array for the\n   * {@link BoundedEvent.Overflow} event.\n   *\n   * * No checks are made to see if the listener has already been added.\n   * Multiple calls with the same of event + listener combination will\n   * result in the listener being added and called multiple times.\n   *\n   * * By default, event listeners are invoked in the order they are added.\n   * The `prependListener()` method can be used as an alternative to add\n   * the event listener to the beginning of the listeners array.\n   *\n   * @param event - The name of the event.\n   * @param listener - The callback function. It will\n   * receive an array of elements that have been removed due to overflow.\n   * This can happen when elements are added while the collection is at\n   * capacity, or when capacity is reduced below the current size.\n   *\n   * @returns the collection.\n   */\n  on(event: typeof BoundedEvent.Overflow, listener: (elems: T[]) => void): this;\n  on(\n    event: ValueOf<typeof BoundedEvent>,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    listener: (...args: any[]) => void\n  ): this {\n    this.emitter.on(event, listener);\n    return this;\n  }\n\n  /**\n   * Adds the listener function to the beginning of the listeners array for\n   * the {@link BoundedEvent.Overflow} event.\n   *\n   * * No checks are made to see if the listener has already been added.\n   * Multiple calls with the same of event + listener combination will\n   * result in the listener being added and called multiple times.\n   *\n   * * Alternatively, the `addListener()` method can be used to add\n   * the event listener to the end of the listeners array.\n   *\n   * @param event - The name of the event.\n   * @param listener - The callback function. It will\n   * receive an array of elements that have been removed due to overflow.\n   * This can happen when elements are added while the collection is at\n   * capacity, or when capacity is reduced below the current size.\n   *\n   * @returns the collection.\n   */\n  prependListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this;\n  prependListener(\n    event: ValueOf<typeof BoundedEvent>,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    listener: (...args: any[]) => void\n  ): this {\n    this.emitter.prependListener(event, listener);\n    return this;\n  }\n\n  /**\n   * Removes the specified listener from the listener array for the event.\n   *\n   * At most once instance of a listener will be removed. If a listener\n   * has been added multiple times for the same event, this method should\n   * be called once per instance.\n   *\n   * @param event - The name of the event.\n   * @param listener - The callback function.\n   *\n   * @returns the collection.\n   */\n  removeListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this;\n  removeListener(\n    event: ValueOf<typeof BoundedEvent>,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    listener: (...args: any[]) => void\n  ): this {\n    this.emitter.removeListener(event, listener);\n    return this;\n  }\n}\n","/**\n * Represents the maximum number of arguments that can be passed to a function.\n *\n * While ECMAScript specifications do not explicitly limit the number of function arguments,\n * practical limits are imposed by JavaScript engine implementations. Different engines can\n * have different maximums, so a conservative value is used to prevent runtime errors.\n *\n * For more details, see the\n * {@link https://262.ecma-international.org/14.0/#sec-list-and-record-specification-type | ECMAScript Specification},\n * section \"6.2.2 The List and Record Specification Types\".\n */\nexport const ARGS_MAX_LENGTH = 16383; // 2**14 - 1\n\n/**\n * Defines the maximum allowable length of an array.\n *\n * According to the ECMAScript specification, the length property of an array is\n * an unsigned 32-bit integer, so its range is 0 to 2**32 - 1, inclusive. Beyond this,\n * operations that modify the array length (e.g., `push`, `pop`, `unshift`, `shift`)\n * may fail or behave unexpectedly.\n *\n * For more details, see the\n * {@link https://262.ecma-international.org/14.0/#sec-arraycreate | ECMAScript Specification},\n * section \"10.4.2.2 ArrayCreate\".\n */\nexport const ARRAY_MAX_LENGTH = 4294967295; // 2**32 - 1;\n","import { ARRAY_MAX_LENGTH } from \"./constants\";\n\n/**\n * Checks if a given value is an integer within a valid array length range.\n *\n * This function is useful for validating array lengths before attempting operations\n * that could result in a `RangeError` due to invalid array size.\n *\n * @param value - The value to check.\n *\n * @returns `true` if the value is an integer within the `[0, ARRAY_MAX_LENGTH]` range, `false` otherwise.\n */\nexport function isArrayLength(value: unknown): value is number {\n  return (\n    Number.isInteger(value) &&\n    (value as number) >= 0 &&\n    (value as number) <= ARRAY_MAX_LENGTH\n  );\n}\n\n/**\n * Determines whether the provided value is a function.\n *\n * @param value - The value to check.\n *\n * @returns `true` if the value is a function, `false` otherwise.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isFunction(value: unknown): value is Function {\n  return typeof value === \"function\";\n}\n\n/**\n * Checks if a given value is positive infinity.\n *\n * @param value - The value to check.\n *\n * @returns `true` if the value is positive infinity, `false` otherwise.\n */\nexport function isInfinity(value: unknown): boolean {\n  return value === Number.POSITIVE_INFINITY;\n}\n\n/**\n * Determines whether the provided value is iterable.\n *\n * This is useful for determining if a value can be used\n * in a `for...of` loop or with spread syntax.\n *\n * @param value - The value to check.\n *\n * @returns `true` if the value implements the iterable protocol, `false` otherwise.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function isIterable(value: any): value is Iterable<unknown> {\n  return typeof value?.[Symbol.iterator] === \"function\";\n}\n\n/**\n * Determines whether the provided value is a number.\n *\n * This includes `NaN` and `Infinity`, so consider additional\n * checks if those values are not desirable.\n *\n * @param value - The value to check.\n *\n * @returns `true` if the value is of type number, `false` otherwise.\n */\nexport function isNumber(value: unknown): value is number {\n  return typeof value === \"number\";\n}\n\n/**\n * Checks if a given value is a safe integer greater than or equal to 0.\n *\n * This is useful for validating counts or sizes that must be within the safe\n * integer range to prevent precision loss.\n *\n * @param value - The value to check.\n *\n * @returns `true` if the value is a safe integer and non-negative, `false` otherwise.\n */\nexport function isSafeCount(value: unknown): value is number {\n  return Number.isSafeInteger(value) && (value as number) >= 0;\n}\n\n/**\n * Determines whether the provided value is a symbol.\n *\n * @param value - The value to check.\n *\n * @returns `true` if the value is a symbol, `false` otherwise.\n */\nexport function isSymbol(value: unknown): value is symbol {\n  return typeof value === \"symbol\";\n}\n","import { CircularBase } from \"./circularBase\";\nimport { BoundedEvent } from \"../types/boundedEvent\";\nimport { isArrayLength, isInfinity, isNumber } from \"../utils/is\";\nimport { Bounded } from \"../types/bounded\";\nimport { ARRAY_MAX_LENGTH } from \"../utils/constants\";\nimport { Deque } from \"..\";\n\n/**\n * A circular deque is similar to a traditional deque, but uses a fixed-size,\n * circular buffer. When the deque reaches its maximum capacity and a new\n * element is added, the oldest is discarded, thus maintaining its size.\n *\n * This structure efficiently utilizes memory for applications where only the\n * most recent additions are of interest and older data can be discarded.\n *\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularDeque<T>\n  extends CircularBase<T>\n  implements Bounded<T>, Deque<T>\n{\n  /**\n   * The maximum number of elements that can be stored in the collection.\n   * @internal\n   */\n  protected _capacity: number;\n\n  /**\n   * The index representing the first element.\n   * @internal\n   */\n  protected head: number;\n\n  /**\n   * Whether capacity is finite (true) or infinite (false).\n   */\n  protected isFinite: boolean;\n\n  /**\n   * The index one more than the last element.\n   * @internal\n   */\n  protected next: number;\n\n  /**\n   * The number of elements.\n   * @internal\n   */\n  protected _size: number;\n\n  /**\n   * The stored values.\n   * @internal\n   */\n  protected vals: T[];\n\n  /**\n   * Creates a new deque. Default `capacity` is `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new deque with the given capacity.\n   *\n   * @param capacity - the deque's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new deque from the given items. `capacity` will equal the number of items.\n   *\n   * @param items - the initial values in the deque.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    super();\n\n    // Initialize class variables\n    this._capacity = ARRAY_MAX_LENGTH;\n    this.head = 0;\n    this.isFinite = false;\n    this._size = 0;\n    this.next = 0;\n    this.vals = [];\n\n    // If capacity is null, undefined, or Infinity\n    capacity = capacity ?? Infinity;\n    if (isInfinity(capacity)) {\n      return;\n    }\n\n    // If capacity is a number\n    if (isNumber(capacity)) {\n      // If capacity is invalid\n      if (!isArrayLength(capacity)) {\n        throw new RangeError(\"Invalid capacity\");\n      }\n      // If capacity is valid\n      this._capacity = capacity;\n      this.isFinite = true;\n      return;\n    }\n\n    // If capacity is an iterable\n    for (const value of capacity as Iterable<T>) {\n      this.vals.push(value);\n    }\n    this._capacity = this.vals.length;\n    this.isFinite = true;\n    this._size = this._capacity;\n  }\n\n  /**\n   * @returns the maximum number of elements that can be stored.\n   */\n  get capacity(): number {\n    return this.isFinite ? this._capacity : Infinity;\n  }\n\n  /**\n   * @returns the number of elements in the collection.\n   */\n  get size(): number {\n    return this._size;\n  }\n\n  /**\n   * Return the type of the object.\n   */\n  get [Symbol.toStringTag](): string {\n    return CircularDeque.name;\n  }\n\n  /**\n   * Sets the maximum number of elements that can be stored.\n   */\n  set capacity(capacity: number) {\n    // Convert capacity to a number\n    capacity = +capacity;\n\n    // Check capacity\n    if (isInfinity(capacity)) {\n      // If capacity is Infinity\n      capacity = ARRAY_MAX_LENGTH;\n      this.isFinite = false;\n    } else if (isArrayLength(capacity)) {\n      // If capacity is valid\n      this.isFinite = true;\n    } else {\n      // If capacity is invalid\n      throw new RangeError(\"Invalid capacity\");\n    }\n\n    // Update collection\n    if (this._size < 1) {\n      // If collection is empty\n      this._capacity = capacity;\n      this.clear();\n    } else if (capacity < this._capacity) {\n      // If capacity is decreasing\n      this.shrink(capacity);\n    } else if (capacity > this._capacity) {\n      // If capacity is increasing\n      this.grow(capacity);\n    }\n  }\n\n  /**\n   * Remove all elements and resets the collection.\n   */\n  clear(): void {\n    this.head = 0;\n    this._size = 0;\n    this.next = 0;\n    this.vals.length = 0;\n  }\n\n  /**\n   * Iterate through the collection's entries.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @returns an iterable of [key, value] pairs for every entry.\n   */\n  *entries(): IterableIterator<[number, T]> {\n    for (let ext = 0; ext < this._size; ++ext) {\n      yield [ext, this.vals[(this.head + ext) % this._capacity]];\n    }\n  }\n\n  /**\n   * Get the first element in the deque.\n   *\n   * Alias for {@link front | front()}.\n   *\n   * @returns the first element, or `undefined` if empty.\n   */\n  first(): T | undefined {\n    return this.vals[this.head];\n  }\n\n  /**\n   * Performs the specified action for each element in the collection.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @param callbackfn - A function that accepts up to three arguments. It is called once per element.\n   * @param thisArg - An object to which the `this` keyword refers to in the `callbackfn` function. If omitted, `undefined` is used.\n   */\n  forEach(\n    callbackfn: (value: T, index: number, collection: this) => void,\n    thisArg?: unknown\n  ): void {\n    const N = this._size;\n    for (let ext = 0; ext < N && ext < this._size; ++ext) {\n      const value = this.vals[(this.head + ext) % this._capacity];\n      callbackfn.call(thisArg, value, ext, this);\n    }\n  }\n\n  /**\n   * Get the element at the front of the deque.\n   *\n   * Alias for {@link first | first()}.\n   *\n   * @returns the front element, or `undefined` if empty.\n   */\n  front(): T | undefined {\n    return this.vals[this.head];\n  }\n\n  /**\n   * Determines whether a given element is in the collection.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @param value - The element to search for\n   *\n   * @returns a boolean indicating if `value` was found or not\n   */\n  has(value: T): boolean {\n    const N = this._size;\n    for (let ext = 0; ext < N; ++ext) {\n      if (value === this.vals[(this.head + ext) % this._capacity]) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Iterate through the collection's keys.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @returns an iterable of keys.\n   */\n  *keys(): IterableIterator<number> {\n    for (let ext = 0; ext < this._size; ++ext) {\n      yield ext;\n    }\n  }\n\n  /**\n   * Get the last element in the deque.\n   *\n   * Alias for {@link top | top()}.\n   *\n   * @returns the last element, or `undefined` if empty.\n   */\n  last(): T | undefined {\n    return this.top();\n  }\n\n  /**\n   * Removes the last element from the deque.\n   *\n   * @returns the last element, or `undefined` if empty.\n   */\n  pop(): T | undefined {\n    if (this._size <= 0) {\n      return undefined;\n    }\n\n    const tail = this.next > 0 ? this.next - 1 : this.head + this._size - 1;\n\n    --this._size;\n    this.next = tail;\n    const value = this.vals[tail];\n    this.vals[tail] = undefined as T;\n    return value;\n  }\n\n  /**\n   * Inserts new elements at the end of the deque.\n   *\n   * @param elems - Elements to insert.\n   *\n   * @returns The new size of the deque.\n   */\n  push(...elems: T[]): number {\n    // Case 1: Zero inputs\n    const N = elems.length;\n    if (N < 1) {\n      return this._size;\n    }\n\n    // Case 2: Zero capacity\n    const capacity = this._capacity;\n    if (capacity < 1) {\n      this.emit(elems);\n      return this._size;\n    }\n\n    // Case 3: Enough free space\n    const free = capacity - this._size;\n    if (free >= N) {\n      this._push(elems, N);\n      return this._size;\n    }\n\n    // Case 4: \"Infinite\" capacity but out of space\n    if (!this.isFinite) {\n      this._push(elems, free);\n      throw new Error(\"Out of memory\");\n    }\n\n    // Remove old values\n    const diff = N - capacity;\n    this.evictHead(this.size + diff);\n    if (diff > 0) {\n      this.emit(elems.splice(0, diff));\n    }\n\n    // Add new values\n    else if (diff < 0) {\n      this._push(elems, N);\n      return this._size;\n    }\n    this.vals = elems;\n    this._size = capacity;\n    return this._size;\n  }\n\n  /**\n   * Removes the element at the front of the deque.\n   *\n   * @returns the front element, or `undefined` if empty.\n   */\n  shift(): T | undefined {\n    if (this._size <= 0) {\n      return undefined;\n    }\n\n    --this._size;\n    const value = this.vals[this.head];\n    this.vals[this.head] = undefined as T;\n    if (++this.head >= this._capacity) {\n      this.head = 0;\n      this.vals.length = this.next;\n    }\n    return value;\n  }\n\n  /**\n   * Iterate through the collection's values.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @returns an iterable of values.\n   */\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.values();\n  }\n\n  /**\n   * Inserts new elements at the end of the deque.\n   *\n   * @param elems - Elements to insert.\n   *\n   * @returns The new size of the deque.\n   */\n  unshift(...elems: T[]): number {\n    // Case 1: Zero inputs\n    const N = elems.length;\n    if (N < 1) {\n      return this._size;\n    }\n\n    // Case 2: Zero capacity\n    const capacity = this._capacity;\n    if (capacity < 1) {\n      this.emit(elems);\n      return this._size;\n    }\n\n    // Case 3: Enough free space\n    const free = capacity - this._size;\n    if (free >= N) {\n      this._unshift(elems, N);\n      return this._size;\n    }\n\n    // Case 4: \"Infinite\" capacity but out of space\n    if (!this.isFinite) {\n      this._unshift(elems, free);\n      throw new Error(\"Out of memory\");\n    }\n\n    // Remove old values\n    const diff = N - capacity;\n    this.evictTail(this.size + diff);\n    if (diff > 0) {\n      this.emit(elems.splice(N - diff, diff));\n    }\n\n    // Add new values\n    else if (diff < 0) {\n      this._unshift(elems, N);\n      return this._size;\n    }\n    this.vals = elems;\n    this._size = capacity;\n    return this._size;\n  }\n\n  /**\n   * Get the last element in the deque.\n   *\n   * Alias for {@link last | last()}.\n   *\n   * @returns the last element, or `undefined` if empty.\n   */\n  top(): T | undefined {\n    if (this._size < 1) {\n      return undefined;\n    }\n    return this.vals[(this.head + this._size - 1) % this._capacity];\n  }\n\n  /**\n   * Iterate through the collection's values.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @returns an iterable of values.\n   */\n  *values(): IterableIterator<T> {\n    for (let ext = 0; ext < this._size; ++ext) {\n      yield this.vals[(this.head + ext) % this._capacity];\n    }\n  }\n\n  /**\n   * Emit an event containing the items evicted from the collection.\n   *\n   * @param evicted - The items evicted from the collection.\n   */\n  protected emit(evicted: T[]): void {\n    this.emitter.emit(BoundedEvent.Overflow, evicted);\n  }\n\n  /**\n   * Removes a given number of elements from the deque.\n   * If elements are removed, the {@link BoundedEvent.Overflow} event\n   * is emitted one or more times.\n   *\n   * @param count - The number of elements to evict.\n   */\n  protected evictHead(count: number): void {\n    if (count <= 0) {\n      return;\n    }\n\n    const len = this._capacity - this.head;\n    const isNonsequential = !this.isSequential();\n\n    if (isNonsequential && len > count) {\n      this.emit(this.vals.slice(this.head, this.head + count));\n      this.vals.fill(undefined as T, this.head, this.head + count);\n      this.head += count;\n      this._size -= count;\n      return;\n    }\n\n    if (isNonsequential) {\n      this.emit(this.vals.slice(this.head, this.head + len));\n      this.vals.length = this.next;\n      this.head = 0;\n      this._size -= len;\n      if (count <= len) {\n        return;\n      }\n      count -= len;\n    }\n\n    if (count >= this._size) {\n      this.emit(this.vals.slice(this.head, this.head + this._size));\n      this.clear();\n      return;\n    }\n\n    this.emit(this.vals.slice(this.head, this.head + count));\n    this.vals.fill(undefined as T, this.head, this.head + count);\n    this.head += count;\n    this._size -= count;\n  }\n\n  /**\n   * Removes a given number of elements from the deque.\n   * If elements are removed, the {@link BoundedEvent.Overflow} event\n   * is emitted one or more times.\n   *\n   * @param count - The number of elements to evict.\n   */\n  protected evictTail(count: number): void {\n    if (count <= 0) {\n      return;\n    }\n\n    const isNonsequential = !this.isSequential();\n    if (isNonsequential && this.next > count) {\n      this.emit(this.vals.slice(this.next - count, this.next));\n      this.vals.fill(undefined as T, this.next - count, this.next);\n      this.next -= count;\n      this._size -= count;\n      return;\n    }\n\n    if (isNonsequential) {\n      this.emit(this.vals.slice(0, this.next));\n      this.vals.fill(undefined as T, 0, this.next);\n      this._size -= this.next;\n      count -= this.next;\n      this.next = 0;\n      if (count <= 0) {\n        return;\n      }\n    }\n\n    const tail = this.head + this._size;\n    if (count >= this._size) {\n      this.emit(this.vals.slice(this.head, tail));\n      this.clear();\n      return;\n    }\n\n    this.emit(this.vals.slice(tail - count, tail));\n    this.next = tail - count;\n    this.vals.length = this.next;\n    this._size -= count;\n  }\n\n  /**\n   * Grow capacity.\n   * @internal\n   *\n   * @param capacity - the new capacity\n   */\n  protected grow(capacity: number): void {\n    // Check if deque is sequential: [    H123456T    ]\n    if (this.isSequential()) {\n      this.sequentialReset(capacity);\n      return;\n    }\n\n    // Queue is not sequential: [456T    H123]\n\n    if (this._size <= this.head) {\n      // [H123456T] = A + B = N\n      const temp = this._size - this.next;\n      this.vals.copyWithin(temp, 0, this.next);\n      this.vals.copyWithin(0, this.head, this.head + temp);\n      this.vals.length = this._size;\n      this.head = 0;\n      this.next = this._size;\n    } else if (this.head + this._size <= capacity) {\n      // [        H123456T] = 2B < 2N\n      this.vals.length = this.head + this._size;\n      this.vals.copyWithin(this._capacity, 0, this.next);\n      this.vals.fill(undefined as T, 0, this.next);\n      this.next = (this.head + this._size) % capacity;\n    } /* else if (this.next + this._size <= capacity) {\n      // [    H123456T] = A + 2B = N + B < 2N\n      const temp = this._capacity - this.head;\n      this.vals.length = capacity;\n      this.vals.copyWithin(this.next, this.head, this._capacity);\n      this.vals.copyWithin(this.next + temp, 0, this.next);\n      this.vals.fill(undefined as T, 0, this.next);\n      this.vals.length = this.next + this._size;\n      this.head = this.next;\n      this.next = (this.head + this._size) % capacity;\n    } */ else {\n      // [6T      H12345] = B + D < 2B < 2N\n      const diff = capacity - this._capacity;\n      this.vals.length = capacity;\n      this.vals.copyWithin(this._capacity, 0, diff);\n      this.vals.copyWithin(0, diff, this.next);\n      const temp = Math.max(diff, this.next - diff);\n      this.vals.fill(undefined as T, temp, this.next);\n      this.next -= diff;\n    }\n\n    // Update capacity\n    this._capacity = capacity;\n  }\n\n  /**\n   * Returns whether the deque is stored sequentially in memory.\n   * @internal\n   *\n   * @returns `true` if the deque is sequential in memory, `false` otherwise.\n   */\n  protected isSequential(): boolean {\n    return this.head < this.next || this.next < 1;\n  }\n\n  /**\n   * Append new elements to the collection.\n   * @internal\n   *\n   * @param elems - The elements to append.\n   * @param max - The number of elements to append.\n   */\n  protected _push(elems: T[], max: number): void {\n    const capacity = this._capacity;\n    const vals = this.vals;\n\n    let tail = this.next;\n    for (let i = 0; i < max; ++i) {\n      vals[tail] = elems[i];\n      if (++tail >= capacity) {\n        tail = 0;\n      }\n    }\n\n    this.next = tail;\n    this._size += max;\n  }\n\n  /**\n   * Adjusts the deque to fit within the given capacity.\n   * @internal\n   *\n   * Assumes the deque is A) sequential in memory and B) size \\<= capacity.\n   *\n   * @param capacity - The new capacity.\n   *\n   * @returns `true` if the deque was reset, `false` otherwise.\n   */\n  protected sequentialReset(capacity: number): boolean {\n    const tail = this.head + this._size;\n\n    // If deque fits in current location: [    H------T    ]\n    if (tail <= capacity) {\n      this.vals.length = tail;\n      this.next = this.vals.length % capacity;\n\n      // If deque must be fully moved: [H------T    ]\n    } else if (this.head >= capacity) {\n      this.vals.copyWithin(0, this.head, tail);\n      this.vals.length = this._size;\n      this.head = 0;\n      this.next = this._size % capacity;\n\n      // If deque must be partially moved: [--T  H----]\n    } else {\n      this.vals.copyWithin(0, capacity, tail);\n      this.vals.length = capacity;\n      this.next = tail - capacity;\n    }\n\n    this._capacity = capacity;\n    return true;\n  }\n\n  /**\n   * Shrink capacity.\n   * @internal\n   *\n   * @param capacity - the new capacity\n   */\n  protected shrink(capacity: number): void {\n    // Handle overflow\n    this.evictHead(this._size - capacity);\n\n    // Check if deque is sequential: [    H123456T    ]\n    if (this.isSequential()) {\n      this.sequentialReset(capacity);\n      return;\n    }\n\n    // Shift 1st half of deque: [456T....H123] -> [456T..H123]\n    const diff = this._capacity - capacity;\n    this.vals.copyWithin(this.head - diff, this.head, this._capacity);\n    this.vals.length = capacity;\n    this.head -= diff;\n    this._capacity = capacity;\n  }\n\n  /**\n   * Append new elements to the collection.\n   * @internal\n   *\n   * @param elems - The elements to append.\n   * @param num - The number of elements to append.\n   */\n  protected _unshift(elems: T[], num: number): void {\n    const capacity = this._capacity;\n    const vals = this.vals;\n\n    let head = this.head;\n    const min = elems.length - num;\n    for (let i = elems.length - 1; i >= min; --i) {\n      if (--head < 0) {\n        head += capacity;\n      }\n      vals[head] = elems[i];\n    }\n\n    this.head = head;\n    this._size += num;\n  }\n}\n","import { LinkedNode } from \"../types/linkedNode\";\n\n/**\n * Removes and returns a segment of a linked list as a new list.\n *\n * This operation modifies the original list by removing the specified\n * range of nodes and returning the new list's head and tail as a tuple.\n * If `count` \\<= zero, the function returns [undefined, undefined].\n * If `count` \\> len(prev), a `TypeError` is thrown.\n *\n * @param prev - The node preceding the start of the section to be cut.\n * @param count - The number of nodes to include in the cut.\n *\n * @returns A tuple containing the head and tail of the removed segment,\n * or [undefined, undefined] if `count` \\<= zero.\n *\n * @throws - {@link TypeError}\n * thrown if `count` \\> `len(prev)`\n */\nexport function cut<N extends LinkedNode<unknown>>(\n  prev: N,\n  count: number\n): [N, N] | [undefined, undefined] {\n  if (count <= 0) {\n    return [undefined, undefined];\n  }\n  const head = prev.next!;\n  const tail = get(head, count - 1)!;\n  prev.next = tail.next;\n  tail.next = undefined;\n  return [head, tail];\n}\n\n/**\n * Iterates through a linked list, yielding each node's index\n * (position in the list) and value as a tuple.\n *\n * Iteration starts from the `node` node and continues until either the end\n * of the list, or the `end` node if provided.\n *\n * This generator function provides a convenient way to enumerate all nodes in\n * a linked list, similar to how `Array.prototype.entries()` works for arrays.\n *\n * @param node - The node at which to start iterating.\n * @param end - An optional node at which to end (exclusive).\n * If not provided, iteration continues until the end of the list.\n *\n * @throws - {@link TypeError}\n * thrown if an `end` node is provided but not encountered before the end of the list.\n */\nexport function* entries<T>(\n  node?: LinkedNode<T>,\n  end?: LinkedNode<T>\n): Generator<[number, T]> {\n  for (let i = 0; node != end; ++i) {\n    yield [i, node!.value];\n    node = node!.next;\n  }\n}\n\n/**\n * Retrieves the node at the specified distance from the given node.\n *\n * This function iterates through the linked list starting from the `node`\n * node, moving `index` nodes away in the list.\n *\n * @param node - The node from which to start.\n * @param index - The forward distance of the node to retrieve.\n *\n * @returns The node at the specified index,\n * or `undefined` if `index` does not exist.\n */\nexport function get<N extends LinkedNode<unknown>>(\n  node: N | undefined,\n  index: number\n): N | undefined {\n  if (index < 0) {\n    return undefined;\n  }\n  for (let i = 0; node != null && i < index; ++i) {\n    node = node.next;\n  }\n  return node;\n}\n\n/**\n * Determines whether a linked list contains a node with a specified value.\n *\n * Iteration starts from the `node` node and continues until either the end\n * of the list, or the `end` node if provided.\n *\n * @param node - The node from which to start searching.\n * @param value - The value to search for.\n * @param end - An optional node at which to end the search (exclusive).\n * If not provided, the search continues until the end of the list.\n *\n * @returns `true` if the specified value is found, `false` otherwise.\n *\n * @throws - {@link TypeError}\n * thrown if an `end` node is provided but not encountered before the end of the list.\n *\n */\nexport function has<T>(\n  node: LinkedNode<T> | undefined,\n  value: T,\n  end?: LinkedNode<T>\n): boolean {\n  while (node != end) {\n    if (node!.value === value) {\n      return true;\n    }\n    node = node!.next;\n  }\n  return false;\n}\n\n/**\n * Iterates through a linked list, yielding each node's index\n * (position in the list).\n *\n * Iteration starts from the `node` node and continues until either the end\n * of the list, or the `end` node if provided.\n *\n * This generator function provides a convenient way to enumerate all nodes in\n * a linked list, similar to how `Array.prototype.entries()` works for arrays.\n *\n * @param node - The node at which to start iterating.\n * @param end - An optional node at which to end (exclusive).\n * If not provided, iteration continues until the end of the list.\n *\n * @throws - {@link TypeError}\n * thrown if an `end` node is provided but not encountered before the end of the list.\n */\nexport function* keys<T>(\n  node?: LinkedNode<T>,\n  end?: LinkedNode<T>\n): Generator<number> {\n  for (let i = 0; node != end; ++i) {\n    yield i;\n    node = node!.next;\n  }\n}\n\n/**\n * Finds the tail of the linked list and the distance to it.\n *\n * This function iterates through the linked list starting from the `node`\n * node, counting each node until it reaches the tail of the list (\n * where node.next is null or undefined).\n *\n * @param node - The node from which to start counting.\n *\n * @returns a tuple with the tail and distance to it.\n */\nexport function getTail(node?: null): [undefined, -1];\nexport function getTail<N extends LinkedNode<unknown>>(node: N): [N, number];\nexport function getTail<N extends LinkedNode<unknown>>(\n  node?: N | null\n): [N, number] | [undefined, -1];\nexport function getTail<N extends LinkedNode<unknown>>(\n  node?: N | null\n): [N, number] | [undefined, -1] {\n  if (node == null) {\n    return [undefined, -1];\n  }\n  let count = 0;\n  while (node.next != null) {\n    node = node.next;\n    ++count;\n  }\n  return [node, count];\n}\n\n/**\n * Converts a linked list into an array of values.\n *\n * The conversion starts from the `node` node and includes all nodes up to the\n * end of the list, or the `end` node if provided.\n *\n * @param node - The node at which to start converting.\n * @param end - An optional node at which to end (exclusive).\n * If not provided, conversion continues until the end of the list.\n *\n * @returns An array with the values of the list from `node` to `end`.\n *\n * @throws - {@link TypeError}\n * thrown if an `end` node is provided but not encountered before the end of the list.\n */\nexport function toArray<T>(node?: LinkedNode<T>, end?: LinkedNode<T>): T[] {\n  const array: T[] = [];\n\n  while (node != end) {\n    array.push(node!.value);\n    node = node!.next;\n  }\n\n  return array;\n}\n\n/**\n * Converts an iterable collection of values into a linked list and returns\n * the head, tail and size of the list.\n *\n * If the iterable is empty, the function returns a triple containing\n * `[undefined, undefined, 0]` to indicate that no list was created.\n *\n * @param values - The iterable collection of elements.\n *\n * @returns A triple containing the head, tail and size of the list.\n * Returns `[undefined, undefined, 0]` if the iterable is empty.\n */\nexport function toList<T>(\n  values: Iterable<T>\n): [LinkedNode<T>, LinkedNode<T>, number] | [undefined, undefined, 0] {\n  const root = {} as LinkedNode<T>;\n\n  let count = 0;\n  let tail = root;\n  for (const value of values) {\n    tail.next = { value };\n    tail = tail.next;\n    ++count;\n  }\n\n  return root.next === undefined\n    ? [undefined, undefined, 0]\n    : [root.next, tail, count];\n}\n\n/**\n * Iterates through a linked list, yielding each node's value.\n *\n * Iteration starts from the `node` node and continues until either the end\n * of the list, or the `end` node if provided.\n *\n * This generator function provides a convenient way to enumerate all nodes in\n * a linked list, similar to how `Array.prototype.entries()` works for arrays.\n *\n * @param node - The node at which to start iterating.\n * @param end - An optional node at which to end (exclusive).\n * If not provided, iteration continues until the end of the list.\n *\n * @throws - {@link TypeError}\n * thrown if an `end` node is provided but not encountered before the end of the list.\n */\nexport function* values<T>(\n  head?: LinkedNode<T>,\n  end?: LinkedNode<T>\n): Generator<T> {\n  for (let i = 0; head != end; ++i) {\n    yield head!.value;\n    head = head!.next;\n  }\n}\n","import { DoublyLinkedNode } from \"../types/doublyLinkedNode\";\n\nimport { get as singlyGet, cut as singlyCut } from \"./linkedNode\";\n\n/**\n * Removes and returns a segment of a linked list as a new list.\n *\n * This operation modifies the original list by removing the specified\n * range of nodes and returning the new list's head and tail as a tuple.\n * If `count` \\<= zero, the function returns [undefined, undefined].\n * If `count` \\> len(prev), a `TypeError` is thrown.\n *\n * @param prev - The node preceding the start of the section to be cut.\n * @param count - The number of nodes to include in the cut.\n *\n * @returns A tuple containing the head and tail of the removed segment,\n * or [undefined, undefined] if `count` \\<= zero.\n *\n * @throws - {@link TypeError}\n * thrown if `count` \\> `len(prev)`\n */\nexport function cut<N extends DoublyLinkedNode<unknown>>(\n  root: N,\n  count: number\n): [N, N] | [undefined, undefined] {\n  if (count <= 0) {\n    return [undefined, undefined];\n  }\n  const [head, tail] = singlyCut(root, count) as [N, N];\n  head.prev = undefined;\n  if (root.next != null) {\n    root.next.prev = root;\n  }\n  return [head, tail];\n}\n\n/**\n * Retrieves the node at the specified distance from the given node.\n *\n * This function iterates through the linked list starting from the `node`\n * node, moving `index` nodes away in the list.\n *\n * @param node - The node from which to start.\n * @param index - The forward distance of the node to retrieve.\n *\n * @returns The node at the specified index,\n * or `undefined` if `index` does not exist.\n */\nexport function get<N extends DoublyLinkedNode<unknown>>(\n  node: N | undefined,\n  index: number\n): N | undefined {\n  if (index >= 0) {\n    return singlyGet(node, index);\n  }\n  for (let i = 0; node != null && i > index; --i) {\n    node = node.prev;\n  }\n  return node;\n}\n\n/**\n * Converts an iterable collection of values into a linked list and returns\n * the head, tail and size of the list.\n *\n * If the iterable is empty, the function returns a triple containing\n * `[undefined, undefined, 0]` to indicate that no list was created.\n *\n * @param values - The iterable collection of elements.\n *\n * @returns A triple containing the head, tail and size of the list.\n * Returns `[undefined, undefined, 0]` if the iterable is empty.\n */\nexport function toList<T>(\n  values: Iterable<T>\n):\n  | [DoublyLinkedNode<T>, DoublyLinkedNode<T>, number]\n  | [undefined, undefined, 0] {\n  const root = {} as DoublyLinkedNode<T>;\n\n  let count = 0;\n  let tail = root;\n  for (const value of values) {\n    tail.next = { prev: tail, value } as DoublyLinkedNode<T>;\n    tail = tail.next;\n    ++count;\n  }\n\n  if (count <= 0) {\n    return [undefined, undefined, 0];\n  }\n\n  root.next!.prev = undefined;\n  return [root.next!, tail, count];\n}\n","/**\n * Adds a specified addend to a value if the value is below a given target.\n *\n * @param value - The initial number.\n * @param addend - The number added if the value is below the target.\n * @param target - The target number for comparison. If the value is below this\n * number, the addend will be added. Defaults to 0 if not specified.\n */\nexport function addIfBelow(value: number, addend: number, target = 0): number {\n  return value >= target ? value : value + addend;\n}\n\n/**\n * Restricts a given numerical value within a specified range [min, max].\n *\n * If the provided value is less than the minimum, the minimum is returned.\n * If it is greater than the maximum, the maximum is returned. If the value\n * is within the range, the value itself is returned. An error is thrown if\n * the minimum range value is greater than the maximum range value, as this\n * represents an invalid range.\n *\n * @param value - The numerical value to clamp.\n * @param min - The minimum allowable value of the range.\n * @param max - The maximum allowable value of the range.\n *\n * @returns The clamped value within the specified range.\n *\n * @throws `RangeError` If `min` is greater than `max`.\n */\nexport function clamp(value: number, min: number, max: number): number {\n  if (min > max) {\n    throw new RangeError(\"Invalid clamp range; min must be <= max\");\n  }\n  if (value <= min) {\n    return min;\n  }\n  return value <= max ? value : max;\n}\n\n/**\n * Checks if a given numeric value falls within a specified range.\n *\n * @param value - The numeric value to check.\n * @param min - The inclusive lower bound of the range.\n * @param max - The exclusive upper bound of the range.\n *\n * @returns - `true` if `value` is within the range `[min, max)`, `false` otherwise.\n */\nexport function isInRange(value: number, min: number, max: number): boolean {\n  return value >= min && value < max;\n}\n\n/**\n * Calculates the logarithm of a given value with the specified base.\n *\n * This function uses natural logarithms (`Math.log`) for its calculations.\n * If either the value or the base is less than or equal to 0, `NaN` is returned\n * to indicate an invalid operation, as logarithms are not defined for non-positive\n * values and bases.\n *\n * @param value - The numerical value for which to calculate the logarithm. Must be positive.\n * @param base - The base of the logarithm. Must be positive.\n *\n * @returns The calculated logarithm of the value with the given base, or `NaN` for invalid inputs.\n */\nexport function log(value: number, base: number): number {\n  return value >= 0 && base > 0 ? Math.log(value) / Math.log(base) : NaN;\n}\n\n/**\n * Generates a number representing the length of a consecutive run based on a\n * probability threshold.\n *\n * This function iteratively increments a counter as long as the randomly\n * generated numbers from `randomFn` are less than the specified probability\n * threshold `p`, or until the counter reaches the maximum `max`.\n *\n * The function is useful for simulations or models that require a random yet\n * probabilistically constrained sequence length, such as simulating streaks or\n * runs in games of chance.\n *\n * @param p - The probability threshold. Defaults to 0.5.\n * @param max - The maximum value the of the run. Defaults to Infinity.\n * @param min - The starting value of the run. Defaults to 0.\n * @param randomFn - A function that generates a random number. Defaults to `Math.random`.\n *\n * @returns The length of the run.\n */\nexport function randomRun(\n  p = 0.5,\n  max = Infinity,\n  min = 0,\n  randomFn = Math.random\n): number {\n  while (min < max && randomFn() < p) {\n    ++min;\n  }\n  return min;\n}\n\n/**\n * Attempts to convert a given value to an integer.\n *\n * The function first tries to convert the value to a number. If the result\n * is not valid (i.e. `NaN`), the given `defaultValue` is returned. Otherwise,\n * the function truncates the number to an integer using `Math.trunc`.\n *\n * This is useful for ensuring numerical operations are performed on integers,\n * with a controllable fallback for invalid inputs.\n *\n * @param value - The value to convert to an integer. This can be of any type.\n * @param defaultValue - The fallback value to return if conversion fails. Defaults to 0.\n *\n * @returns The converted integer, or `defaultValue` if conversion is not possible.\n */\nexport function toInteger(value?: unknown, defaultValue = 0): number {\n  value = +value!;\n  return isNaN(value as number) ? defaultValue : Math.trunc(value as number);\n}\n","import { Bounded, BoundedEvent } from \"..\";\nimport { DoublyLinkedNode as Node } from \"../types/doublyLinkedNode\";\nimport { List } from \"../types/list\";\nimport { cut, get, toList } from \"../utils/doublyLinkedNode\";\nimport { isInfinity, isNumber, isSafeCount } from \"../utils/is\";\nimport { entries, has, keys, toArray, values } from \"../utils/linkedNode\";\nimport { addIfBelow, clamp, isInRange, toInteger } from \"../utils/math\";\nimport { CircularBase } from \"./circularBase\";\n\nexport class CircularDoublyLinkedList<T>\n  extends CircularBase<T>\n  implements Bounded<T>, List<T>\n{\n  /**\n   * The maximum number of elements that can be stored in the collection.\n   * @internal\n   */\n  protected _capacity: number;\n\n  /**\n   * The root of the linked list\n   * @internal\n   */\n  protected root: Node<T>;\n\n  /**\n   * The current size of the list (0 \\<= size \\<= capacity)\n   * @internal\n   */\n  protected _size!: number;\n\n  /**\n   * Creates a standard linked list (no capacity restriction).\n   */\n  constructor();\n  /**\n   * Creates a linked list with the given capacity.\n   *\n   * @param capacity - the list's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a linked list with the given items. Capacity is set to the number of items.\n   *\n   * @param items - the values to store in the list.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    super();\n\n    // Initialize class variables\n    this._capacity = Infinity;\n    this.root = { value: undefined } as Node<T>;\n    this.clear();\n\n    // Case 1: capacity is null, undefined or Infinity\n    capacity = capacity ?? Infinity;\n    if (isInfinity(capacity)) {\n      return;\n    }\n\n    // Case 2: capacity is zero or a positive safe integer\n    if (isNumber(capacity)) {\n      if (!isSafeCount(capacity)) {\n        throw new RangeError(\"Invalid capacity\");\n      }\n      this._capacity = capacity;\n      return;\n    }\n\n    // Case 3: capacity is iterable\n    const [head, tail, size] = toList(capacity as Iterable<T>);\n    this._capacity = size;\n    if (size > 0) {\n      this.root.next = head!;\n      this.root.prev = tail!;\n      head!.prev = this.root;\n      tail!.next = this.root;\n      this._size = size;\n    }\n  }\n\n  get capacity(): number {\n    return this._capacity;\n  }\n\n  get size(): number {\n    return this._size;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return CircularDoublyLinkedList.name;\n  }\n\n  set capacity(capacity: number) {\n    // Convert input to a number\n    capacity = +capacity;\n\n    // If input is NaN, below zero, or a non-integer\n    if (!isInfinity(capacity) && !isSafeCount(capacity)) {\n      throw new RangeError(\"Invalid capacity\");\n    }\n\n    // Update capacity\n    this._capacity = capacity;\n\n    // If current size fits within new capacity\n    if (this._size <= capacity) {\n      return;\n    }\n\n    // Shrink\n    const diff = this._size - capacity;\n    const [head, tail] = cut(this.root, diff);\n    this._size -= diff;\n\n    // Emit discarded items\n    this.emitter.emit(BoundedEvent.Overflow, toArray(head, tail!.next));\n  }\n\n  at(index: number): T | undefined {\n    // Check index\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return undefined;\n    }\n\n    // Return value\n    return this.get(index).value;\n  }\n\n  clear(): void {\n    this._size = 0;\n    this.root.next = this.root;\n    this.root.prev = this.root;\n  }\n\n  delete(index: number): boolean {\n    // Check index\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return false;\n    }\n\n    // Delete value\n    const node = this.get(index);\n    node.prev!.next = node.next;\n    node.next!.prev = node.prev;\n    --this._size;\n\n    return true;\n  }\n\n  entries(): IterableIterator<[number, T]> {\n    return entries(this.root.next, this.root);\n  }\n\n  fill(value: T, start?: number, end?: number): this {\n    // Sanitize start\n    start = toInteger(start, 0);\n    start = clamp(addIfBelow(start, this._size), 0, this._size);\n\n    // Sanitize end\n    end = toInteger(end, this._size);\n    end = clamp(addIfBelow(end, this._size), 0, this._size);\n\n    // Update values\n    let node = this.get(start);\n    while (start < end) {\n      node.value = value;\n      node = node.next!;\n      ++start;\n    }\n\n    return this;\n  }\n\n  forEach(\n    callbackfn: (value: T, index: number, list: this) => void,\n    thisArg?: unknown\n  ): void {\n    let node = this.root;\n    for (let i = 0; i < this._size; ++i) {\n      node = node.next!;\n      callbackfn.call(thisArg, node.value, i, this);\n    }\n  }\n\n  has(value: T): boolean {\n    return has(this.root.next, value, this.root);\n  }\n\n  keys(): IterableIterator<number> {\n    return keys(this.root.next, this.root);\n  }\n\n  pop(): T | undefined {\n    // Check if empty\n    if (this._size <= 0) {\n      return undefined;\n    }\n\n    // Remove tail\n    const node = this.root.prev!;\n    node.prev!.next = node.next;\n    node.next!.prev = node.prev;\n    --this._size;\n\n    // Return value\n    return node.value;\n  }\n\n  push(...values: T[]): number {\n    // Case 1: No values\n    const N = values.length;\n    if (N <= 0) {\n      return this._size;\n    }\n\n    // Case 2: Zero capacity\n    const capacity = this._capacity;\n    if (capacity <= 0) {\n      this.emitter.emit(BoundedEvent.Overflow, values);\n      return this._size;\n    }\n\n    // Add values\n    this.append(this.root.prev!, values);\n\n    // Return size\n    return this._size;\n  }\n\n  set(index: number, value: T): T | undefined {\n    // Check index\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return undefined;\n    }\n\n    // Update node\n    const node = this.get(index);\n    const prevValue = node.value;\n    node.value = value;\n\n    // Return previous value\n    return prevValue;\n  }\n\n  shift(): T | undefined {\n    // Check if empty\n    if (this._size <= 0) {\n      return undefined;\n    }\n\n    // Remove head\n    const head = this.root.next!;\n    head.prev!.next = head.next;\n    head.next!.prev = head.prev;\n    --this._size;\n\n    // Return value\n    return head.value;\n  }\n\n  slice(start?: number, end?: number): CircularDoublyLinkedList<T> {\n    const out = new CircularDoublyLinkedList<T>();\n\n    // Check if empty\n    if (this._size <= 0) {\n      return out;\n    }\n\n    // Sanitize start\n    start = toInteger(start, 0);\n    start = clamp(addIfBelow(start, this._size), 0, this._size);\n\n    // Sanitize end\n    end = toInteger(end, this._size);\n    end = clamp(addIfBelow(end, this._size), 0, this._size);\n\n    // Add values to output\n    let prev = this.get(start - 1);\n    while (start < end) {\n      prev = prev.next!;\n      out.push(prev.value);\n      ++start;\n    }\n\n    // Return new list\n    return out;\n  }\n\n  splice(\n    start: number,\n    deleteCount?: number,\n    ...items: T[]\n  ): CircularDoublyLinkedList<T> {\n    const out = new CircularDoublyLinkedList<T>();\n\n    // Check if empty\n    if (this._size <= 0) {\n      return out;\n    }\n\n    // Sanitize start\n    start = toInteger(start, 0);\n    start = clamp(addIfBelow(start, this._size), 0, this._size);\n\n    // Sanitize deleteCount\n    deleteCount = toInteger(deleteCount, 0);\n    deleteCount = clamp(deleteCount, 0, this._size - start);\n\n    // Replace values\n    const itemCount = items.length;\n    let prev = this.get(start - 1);\n    const replaceCount = Math.min(deleteCount, itemCount);\n    for (let i = 0; i < replaceCount; ++i) {\n      prev = prev.next!;\n      out.push(prev.value);\n      prev.value = items[i];\n    }\n\n    // Add values\n    if (deleteCount <= replaceCount) {\n      this.append(prev, items, replaceCount);\n      return out;\n    }\n\n    // Attach out tail to segment head\n    let tail = out.root.prev!;\n    prev.next!.prev = tail;\n    tail.next = prev.next;\n\n    // Find segment tail\n    const diff = deleteCount - replaceCount;\n    tail = get(prev, diff)!;\n\n    // Delete segment from list\n    prev.next = tail.next!;\n    prev.next.prev = prev;\n    this._size -= diff;\n\n    // Attach segment tail to out root\n    tail.next = out.root;\n    out.root.prev = tail;\n    out._size += diff;\n\n    return out;\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return values(this.root.next, this.root);\n  }\n\n  unshift(...values: T[]): number {\n    // Case 1: No values\n    const N = values.length;\n    if (N <= 0) {\n      return this._size;\n    }\n\n    // Case 2: Zero capacity\n    const capacity = this._capacity;\n    if (capacity <= 0) {\n      this.emitter.emit(BoundedEvent.Overflow, values);\n      return this._size;\n    }\n\n    // Add values\n    this.prepend(this.root.next!, values);\n\n    // Return size\n    return this._size;\n  }\n\n  values(): IterableIterator<T> {\n    return values(this.root.next, this.root);\n  }\n\n  /**\n   * @internal\n   */\n  protected append(tail: Node<T>, values: T[], minIndex = 0): Node<T> {\n    const root = this.root;\n    const next = tail.next!;\n    const evicted: T[] = [];\n    const capacity = this._capacity;\n\n    // Add values\n    let size = this._size;\n    const N = values.length;\n    for (let i = minIndex; i < N; ++i) {\n      const curr = { prev: tail, value: values[i] } as Node<T>;\n      tail.next = curr;\n      tail = curr;\n      if (size < capacity) {\n        ++size;\n      } else {\n        evicted.push(root.next!.value);\n        root.next = root.next!.next;\n      }\n    }\n    tail.next = next;\n    next.prev = tail;\n    root.next!.prev = root;\n\n    // Emit evicted items\n    if (evicted.length > 0) {\n      this.emitter.emit(BoundedEvent.Overflow, evicted);\n    }\n\n    // Update size\n    this._size = size;\n\n    // Return last node\n    return tail;\n  }\n\n  /**\n   * @internal\n   */\n  protected get(index: number): Node<T> {\n    index -= index <= this._size / 2 ? -1 : this._size;\n    return get(this.root, index)!;\n  }\n\n  /**\n   * @internal\n   */\n  protected prepend(next: Node<T>, values: T[]): Node<T> {\n    const root = this.root;\n    const prev = next.prev!;\n    const evicted: T[] = [];\n    const capacity = this._capacity;\n\n    // Add values\n    let size = this._size;\n    for (let i = values.length - 1; i >= 0; --i) {\n      const curr = { next, value: values[i] } as Node<T>;\n      next.prev = curr;\n      next = curr;\n      if (size < capacity) {\n        ++size;\n      } else {\n        evicted.push(root.prev!.value);\n        root.prev = root.prev!.prev;\n      }\n    }\n    next.prev = prev;\n    prev.next = next;\n    root.prev!.next = root;\n\n    // Emit evicted items\n    if (evicted.length > 0) {\n      this.emitter.emit(BoundedEvent.Overflow, evicted.reverse());\n    }\n\n    // Update size\n    this._size = size;\n\n    // Return last node\n    return next;\n  }\n}\n","import { BoundedEvent } from \"../types/boundedEvent\";\nimport { Bounded } from \"../types/bounded\";\nimport { Deque } from \"../types/deque\";\n\nimport { CircularDoublyLinkedList } from \"./circularDoublyLinkedList\";\n\n/**\n * A circular deque is similar to a traditional deque, but uses a fixed-size,\n * circular buffer. When the deque reaches its maximum capacity and a new\n * element is added, the oldest is discarded, thus maintaining its size.\n *\n * This structure efficiently utilizes memory for applications where only the\n * most recent additions are of interest and older data can be discarded.\n *\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularLinkedDeque<T> implements Bounded<T>, Deque<T> {\n  /**\n   * @internal\n   */\n  protected list: CircularDoublyLinkedList<T>;\n\n  /**\n   * Creates a new stack with `capacity` defaulted to `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new stack with the given capacity.\n   *\n   * @param capacity - the stack's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new stack. Initial capacity is the number of items given.\n   *\n   * @param items - the values to store in the stack.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    this.list = new CircularDoublyLinkedList(capacity as number);\n  }\n\n  get capacity(): number {\n    return this.list.capacity;\n  }\n\n  get size(): number {\n    return this.list.size;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return CircularLinkedDeque.name;\n  }\n\n  set capacity(capacity: number) {\n    this.list.capacity = capacity;\n  }\n\n  first(): T | undefined {\n    return this.list.at(0);\n  }\n\n  front(): T | undefined {\n    return this.list.at(0);\n  }\n\n  clear(): void {\n    this.list.clear();\n  }\n\n  entries(): IterableIterator<[number, T]> {\n    return this.list.entries();\n  }\n\n  forEach(\n    callbackfn: (value: T, index: number, collection: this) => void,\n    thisArg?: unknown\n  ): void {\n    this.list.forEach((v, i) => callbackfn.call(thisArg, v, i, this), thisArg);\n  }\n\n  has(value: T): boolean {\n    return this.list.has(value);\n  }\n\n  keys(): IterableIterator<number> {\n    return this.list.keys();\n  }\n\n  last(): T | undefined {\n    return this.list.at(-1);\n  }\n\n  pop(): T | undefined {\n    return this.list.pop();\n  }\n\n  push(...elems: T[]): number {\n    return this.list.push(...elems);\n  }\n\n  shift(): T | undefined {\n    return this.list.shift();\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.values();\n  }\n\n  top(): T | undefined {\n    return this.list.at(-1);\n  }\n\n  unshift(...elems: T[]): number {\n    return this.list.unshift(...elems);\n  }\n\n  values(): IterableIterator<T> {\n    return this.list.values();\n  }\n\n  addListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.addListener(event, listener);\n    return this;\n  }\n\n  on(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.on(event, listener);\n    return this;\n  }\n\n  prependListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.prependListener(event, listener);\n    return this;\n  }\n\n  removeListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.removeListener(event, listener);\n    return this;\n  }\n}\n","import { Bounded, BoundedEvent } from \"..\";\nimport { LinkedNode as Node } from \"../types/linkedNode\";\nimport { List } from \"../types/list\";\nimport { isInfinity, isNumber, isSafeCount } from \"../utils/is\";\nimport {\n  cut,\n  entries,\n  get,\n  has,\n  keys,\n  toArray,\n  toList,\n  values,\n} from \"../utils/linkedNode\";\nimport { addIfBelow, clamp, isInRange, toInteger } from \"../utils/math\";\nimport { CircularBase } from \"./circularBase\";\n\nexport class CircularLinkedList<T>\n  extends CircularBase<T>\n  implements Bounded<T>, List<T>\n{\n  /**\n   * The maximum number of elements that can be stored in the collection.\n   * @internal\n   */\n  protected _capacity: number;\n\n  /**\n   * The root of the linked list\n   * @internal\n   */\n  protected root: Node<T>;\n\n  /**\n   * The current size of the list (0 \\<= size \\<= capacity)\n   * @internal\n   */\n  protected _size!: number;\n\n  /**\n   * The last node in the linked list.\n   * @internal\n   */\n  protected tail!: Node<T>;\n\n  /**\n   * Creates a standard linked list (no capacity restriction).\n   */\n  constructor();\n  /**\n   * Creates a linked list with the given capacity.\n   *\n   * @param capacity - the list's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a linked list with the given items. Capacity is set to the number of items.\n   *\n   * @param items - the values to store in the list.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    super();\n\n    // Initialize class variables\n    this._capacity = Infinity;\n    this.root = { value: undefined } as Node<T>;\n    this.clear();\n\n    // Case 1: capacity is null, undefined or Infinity\n    capacity = capacity ?? Infinity;\n    if (isInfinity(capacity)) {\n      return;\n    }\n\n    // Case 2: capacity is zero or a positive safe integer\n    if (isNumber(capacity)) {\n      if (!isSafeCount(capacity)) {\n        throw new RangeError(\"Invalid capacity\");\n      }\n      this._capacity = capacity;\n      return;\n    }\n\n    // Case 3: capacity is iterable\n    const [head, tail, size] = toList(capacity as Iterable<T>);\n    this._capacity = size;\n    if (size > 0) {\n      this.root.next = head;\n      this.tail = tail!;\n      this._size = size;\n    }\n  }\n\n  get capacity(): number {\n    return this._capacity;\n  }\n\n  get size(): number {\n    return this._size;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return CircularLinkedList.name;\n  }\n\n  set capacity(capacity: number) {\n    // Convert input to a number\n    capacity = +capacity;\n\n    // If input is NaN, below zero, or a non-integer\n    if (!isInfinity(capacity) && !isSafeCount(capacity)) {\n      throw new RangeError(\"Invalid capacity\");\n    }\n\n    // Update capacity\n    this._capacity = capacity;\n\n    // If current size fits within new capacity\n    if (this._size <= capacity) {\n      return;\n    }\n\n    // Shrink\n    const diff = this._size - capacity;\n    const [head] = cut(this.root, diff);\n    this._size -= diff;\n\n    // Update tail, if needed\n    if (this._size <= 0) {\n      this.tail = this.root;\n    }\n\n    // Emit discarded items\n    this.emitter.emit(BoundedEvent.Overflow, toArray(head));\n  }\n\n  at(index?: number): T | undefined {\n    // Check index\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return undefined;\n    }\n\n    // If tail\n    if (++index == this._size) {\n      return this.tail.value;\n    }\n\n    // Return value\n    return get(this.root, index)!.value;\n  }\n\n  clear(): void {\n    this._size = 0;\n    this.root.next = undefined;\n    this.tail = this.root;\n  }\n\n  delete(index: number): boolean {\n    // Check index\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return false;\n    }\n\n    // Delete value\n    const prev = get(this.root, index)!;\n    prev.next = prev.next!.next;\n    --this._size;\n\n    // Update tail, if needed\n    if (index == this._size) {\n      this.tail = prev;\n    }\n\n    return true;\n  }\n\n  entries(): IterableIterator<[number, T]> {\n    return entries(this.root.next);\n  }\n\n  fill(value: T, start?: number, end?: number): this {\n    // Sanitize start\n    start = toInteger(start, 0);\n    start = clamp(addIfBelow(start, this._size), 0, this._size);\n\n    // Sanitize end\n    end = toInteger(end, this._size);\n    end = clamp(addIfBelow(end, this._size), 0, this._size);\n\n    // Update values\n    let node = get(this.root, start + 1);\n    while (start < end) {\n      node!.value = value;\n      node = node!.next;\n      ++start;\n    }\n\n    return this;\n  }\n\n  forEach(\n    callbackfn: (value: T, index: number, list: this) => void,\n    thisArg?: unknown\n  ): void {\n    let node = this.root;\n    for (let i = 0; i < this._size; ++i) {\n      node = node.next!;\n      callbackfn.call(thisArg, node.value, i, this);\n    }\n  }\n\n  has(value: T): boolean {\n    return has(this.root.next, value);\n  }\n\n  keys(): IterableIterator<number> {\n    return keys(this.root.next);\n  }\n\n  pop(): T | undefined {\n    // Check if empty\n    if (this._size <= 0) {\n      return undefined;\n    }\n\n    // Remove and update tail\n    const value = this.tail.value;\n    this.tail = get(this.root, --this._size)!;\n    this.tail.next = undefined;\n\n    // Return value\n    return value;\n  }\n\n  push(...values: T[]): number {\n    // Case 1: No values\n    const N = values.length;\n    if (N <= 0) {\n      return this._size;\n    }\n\n    // Case 2: Zero capacity\n    const capacity = this._capacity;\n    if (capacity <= 0) {\n      this.emitter.emit(BoundedEvent.Overflow, values);\n      return this._size;\n    }\n\n    // Add values\n    this.tail = this.append(this.tail, values);\n\n    // Return size\n    return this._size;\n  }\n\n  set(index: number, value: T): T | undefined {\n    // Check index\n    index = addIfBelow(toInteger(index, -Infinity), this._size);\n    if (!isInRange(index, 0, this._size)) {\n      return undefined;\n    }\n\n    // Update node\n    const node = get(this.root, index + 1)!;\n    const prevValue = node.value;\n    node.value = value;\n\n    // Return previous value\n    return prevValue;\n  }\n\n  shift(): T | undefined {\n    // Check if empty\n    if (this._size <= 0) {\n      return undefined;\n    }\n\n    // Remove head\n    const head = this.root.next!;\n    this.root.next = head.next;\n    --this._size;\n\n    // Update tail, if needed\n    if (this._size <= 0) {\n      this.tail = this.root;\n    }\n\n    // Return value\n    return head.value;\n  }\n\n  slice(start?: number, end?: number): CircularLinkedList<T> {\n    const out = new CircularLinkedList<T>();\n\n    // Check if empty\n    if (this._size <= 0) {\n      return out;\n    }\n\n    // Sanitize start\n    start = toInteger(start, 0);\n    start = clamp(addIfBelow(start, this._size), 0, this._size);\n\n    // Sanitize end\n    end = toInteger(end, this._size);\n    end = clamp(addIfBelow(end, this._size), 0, this._size);\n\n    // Add values to output\n    let node = get(this.root, start)!;\n    while (start < end) {\n      node = node.next!;\n      out.push(node.value);\n      ++start;\n    }\n\n    // Return new list\n    return out;\n  }\n\n  splice(\n    start: number,\n    deleteCount?: number,\n    ...items: T[]\n  ): CircularLinkedList<T> {\n    const out = new CircularLinkedList<T>();\n\n    // Check if empty\n    if (this._size <= 0) {\n      return out;\n    }\n\n    // Sanitize start\n    start = toInteger(start, 0);\n    start = clamp(addIfBelow(start, this._size), 0, this._size);\n\n    // Sanitize deleteCount\n    deleteCount = toInteger(deleteCount, 0);\n    deleteCount = clamp(deleteCount, 0, this._size - start);\n\n    // Get prev node\n    let prev = get(this.root, start)!;\n\n    // Delete values\n    const [head, tail] = cut(prev, deleteCount);\n    this._size -= deleteCount;\n    out.root.next = head;\n    out.tail = tail ?? out.root;\n    out._size = deleteCount;\n\n    // Add values\n    prev = this.append(prev, items);\n\n    // Update tail, if needed\n    if (prev.next == null) {\n      this.tail = prev;\n    }\n\n    return out;\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return values(this.root.next);\n  }\n\n  unshift(...values: T[]): number {\n    // Case 1: No values\n    let N = values.length;\n    if (N <= 0) {\n      return this._size;\n    }\n\n    // Case 2: No capacity\n    const capacity = this._capacity;\n    if (capacity <= 0) {\n      this.emitter.emit(BoundedEvent.Overflow, values);\n      return this._size;\n    }\n\n    // Reduce input\n    const diff = N <= capacity ? 0 : N - capacity;\n    N -= diff;\n\n    // Case 3: Discard list overflow\n    if (this._size + N > capacity) {\n      this._size = capacity - N;\n      const prev = get(this.root, this._size)!;\n      this.emitter.emit(BoundedEvent.Overflow, toArray(prev.next));\n      prev.next = undefined;\n      this.tail = prev;\n    }\n\n    // Discard input overflow\n    if (diff > 0) {\n      this.emitter.emit(BoundedEvent.Overflow, values.slice(N));\n      values.length = N;\n    }\n\n    // Add values\n    const [head, tail] = toList(values);\n    tail!.next = this.root.next;\n    this.root.next = head;\n\n    // Update tail, if needed\n    if (this._size <= 0) {\n      this.tail = tail!;\n    }\n\n    // Update size\n    this._size += N;\n    return this._size;\n  }\n\n  values(): IterableIterator<T> {\n    return values(this.root.next);\n  }\n\n  /**\n   * @internal\n   */\n  protected append(tail: Node<T>, values: T[], minIndex = 0): Node<T> {\n    const root = this.root;\n    const next = tail.next;\n    const evicted: T[] = [];\n    const capacity = this._capacity;\n\n    // Add values\n    let size = this._size;\n    const N = values.length;\n    for (let i = minIndex; i < N; ++i) {\n      const curr = { value: values[i] } as Node<T>;\n      tail.next = curr;\n      tail = curr;\n      if (size < capacity) {\n        ++size;\n      } else {\n        evicted.push(root.next!.value);\n        root.next = root.next!.next;\n      }\n    }\n    tail.next = next;\n\n    // Emit evicted items\n    if (evicted.length > 0) {\n      this.emitter.emit(BoundedEvent.Overflow, evicted);\n    }\n\n    // Update size\n    this._size = size;\n\n    // Return last node\n    return tail;\n  }\n}\n","import { Queue } from \"../types/queue\";\nimport { Bounded } from \"../types/bounded\";\n\nimport { CircularLinkedList } from \"./circularLinkedList\";\nimport { BoundedEvent } from \"..\";\n\n/**\n * A circular queue is similar to a traditional queue, but uses a fixed-size,\n * circular buffer. When the queue reaches its maximum capacity and a new\n * element is added, the oldest is discarded, thus maintaining its size.\n *\n * This structure efficiently utilizes memory for applications where only the\n * most recent additions are of interest and older data can be discarded.\n *\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularLinkedQueue<T> implements Bounded<T>, Queue<T> {\n  /**\n   * @internal\n   */\n  protected list: CircularLinkedList<T>;\n\n  /**\n   * Creates a new stack with `capacity` defaulted to `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new stack with the given capacity.\n   *\n   * @param capacity - the stack's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new stack. Initial capacity is the number of items given.\n   *\n   * @param items - the values to store in the stack.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    this.list = new CircularLinkedList(capacity as number);\n  }\n\n  get capacity(): number {\n    return this.list.capacity;\n  }\n\n  get size(): number {\n    return this.list.size;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return CircularLinkedQueue.name;\n  }\n\n  set capacity(capacity: number) {\n    this.list.capacity = capacity;\n  }\n\n  clear(): void {\n    this.list.clear();\n  }\n\n  entries(): IterableIterator<[number, T]> {\n    return this.list.entries();\n  }\n\n  first(): T | undefined {\n    return this.list.at(0);\n  }\n\n  forEach(\n    callbackfn: (value: T, index: number, collection: this) => void,\n    thisArg?: unknown\n  ): void {\n    this.list.forEach((v, i) => callbackfn.call(thisArg, v, i, this), thisArg);\n  }\n\n  front(): T | undefined {\n    return this.list.at(0);\n  }\n\n  has(value: T): boolean {\n    return this.list.has(value);\n  }\n\n  keys(): IterableIterator<number> {\n    return this.list.keys();\n  }\n\n  push(...elems: T[]): number {\n    return this.list.push(...elems);\n  }\n\n  shift(): T | undefined {\n    return this.list.shift();\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.values();\n  }\n\n  values(): IterableIterator<T> {\n    return this.list.values();\n  }\n\n  addListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.addListener(event, listener);\n    return this;\n  }\n\n  on(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.on(event, listener);\n    return this;\n  }\n\n  prependListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.prependListener(event, listener);\n    return this;\n  }\n\n  removeListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.removeListener(event, listener);\n    return this;\n  }\n}\n","import { Stack } from \"../types/stack\";\nimport { Bounded } from \"../types/bounded\";\nimport { BoundedEvent, CircularDoublyLinkedList } from \"..\";\n\n/**\n * A circular stack is similar to a traditional stack, but uses a fixed-size,\n * circular buffer. When the stack reaches its maximum capacity and a new\n * element is added, the oldest is discarded, thus maintaining its size.\n *\n * This structure efficiently utilizes memory for applications where only the\n * most recent additions are of interest and older data can be discarded.\n *\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularLinkedStack<T> implements Bounded<T>, Stack<T> {\n  /**\n   * @internal\n   */\n  protected list: CircularDoublyLinkedList<T>;\n\n  /**\n   * Creates a new stack with `capacity` defaulted to `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new stack with the given capacity.\n   *\n   * @param capacity - the stack's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new stack. Initial capacity is the number of items given.\n   *\n   * @param items - the values to store in the stack.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    this.list = new CircularDoublyLinkedList(capacity as number);\n  }\n\n  get capacity(): number {\n    return this.list.capacity;\n  }\n\n  get size(): number {\n    return this.list.size;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return CircularLinkedStack.name;\n  }\n\n  set capacity(capacity: number) {\n    this.list.capacity = capacity;\n  }\n\n  clear(): void {\n    this.list.clear();\n  }\n\n  entries(): IterableIterator<[number, T]> {\n    return this.list.entries();\n  }\n\n  forEach(\n    callbackfn: (value: T, index: number, collection: this) => void,\n    thisArg?: unknown\n  ): void {\n    this.list.forEach((v, i) => callbackfn.call(thisArg, v, i, this), thisArg);\n  }\n\n  has(value: T): boolean {\n    return this.list.has(value);\n  }\n\n  keys(): IterableIterator<number> {\n    return this.list.keys();\n  }\n\n  last(): T | undefined {\n    return this.list.at(-1);\n  }\n\n  pop(): T | undefined {\n    return this.list.pop();\n  }\n\n  push(...elems: T[]): number {\n    return this.list.push(...elems);\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.values();\n  }\n\n  top(): T | undefined {\n    return this.list.at(-1);\n  }\n\n  values(): IterableIterator<T> {\n    return this.list.values();\n  }\n\n  addListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.addListener(event, listener);\n    return this;\n  }\n\n  on(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.on(event, listener);\n    return this;\n  }\n\n  prependListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.prependListener(event, listener);\n    return this;\n  }\n\n  removeListener(\n    event: typeof BoundedEvent.Overflow,\n    listener: (elems: T[]) => void\n  ): this {\n    this.list.removeListener(event, listener);\n    return this;\n  }\n}\n","import { Bounded } from \"../types/bounded\";\nimport { BoundedEvent } from \"../types/boundedEvent\";\nimport { Collection } from \"../types/collection\";\nimport { isInfinity, isNumber, isSafeCount } from \"../utils/is\";\n\nimport { CircularBase } from \"./circularBase\";\n\n/**\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularMap<K, V>\n  extends CircularBase<[K, V]>\n  implements Bounded<[K, V]>, Map<K, V>, Collection<K, V>\n{\n  /**\n   * The maximum number of elements that can be stored in the collection.\n   * @internal\n   */\n  protected _capacity: number;\n\n  /**\n   * The internal map.\n   * @internal\n   */\n  protected map: Map<K, V>;\n\n  /**\n   * Creates a new map with `capacity` defaulted to `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new map with the given capacity.\n   *\n   * @param capacity - the map's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new map. Initial capacity is the number of unique items given.\n   *\n   * @param items - the values to store in the map.\n   */\n  constructor(items: Iterable<[K, V]>);\n  constructor(capacity?: number | null | Iterable<[K, V]>) {\n    super();\n\n    // Initialize class variables\n    this._capacity = Infinity;\n    this.map = new Map();\n\n    // Case 1: capacity is null, undefined or Infinity\n    capacity = capacity ?? Infinity;\n    if (isInfinity(capacity)) {\n      return;\n    }\n\n    // Case 2: capacity is zero or a safe positive integer\n    if (isNumber(capacity)) {\n      if (!isSafeCount(capacity)) {\n        throw new RangeError(\"Invalid capacity\");\n      }\n      this._capacity = capacity;\n      return;\n    }\n\n    // Case 3: capacity is iterable\n    this.map = new Map(capacity as Iterable<[K, V]>);\n    this._capacity = this.map.size;\n  }\n\n  /**\n   * @returns the maximum number of elements that can be stored.\n   */\n  get capacity(): number {\n    return this._capacity;\n  }\n\n  /**\n   * @returns the number of values in the map.\n   */\n  get size(): number {\n    return this.map.size;\n  }\n\n  /**\n   * Return the type of the object.\n   */\n  get [Symbol.toStringTag](): string {\n    return CircularMap.name;\n  }\n\n  /**\n   * The maximum number of elements that can be stored in the map.\n   */\n  set capacity(capacity: number) {\n    // Convert input to a number\n    capacity = +capacity;\n\n    // Check if input is valid\n    if (!isInfinity(capacity) && !isSafeCount(capacity)) {\n      throw new RangeError(\"Invalid capacity\");\n    }\n\n    // Check if capacity is changing\n    if (capacity === this._capacity) {\n      return;\n    }\n\n    // Update capacity\n    this._capacity = capacity;\n\n    // Check if size is within capacity\n    if (this.size <= capacity) {\n      return;\n    }\n\n    // Check if new capacity is zero\n    if (capacity === 0) {\n      const evicted = Array.from(this.map);\n      this.clear();\n      this.emitter.emit(BoundedEvent.Overflow, evicted);\n      return;\n    }\n\n    // Shrink down map.\n    const evicted: [K, V][] = [];\n    const iter = this.map.entries();\n    for (let n = this.size - capacity; n > 0; --n) {\n      const entry = iter.next().value;\n      this.map.delete(entry[0]);\n      evicted.push(entry);\n    }\n    this.emitter.emit(BoundedEvent.Overflow, evicted);\n  }\n\n  /**\n   * Removes all elements from the map.\n   */\n  clear(): void {\n    this.map.clear();\n  }\n\n  /**\n   * Deletes a specified value from the map.\n   *\n   * @returns `true` if the value existed in the map and has been removed, or `false` otherwise.\n   */\n  delete(key: K): boolean {\n    return this.map.delete(key);\n  }\n\n  /**\n   * Iterate through the map's entries.\n   *\n   * **Note:** Modifying the map during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of [key, value] pairs for every entry.\n   */\n  entries(): IterableIterator<[K, V]> {\n    return this.map.entries();\n  }\n\n  /**\n   * Performs the specified action for each value in the map.\n   *\n   * **Note:** Modifying the map during iteration may cause unexpected behavior.\n   *\n   * @param callbackfn - A function that accepts up to three arguments. It is called once per value.\n   * @param thisArg - An object to which the `this` keyword refers to in the `callbackfn` function. Defaults to `undefined`.\n   */\n  forEach(\n    callbackfn: (value: V, key: K, map: this) => void,\n    thisArg?: unknown\n  ): void {\n    for (const [key, value] of this.map.entries()) {\n      callbackfn.call(thisArg, value, key, this);\n    }\n  }\n\n  /**\n   * Returns the associated value of the given key from the map.\n   *\n   * If the associated value is an object, then you will get a reference to that object; any change made to the object will effectively modify it inside the map.\n   *\n   * @returns the value associated with the specified key, or `undefined` if no value is associated.\n   */\n  get(key: K): V | undefined {\n    return this.map.get(key);\n  }\n\n  /**\n   * Determines whether a given value is in the map.\n   *\n   * @param key - The key to search for.\n   *\n   * @returns `true` if the value was found, `false` otherwise.\n   */\n  has(key: K): boolean {\n    return this.map.has(key);\n  }\n\n  /**\n   * Iterate through the map's keys.\n   *\n   * **Note:** Modifying the map during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of the map's keys.\n   */\n  keys(): IterableIterator<K> {\n    return this.map.keys();\n  }\n\n  /**\n   * Sets the specified key-value pair in the map.\n   *\n   * @param key - the key to add\n   * @param value - the key's value.\n   */\n  set(key: K, value: V): this {\n    // Base case: map has no capacity.\n    if (this.capacity < 1) {\n      this.emitter.emit(BoundedEvent.Overflow, [[key, value]]);\n      return this;\n    }\n\n    // Evict excess items\n    const evicted: [K, V][] = [];\n    if (!this.map.delete(key) && this.size >= this.capacity) {\n      const entry = this.map.entries().next().value;\n      this.map.delete(entry[0]);\n      evicted.push(entry);\n    }\n\n    // Add value\n    this.map.set(key, value);\n\n    // Emit evicted\n    if (evicted.length > 0) {\n      this.emitter.emit(BoundedEvent.Overflow, evicted);\n    }\n\n    return this;\n  }\n\n  /**\n   * Iterate through the map's values.\n   *\n   * **Note:** Modifying the map during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of values.\n   */\n  [Symbol.iterator](): IterableIterator<[K, V]> {\n    return this.map.entries();\n  }\n\n  /**\n   * Iterate through the map's values.\n   *\n   * **Note:** Modifying the map during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of the map's values.\n   */\n  values(): IterableIterator<V> {\n    return this.map.values();\n  }\n}\n","import { CircularBase } from \"./circularBase\";\nimport { BoundedEvent } from \"../types/boundedEvent\";\nimport { Queue } from \"../types/queue\";\nimport { isArrayLength, isInfinity, isNumber } from \"../utils/is\";\nimport { Bounded } from \"../types/bounded\";\nimport { ARRAY_MAX_LENGTH } from \"../utils/constants\";\n\n/**\n * A circular queue is similar to a traditional queue, but uses a fixed-size,\n * circular buffer. When the queue reaches its maximum capacity and a new\n * element is added, the oldest is discarded, thus maintaining its size.\n *\n * This structure efficiently utilizes memory for applications where only the\n * most recent additions are of interest and older data can be discarded.\n *\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularQueue<T>\n  extends CircularBase<T>\n  implements Bounded<T>, Queue<T>\n{\n  /**\n   * The maximum number of elements that can be stored in the collection.\n   * @internal\n   */\n  protected _capacity: number;\n\n  /**\n   * The index representing the first element.\n   * @internal\n   */\n  protected head: number;\n\n  /**\n   * Whether capacity is finite (true) or infinite (false).\n   * @internal\n   */\n  protected isFinite: boolean;\n\n  /**\n   * The index one more than the last element.\n   * @internal\n   */\n  protected next: number;\n\n  /**\n   * The number of elements.\n   * @internal\n   */\n  protected _size: number;\n\n  /**\n   * The stored values.\n   * @internal\n   */\n  protected vals: T[];\n\n  /**\n   * Creates a new queue. Default `capacity` is `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new queue with the given capacity.\n   *\n   * @param capacity - the queue's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new queue from the given items. `capacity` will equal the number of items.\n   *\n   * @param items - the initial values in the queue.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    super();\n\n    // Initialize class variables\n    this._capacity = ARRAY_MAX_LENGTH;\n    this.head = 0;\n    this.isFinite = false;\n    this._size = 0;\n    this.next = 0;\n    this.vals = [];\n\n    // If capacity is null, undefined, or Infinity\n    capacity = capacity ?? Infinity;\n    if (isInfinity(capacity)) {\n      return;\n    }\n\n    // If capacity is a number\n    if (isNumber(capacity)) {\n      // If capacity is invalid\n      if (!isArrayLength(capacity)) {\n        throw new RangeError(\"Invalid capacity\");\n      }\n      // If capacity is valid\n      this._capacity = capacity;\n      this.isFinite = true;\n      return;\n    }\n\n    // If capacity is an iterable\n    for (const value of capacity as Iterable<T>) {\n      this.vals.push(value);\n    }\n    this._capacity = this.vals.length;\n    this.isFinite = true;\n    this._size = this._capacity;\n  }\n\n  /**\n   * @returns the maximum number of elements that can be stored.\n   */\n  get capacity(): number {\n    return this.isFinite ? this._capacity : Infinity;\n  }\n\n  /**\n   * @returns the number of elements in the collection.\n   */\n  get size(): number {\n    return this._size;\n  }\n\n  /**\n   * Return the type of the object.\n   */\n  get [Symbol.toStringTag](): string {\n    return CircularQueue.name;\n  }\n\n  /**\n   * Sets the maximum number of elements that can be stored.\n   */\n  set capacity(capacity: number) {\n    // Convert capacity to a number\n    capacity = +capacity;\n\n    // Check capacity\n    if (isInfinity(capacity)) {\n      // If capacity is Infinity\n      capacity = ARRAY_MAX_LENGTH;\n      this.isFinite = false;\n    } else if (isArrayLength(capacity)) {\n      // If capacity is valid\n      this.isFinite = true;\n    } else {\n      // If capacity is invalid\n      throw new RangeError(\"Invalid capacity\");\n    }\n\n    // Update collection\n    if (this._size < 1) {\n      // If collection is empty\n      this._capacity = capacity;\n      this.clear();\n    } else if (capacity < this._capacity) {\n      // If capacity is decreasing\n      this.shrink(capacity);\n    } else if (capacity > this._capacity) {\n      // If capacity is increasing\n      this.grow(capacity);\n    }\n  }\n\n  /**\n   * Remove all elements and resets the collection.\n   */\n  clear(): void {\n    this.head = 0;\n    this._size = 0;\n    this.next = 0;\n    this.vals.length = 0;\n  }\n\n  /**\n   * Iterate through the collection's entries.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @returns an iterable of [key, value] pairs for every entry.\n   */\n  *entries(): IterableIterator<[number, T]> {\n    for (let ext = 0; ext < this._size; ++ext) {\n      yield [ext, this.vals[(this.head + ext) % this._capacity]];\n    }\n  }\n\n  /**\n   * Get the first element in the queue.\n   *\n   * Alias for {@link front | front()}.\n   *\n   * @returns the first element, or `undefined` if empty.\n   */\n  first(): T | undefined {\n    return this.vals[this.head];\n  }\n\n  /**\n   * Performs the specified action for each element in the collection.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @param callbackfn - A function that accepts up to three arguments. It is called once per element.\n   * @param thisArg - An object to which the `this` keyword refers to in the `callbackfn` function. If omitted, `undefined` is used.\n   */\n  forEach(\n    callbackfn: (value: T, index: number, collection: this) => void,\n    thisArg?: unknown\n  ): void {\n    const N = this._size;\n    for (let ext = 0; ext < N && ext < this._size; ++ext) {\n      const value = this.vals[(this.head + ext) % this._capacity];\n      callbackfn.call(thisArg, value, ext, this);\n    }\n  }\n\n  /**\n   * Get the element at the front of the queue.\n   *\n   * Alias for {@link first | first()}.\n   *\n   * @returns the front element, or `undefined` if empty.\n   */\n  front(): T | undefined {\n    return this.vals[this.head];\n  }\n\n  /**\n   * Determines whether a given element is in the collection.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @param value - The element to search for\n   *\n   * @returns a boolean indicating if `value` was found or not\n   */\n  has(value: T): boolean {\n    const N = this._size;\n    for (let ext = 0; ext < N; ++ext) {\n      if (value === this.vals[(this.head + ext) % this._capacity]) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Iterate through the collection's keys.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @returns an iterable of keys.\n   */\n  *keys(): IterableIterator<number> {\n    for (let ext = 0; ext < this._size; ++ext) {\n      yield ext;\n    }\n  }\n\n  /**\n   * Inserts new elements at the end of the queue.\n   *\n   * @param elems - Elements to insert.\n   *\n   * @returns The new size of the queue.\n   */\n  push(...elems: T[]): number {\n    // Case 1: Zero inputs\n    const N = elems.length;\n    if (N < 1) {\n      return this._size;\n    }\n\n    // Case 2: Zero capacity\n    const capacity = this._capacity;\n    if (capacity < 1) {\n      this.emit(elems);\n      return this._size;\n    }\n\n    // Case 3: Enough free space\n    const free = capacity - this._size;\n    if (free >= N) {\n      this._push(elems, N);\n      return this._size;\n    }\n\n    // Case 4: \"Infinite\" capacity but out of space\n    if (!this.isFinite) {\n      this._push(elems, free);\n      throw new Error(\"Out of memory\");\n    }\n\n    // Remove old values\n    const diff = N - capacity;\n    this.evict(this.size + diff);\n    if (diff > 0) {\n      this.emit(elems.splice(0, diff));\n    }\n\n    // Add new values\n    else if (diff < 0) {\n      this._push(elems, N);\n      return this._size;\n    }\n    this.vals = elems;\n    this._size = capacity;\n    return this._size;\n  }\n\n  /**\n   * Removes the element at the front of the queue.\n   *\n   * @returns the front element, or `undefined` if empty.\n   */\n  shift(): T | undefined {\n    if (this._size <= 0) {\n      return undefined;\n    }\n\n    --this._size;\n    const value = this.vals[this.head];\n    this.vals[this.head] = undefined as T;\n    if (++this.head >= this._capacity) {\n      this.head = 0;\n      this.vals.length = this.next;\n    }\n    return value;\n  }\n\n  /**\n   * Iterate through the collection's values.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @returns an iterable of values.\n   */\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.values();\n  }\n\n  /**\n   * Iterate through the collection's values.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @returns an iterable of values.\n   */\n  *values(): IterableIterator<T> {\n    for (let ext = 0; ext < this._size; ++ext) {\n      yield this.vals[(this.head + ext) % this._capacity];\n    }\n  }\n\n  /**\n   * Emit an event containing the items evicted from the collection.\n   * @internal\n   *\n   * @param evicted - The items evicted from the collection.\n   */\n  protected emit(evicted: T[]): void {\n    this.emitter.emit(BoundedEvent.Overflow, evicted);\n  }\n\n  /**\n   * Removes a given number of elements from the queue.\n   * If elements are removed, the {@link BoundedEvent.Overflow} event\n   * is emitted one or more times.\n   * @internal\n   *\n   * @param count - The number of elements to evict.\n   */\n  protected evict(count: number): void {\n    if (count <= 0) {\n      return;\n    }\n\n    const len = this._capacity - this.head;\n    const isNonsequential = !this.isSequential();\n\n    if (isNonsequential && len > count) {\n      this.emit(this.vals.slice(this.head, this.head + count));\n      this.vals.fill(undefined as T, this.head, this.head + count);\n      this.head += count;\n      this._size -= count;\n      return;\n    }\n\n    if (isNonsequential) {\n      this.emit(this.vals.slice(this.head, this.head + len));\n      this.vals.length = this.next;\n      this.head = 0;\n      this._size -= len;\n      if (count <= len) {\n        return;\n      }\n      count -= len;\n    }\n\n    if (count >= this._size) {\n      this.emit(this.vals.slice(this.head, this.head + this._size));\n      this.clear();\n      return;\n    }\n\n    this.emit(this.vals.slice(this.head, this.head + count));\n    this.vals.fill(undefined as T, this.head, this.head + count);\n    this.head += count;\n    this._size -= count;\n  }\n\n  /**\n   * Grow capacity.\n   * @internal\n   *\n   * @param capacity - the new capacity\n   */\n  protected grow(capacity: number): void {\n    // Check if queue is sequential: [    H123456T    ]\n    if (this.isSequential()) {\n      this.sequentialReset(capacity);\n      return;\n    }\n\n    // Queue is not sequential: [456T    H123]\n\n    if (this._size <= this.head) {\n      // [H123456T] = A + B = N\n      const temp = this._size - this.next;\n      this.vals.copyWithin(temp, 0, this.next);\n      this.vals.copyWithin(0, this.head, this.head + temp);\n      this.vals.length = this._size;\n      this.head = 0;\n      this.next = this._size;\n    } else if (this.head + this._size <= capacity) {\n      // [        H123456T] = 2B < 2N\n      this.vals.length = this.head + this._size;\n      this.vals.copyWithin(this._capacity, 0, this.next);\n      this.vals.fill(undefined as T, 0, this.next);\n      this.next = (this.head + this._size) % capacity;\n    } /* else if (this.next + this._size <= capacity) {\n      // [    H123456T] = A + 2B = N + B < 2N\n      const temp = this._capacity - this.head;\n      this.vals.length = capacity;\n      this.vals.copyWithin(this.next, this.head, this._capacity);\n      this.vals.copyWithin(this.next + temp, 0, this.next);\n      this.vals.fill(undefined as T, 0, this.next);\n      this.vals.length = this.next + this._size;\n      this.head = this.next;\n      this.next = (this.head + this._size) % capacity;\n    } */ else {\n      // [6T      H12345] = B + D < 2B < 2N\n      const diff = capacity - this._capacity;\n      this.vals.length = capacity;\n      this.vals.copyWithin(this._capacity, 0, diff);\n      this.vals.copyWithin(0, diff, this.next);\n      const temp = Math.max(diff, this.next - diff);\n      this.vals.fill(undefined as T, temp, this.next);\n      this.next -= diff;\n    }\n\n    // Update capacity\n    this._capacity = capacity;\n  }\n\n  /**\n   * Returns whether the queue is stored sequentially in memory.\n   * @internal\n   *\n   * @returns `true` if the queue is sequential in memory, `false` otherwise.\n   */\n  protected isSequential(): boolean {\n    return this.head < this.next || this.next < 1;\n  }\n\n  /**\n   * Append new elements to the collection.\n   * @internal\n   *\n   * @param elems - The elements to append.\n   * @param max - The number of elements to append.\n   */\n  protected _push(elems: T[], max: number): void {\n    const capacity = this._capacity;\n    const vals = this.vals;\n\n    let tail = this.next;\n    for (let i = 0; i < max; ++i) {\n      vals[tail] = elems[i];\n      if (++tail >= capacity) {\n        tail = 0;\n      }\n    }\n\n    this.next = tail;\n    this._size += max;\n  }\n\n  /**\n   * Adjusts the queue to fit within the given capacity.\n   * @internal\n   *\n   * Assumes the queue is A) sequential in memory and B) size \\<= capacity.\n   *\n   * @param capacity - The new capacity.\n   *\n   * @returns `true` if the queue was reset, `false` otherwise.\n   */\n  protected sequentialReset(capacity: number): boolean {\n    const tail = this.head + this._size;\n\n    // If queue fits in current location: [    H------T    ]\n    if (tail <= capacity) {\n      this.vals.length = tail;\n      this.next = this.vals.length % capacity;\n\n      // If queue must be fully moved: [H------T    ]\n    } else if (this.head >= capacity) {\n      this.vals.copyWithin(0, this.head, tail);\n      this.vals.length = this._size;\n      this.head = 0;\n      this.next = this._size % capacity;\n\n      // If queue must be partially moved: [--T  H----]\n    } else {\n      this.vals.copyWithin(0, capacity, tail);\n      this.vals.length = capacity;\n      this.next = tail - capacity;\n    }\n\n    this._capacity = capacity;\n    return true;\n  }\n\n  /**\n   * Shrink capacity.\n   * @internal\n   *\n   * @param capacity - the new capacity\n   */\n  protected shrink(capacity: number): void {\n    // Handle overflow\n    this.evict(this._size - capacity);\n\n    // Check if queue is sequential: [    H123456T    ]\n    if (this.isSequential()) {\n      this.sequentialReset(capacity);\n      return;\n    }\n\n    // Shift 1st half of queue: [456T....H123] -> [456T..H123]\n    const diff = this._capacity - capacity;\n    this.vals.copyWithin(this.head - diff, this.head, this._capacity);\n    this.vals.length = capacity;\n    this.head -= diff;\n    this._capacity = capacity;\n  }\n}\n","import { Bounded } from \"../types/bounded\";\nimport { BoundedEvent } from \"../types/boundedEvent\";\nimport { Collection } from \"../types/collection\";\nimport { isInfinity, isNumber, isSafeCount } from \"../utils/is\";\n\nimport { CircularBase } from \"./circularBase\";\n\n/**\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularSet<T>\n  extends CircularBase<T>\n  implements Bounded<T>, Set<T>, Collection<T, T>\n{\n  /**\n   * The maximum number of elements that can be stored in the collection.\n   * @internal\n   */\n  protected _capacity: number;\n\n  /**\n   * The internal set.\n   * @internal\n   */\n  protected set: Set<T>;\n\n  /**\n   * Creates a new set with `capacity` defaulted to `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new set with the given capacity.\n   *\n   * @param capacity - the set's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new set. Initial capacity is the number of unique items given.\n   *\n   * @param items - the values to store in the set.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    super();\n\n    // Initialize class variables\n    this._capacity = Infinity;\n    this.set = new Set();\n\n    // Case 1: capacity is null, undefined or Infinity\n    capacity = capacity ?? Infinity;\n    if (isInfinity(capacity)) {\n      return;\n    }\n\n    // Case 2: capacity is zero or a safe positive integer\n    if (isNumber(capacity)) {\n      if (!isSafeCount(capacity)) {\n        throw new RangeError(\"Invalid capacity\");\n      }\n      this._capacity = capacity;\n      return;\n    }\n\n    // Case 3: capacity is iterable\n    this.set = new Set(capacity as Iterable<T>);\n    this._capacity = this.set.size;\n  }\n\n  /**\n   * @returns the maximum number of elements that can be stored.\n   */\n  get capacity(): number {\n    return this._capacity;\n  }\n\n  /**\n   * @returns the number of values in the set.\n   */\n  get size(): number {\n    return this.set.size;\n  }\n\n  /**\n   * Return the type of the object.\n   */\n  get [Symbol.toStringTag](): string {\n    return CircularSet.name;\n  }\n\n  /**\n   * The maximum number of elements that can be stored in the set.\n   */\n  set capacity(capacity: number) {\n    // Convert input to a number\n    capacity = +capacity;\n\n    // Check if input is valid\n    if (!isInfinity(capacity) && !isSafeCount(capacity)) {\n      throw new RangeError(\"Invalid capacity\");\n    }\n\n    // Check if capacity is changing\n    if (capacity === this._capacity) {\n      return;\n    }\n\n    // Update capacity\n    this._capacity = capacity;\n\n    // Check if set is within capacity\n    if (this.size <= capacity) {\n      return;\n    }\n\n    // Check if new capacity is zero\n    if (capacity === 0) {\n      const evicted = Array.from(this.set);\n      this.clear();\n      this.emitter.emit(BoundedEvent.Overflow, evicted);\n      return;\n    }\n\n    // Shrink down map.\n    const evicted: T[] = [];\n    const iter = this.set.values();\n    for (let n = this.size - capacity; n > 0; --n) {\n      const value = iter.next().value;\n      this.set.delete(value);\n      evicted.push(value);\n    }\n    this.emitter.emit(BoundedEvent.Overflow, evicted);\n  }\n\n  /**\n   * Adds the specified value to the set.\n   *\n   * @param value - the value to add.\n   */\n  add(value: T): this {\n    // Base case: set has no capacity.\n    if (this.capacity < 1) {\n      this.emitter.emit(BoundedEvent.Overflow, [value]);\n      return this;\n    }\n\n    // Evict excess items\n    const evicted: T[] = [];\n    if (!this.set.delete(value) && this.size >= this.capacity) {\n      const out = this.set.values().next().value;\n      this.set.delete(out);\n      evicted.push(out);\n    }\n\n    // Add value\n    this.set.add(value);\n\n    // Emit evicted\n    if (evicted.length > 0) {\n      this.emitter.emit(BoundedEvent.Overflow, evicted);\n    }\n\n    return this;\n  }\n\n  /**\n   * Removes all elements from the set.\n   */\n  clear(): void {\n    this.set.clear();\n  }\n\n  /**\n   * Deletes a specified value from the set.\n   *\n   * @returns `true` if the value existed in the set and has been removed, or `false` otherwise.\n   */\n  delete(value: T): boolean {\n    return this.set.delete(value);\n  }\n\n  /**\n   * Iterate through the set's entries.\n   *\n   * **Note:** Modifying the set during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of [key, value] pairs for every entry.\n   */\n  entries(): IterableIterator<[T, T]> {\n    return this.set.entries();\n  }\n\n  /**\n   * Performs the specified action for each value in the set.\n   *\n   * **Note:** Modifying the set during iteration may cause unexpected behavior.\n   *\n   * @param callbackfn - A function that accepts up to three arguments. It is called once per value.\n   * @param thisArg - An object to which the `this` keyword refers to in the `callbackfn` function. Defaults to `undefined`.\n   */\n  forEach(\n    callbackfn: (value: T, key: T, set: this) => void,\n    thisArg?: unknown\n  ): void {\n    for (const key of this.set.keys()) {\n      callbackfn.call(thisArg, key, key, this);\n    }\n  }\n\n  /**\n   * Determines whether a given value is in the set.\n   *\n   * @param value - The value to search for.\n   *\n   * @returns `true` if the value was found, `false` otherwise.\n   */\n  has(value: T): boolean {\n    return this.set.has(value);\n  }\n\n  /**\n   * Iterate through the set's keys.\n   *\n   * **Note:** Modifying the set during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of the set's keys.\n   */\n  keys(): IterableIterator<T> {\n    return this.set.keys();\n  }\n\n  /**\n   * Iterate through the set's values.\n   *\n   * **Note:** Modifying the set during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of the set's values.\n   */\n  values(): IterableIterator<T> {\n    return this.set.keys();\n  }\n\n  /**\n   * Iterate through the set's values.\n   *\n   * **Note:** Modifying the set during iteration may cause unexpected behavior.\n   *\n   * @returns an iterable of values.\n   */\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.set.values();\n  }\n}\n","import { CircularBase } from \"./circularBase\";\nimport { BoundedEvent } from \"../types/boundedEvent\";\nimport { Stack } from \"../types/stack\";\nimport { isArrayLength, isInfinity, isNumber } from \"../utils/is\";\nimport { Bounded } from \"../types/bounded\";\nimport { ARRAY_MAX_LENGTH } from \"../utils/constants\";\n\n/**\n * A circular stack is similar to a traditional stack, but uses a fixed-size,\n * circular buffer. When the stack reaches its maximum capacity and a new\n * element is added, the oldest is discarded, thus maintaining its size.\n *\n * This structure efficiently utilizes memory for applications where only the\n * most recent additions are of interest and older data can be discarded.\n *\n * @see {@link https://en.wikipedia.org/wiki/Circular_buffer | Wikipedia}\n */\nexport class CircularStack<T>\n  extends CircularBase<T>\n  implements Bounded<T>, Stack<T>\n{\n  /**\n   * The maximum number of elements that can be stored in the collection.\n   * @internal\n   */\n  protected _capacity: number;\n\n  /**\n   * The index representing the first element.\n   * @internal\n   */\n  protected head: number;\n\n  /**\n   * Whether capacity is finite (true) or infinite (false).\n   */\n  protected isFinite: boolean;\n\n  /**\n   * The index one more than the last element.\n   * @internal\n   */\n  protected next: number;\n\n  /**\n   * The number of elements.\n   * @internal\n   */\n  protected _size: number;\n\n  /**\n   * The stored values.\n   * @internal\n   */\n  protected vals: T[];\n\n  /**\n   * Creates a new stack. Default `capacity` is `Infinity`.\n   */\n  constructor();\n  /**\n   * Creates a new stack with the given capacity.\n   *\n   * @param capacity - the stack's capacity.\n   */\n  constructor(capacity?: number | null);\n  /**\n   * Creates a new stack from the given items. `capacity` will equal the number of items.\n   *\n   * @param items - the initial values in the stack.\n   */\n  constructor(items: Iterable<T>);\n  constructor(capacity?: number | null | Iterable<T>) {\n    super();\n\n    // Initialize class variables\n    this._capacity = ARRAY_MAX_LENGTH;\n    this.head = 0;\n    this.isFinite = false;\n    this._size = 0;\n    this.next = 0;\n    this.vals = [];\n\n    // If capacity is null, undefined, or Infinity\n    capacity = capacity ?? Infinity;\n    if (isInfinity(capacity)) {\n      return;\n    }\n\n    // If capacity is a number\n    if (isNumber(capacity)) {\n      // If capacity is invalid\n      if (!isArrayLength(capacity)) {\n        throw new RangeError(\"Invalid capacity\");\n      }\n      // If capacity is valid\n      this._capacity = capacity;\n      this.isFinite = true;\n      return;\n    }\n\n    // If capacity is an iterable\n    for (const value of capacity as Iterable<T>) {\n      this.vals.push(value);\n    }\n    this._capacity = this.vals.length;\n    this.isFinite = true;\n    this._size = this._capacity;\n  }\n\n  /**\n   * @returns the maximum number of elements that can be stored.\n   */\n  get capacity(): number {\n    return this.isFinite ? this._capacity : Infinity;\n  }\n\n  /**\n   * @returns the number of elements in the collection.\n   */\n  get size(): number {\n    return this._size;\n  }\n\n  /**\n   * Return the type of the object.\n   */\n  get [Symbol.toStringTag](): string {\n    return CircularStack.name;\n  }\n\n  /**\n   * Sets the maximum number of elements that can be stored.\n   */\n  set capacity(capacity: number) {\n    // Convert capacity to a number\n    capacity = +capacity;\n\n    // Check capacity\n    if (isInfinity(capacity)) {\n      // If capacity is Infinity\n      capacity = ARRAY_MAX_LENGTH;\n      this.isFinite = false;\n    } else if (isArrayLength(capacity)) {\n      // If capacity is valid\n      this.isFinite = true;\n    } else {\n      // If capacity is invalid\n      throw new RangeError(\"Invalid capacity\");\n    }\n\n    // Update collection\n    if (this._size < 1) {\n      // If collection is empty\n      this._capacity = capacity;\n      this.clear();\n    } else if (capacity < this._capacity) {\n      // If capacity is decreasing\n      this.shrink(capacity);\n    } else if (capacity > this._capacity) {\n      // If capacity is increasing\n      this.grow(capacity);\n    }\n  }\n\n  /**\n   * Remove all elements from the collection.\n   */\n  clear(): void {\n    this.head = 0;\n    this._size = 0;\n    this.next = 0;\n    this.vals.length = 0;\n  }\n\n  /**\n   * Iterate through the collection's entries.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @returns an iterable of [key, value] pairs for every entry.\n   */\n  *entries(): IterableIterator<[number, T]> {\n    for (let ext = 0; ext < this._size; ++ext) {\n      yield [ext, this.vals[(this.head + ext) % this._capacity]];\n    }\n  }\n\n  /**\n   * Performs the specified action for each element in the collection.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @param callbackfn - A function that accepts up to three arguments. It is called once per element.\n   * @param thisArg - An object to which the `this` keyword refers to in the `callbackfn` function. If omitted, `undefined` is used.\n   */\n  forEach(\n    callbackfn: (value: T, index: number, collection: this) => void,\n    thisArg?: unknown\n  ): void {\n    const N = this._size;\n    for (let ext = 0; ext < N && ext < this._size; ++ext) {\n      const value = this.vals[(this.head + ext) % this._capacity];\n      callbackfn.call(thisArg, value, ext, this);\n    }\n  }\n\n  /**\n   * Determines whether a given element is in the collection.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @param value - The element to search for\n   *\n   * @returns a boolean indicating if `value` was found or not\n   */\n  has(value: T): boolean {\n    const N = this._size;\n    for (let ext = 0; ext < N; ++ext) {\n      if (value === this.vals[(this.head + ext) % this._capacity]) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Iterate through the collection's keys.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @returns an iterable of keys.\n   */\n  *keys(): IterableIterator<number> {\n    for (let ext = 0; ext < this._size; ++ext) {\n      yield ext;\n    }\n  }\n\n  /**\n   * Get the last element in the stack.\n   *\n   * Alias for {@link top | top()}.\n   *\n   * @returns the last element, or `undefined` if empty.\n   */\n  last(): T | undefined {\n    return this.top();\n  }\n\n  /**\n   * Removes the element at the top of the stack.\n   *\n   * @returns the top element, or `undefined` if empty.\n   */\n  pop(): T | undefined {\n    if (this._size <= 0) {\n      return undefined;\n    }\n\n    const tail = this.next > 0 ? this.next - 1 : this.head + this._size - 1;\n\n    --this._size;\n    this.next = tail;\n    const value = this.vals[tail];\n    this.vals[tail] = undefined as T;\n    return value;\n  }\n\n  /**\n   * Inserts new elements at the end of the stack.\n   *\n   * @param elems - Elements to insert.\n   *\n   * @returns The new size of the stack.\n   */\n  push(...elems: T[]): number {\n    // Case 1: Zero inputs\n    const N = elems.length;\n    if (N < 1) {\n      return this._size;\n    }\n\n    // Case 2: Zero capacity\n    const capacity = this._capacity;\n    if (capacity < 1) {\n      this.emit(elems);\n      return this._size;\n    }\n\n    // Case 3: Enough free space\n    const free = capacity - this._size;\n    if (free >= N) {\n      this._push(elems, N);\n      return this._size;\n    }\n\n    // Case 4: \"Infinite\" capacity but out of space\n    if (!this.isFinite) {\n      this._push(elems, free);\n      throw new Error(\"Out of memory\");\n    }\n\n    // Remove old values\n    const diff = N - capacity;\n    this.evict(this.size + diff);\n    if (diff > 0) {\n      this.emit(elems.splice(0, diff));\n    }\n\n    // Add new values\n    else if (diff < 0) {\n      this._push(elems, N);\n      return this._size;\n    }\n    this.vals = elems;\n    this._size = capacity;\n    return this._size;\n  }\n\n  /**\n   * Iterate through the collection's values.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @returns an iterable of values.\n   */\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.values();\n  }\n\n  /**\n   * Get the last element in the stack.\n   *\n   * Alias for {@link last | last()}.\n   *\n   * @returns the last element, or `undefined` if empty.\n   */\n  top(): T | undefined {\n    if (this._size < 1) {\n      return undefined;\n    }\n    return this.vals[(this.head + this._size - 1) % this._capacity];\n  }\n\n  /**\n   * Iterate through the collection's values.\n   *\n   * **NOTE:** Unknown behavior may occur if the collection is modified during use.\n   *\n   * @returns an iterable of values.\n   */\n  *values(): IterableIterator<T> {\n    for (let ext = 0; ext < this._size; ++ext) {\n      yield this.vals[(this.head + ext) % this._capacity];\n    }\n  }\n\n  /**\n   * Emit an event containing the items evicted from the collection.\n   * @internal\n   *\n   * @param evicted - The items evicted from the collection.\n   */\n  protected emit(evicted: T[]): void {\n    this.emitter.emit(BoundedEvent.Overflow, evicted);\n  }\n\n  /**\n   * Removes a given number of elements from the stack.\n   * @internal\n   *\n   * If elements are removed, the {@link BoundedEvent.Overflow} event\n   * is emitted one or more times.\n   *\n   * @param count - The number of elements to evict.\n   */\n  protected evict(count: number): void {\n    if (count <= 0) {\n      return;\n    }\n\n    const len = this._capacity - this.head;\n    const isNonsequential = !this.isSequential();\n\n    if (isNonsequential && len > count) {\n      this.emit(this.vals.slice(this.head, this.head + count));\n      this.vals.fill(undefined as T, this.head, this.head + count);\n      this.head += count;\n      this._size -= count;\n      return;\n    }\n\n    if (isNonsequential) {\n      this.emit(this.vals.slice(this.head, this.head + len));\n      this.vals.length = this.next;\n      this.head = 0;\n      this._size -= len;\n      if (count <= len) {\n        return;\n      }\n      count -= len;\n    }\n\n    if (count >= this._size) {\n      this.emit(this.vals.slice(this.head, this.head + this._size));\n      this.clear();\n      return;\n    }\n\n    this.emit(this.vals.slice(this.head, this.head + count));\n    this.vals.fill(undefined as T, this.head, this.head + count);\n    this.head += count;\n    this._size -= count;\n  }\n\n  /**\n   * Grow capacity.\n   * @internal\n   *\n   * @param capacity - the new capacity\n   */\n  protected grow(capacity: number): void {\n    // Check if stack is sequential: [    H123456T    ]\n    if (this.isSequential()) {\n      this.sequentialReset(capacity);\n      return;\n    }\n\n    // stack is not sequential: [456T    H123]\n\n    if (this._size <= this.head) {\n      // [H123456T] = A + B = N\n      const temp = this._size - this.next;\n      this.vals.copyWithin(temp, 0, this.next);\n      this.vals.copyWithin(0, this.head, this.head + temp);\n      this.vals.length = this._size;\n      this.head = 0;\n      this.next = this._size;\n    } else if (this.head + this._size <= capacity) {\n      // [        H123456T] = 2B < 2N\n      this.vals.length = this.head + this._size;\n      this.vals.copyWithin(this._capacity, 0, this.next);\n      this.vals.fill(undefined as T, 0, this.next);\n      this.next = (this.head + this._size) % capacity;\n    } /* else if (this.next + this._size <= capacity) {\n      // [    H123456T] = A + 2B = N + B < 2N\n      const temp = this._capacity - this.head;\n      this.vals.length = capacity;\n      this.vals.copyWithin(this.next, this.head, this._capacity);\n      this.vals.copyWithin(this.next + temp, 0, this.next);\n      this.vals.fill(undefined as T, 0, this.next);\n      this.vals.length = this.next + this._size;\n      this.head = this.next;\n      this.next = (this.head + this._size) % capacity;\n    } */ else {\n      // [6T      H12345] = B + D < 2B < 2N\n      const diff = capacity - this._capacity;\n      this.vals.length = capacity;\n      this.vals.copyWithin(this._capacity, 0, diff);\n      this.vals.copyWithin(0, diff, this.next);\n      const temp = Math.max(diff, this.next - diff);\n      this.vals.fill(undefined as T, temp, this.next);\n      this.next -= diff;\n    }\n\n    // Update capacity\n    this._capacity = capacity;\n  }\n\n  /**\n   * Returns whether the stack is stored sequentially in memory.\n   * @internal\n   *\n   * @returns `true` if the stack is sequential in memory, `false` otherwise.\n   */\n  protected isSequential(): boolean {\n    return this.head < this.next || this.next < 1;\n  }\n\n  /**\n   * Append new elements to the collection.\n   * @internal\n   *\n   * @param elems - The elements to append.\n   * @param max - The number of elements to append.\n   */\n  protected _push(elems: T[], max: number): void {\n    const capacity = this._capacity;\n    const vals = this.vals;\n\n    let tail = this.next;\n    for (let i = 0; i < max; ++i) {\n      vals[tail] = elems[i];\n      if (++tail >= capacity) {\n        tail = 0;\n      }\n    }\n\n    this.next = tail;\n    this._size += max;\n  }\n\n  /**\n   * Adjusts the stack to fit within the given capacity.\n   * @internal\n   *\n   * Assumes the stack is A) sequential in memory and B) size \\<= capacity.\n   *\n   * @param capacity - the new capacity.\n   *\n   * @returns `true` if the stack was reset, `false` otherwise.\n   */\n  protected sequentialReset(capacity: number): boolean {\n    const tail = this.head + this._size;\n\n    // If stack fits in current location: [    H------T    ]\n    if (tail <= capacity) {\n      this.vals.length = tail;\n      this.next = this.vals.length % capacity;\n\n      // If stack must be fully moved: [H------T    ]\n    } else if (this.head >= capacity) {\n      this.vals.copyWithin(0, this.head, tail);\n      this.vals.length = this._size;\n      this.head = 0;\n      this.next = this._size % capacity;\n\n      // If stack must be partially moved: [--T  H----]\n    } else {\n      this.vals.copyWithin(0, capacity, tail);\n      this.vals.length = capacity;\n      this.next = tail - capacity;\n    }\n\n    this._capacity = capacity;\n    return true;\n  }\n\n  /**\n   * Shrink capacity.\n   * @internal\n   *\n   * @param capacity - the new capacity\n   */\n  protected shrink(capacity: number): void {\n    this.evict(this._size - capacity);\n\n    // Check if stack is sequential: [    H123456T    ]\n    if (this.isSequential()) {\n      this.sequentialReset(capacity);\n      return;\n    }\n\n    // Shift 1st half of stack: [456T....H123] -> [456T..H123]\n    const diff = this._capacity - capacity;\n    this.vals.copyWithin(this.head - diff, this.head, this._capacity);\n    this.vals.length = capacity;\n    this.head -= diff;\n    this._capacity = capacity;\n  }\n}\n"],"names":["BoundedEvent","EventEmitter","CircularBase","emitter","__publicField","event","listener","ARRAY_MAX_LENGTH","isArrayLength","value","isInfinity","isNumber","isSafeCount","CircularDeque","capacity","ext","callbackfn","thisArg","N","tail","elems","free","diff","evicted","count","len","isNonsequential","temp","max","vals","i","num","head","min","cut","prev","get","entries","node","end","index","has","keys","toArray","array","toList","values","root","singlyCut","singlyGet","addIfBelow","addend","target","clamp","isInRange","toInteger","defaultValue","CircularDoublyLinkedList","size","start","prevValue","out","deleteCount","items","itemCount","replaceCount","minIndex","next","curr","CircularLinkedDeque","v","CircularLinkedList","CircularLinkedQueue","CircularLinkedStack","CircularMap","iter","n","entry","key","CircularQueue","CircularSet","CircularStack"],"mappings":"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"}